{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerPluginUsageReportingDisabled = exports.makeHTTPRequestHeaders = exports.ApolloServerPluginUsageReporting = void 0;\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst zlib_1 = require(\"zlib\");\n\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst apollo_server_types_1 = require(\"apollo-server-types\");\n\nconst signatureCache_1 = require(\"./signatureCache\");\n\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\n\nconst traceDetails_1 = require(\"./traceDetails\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst schemaReporting_1 = require(\"../schemaReporting\");\n\nconst stats_1 = require(\"./stats\");\n\nconst defaultSendOperationsAsTrace_1 = require(\"./defaultSendOperationsAsTrace\");\n\nconst reportHeaderDefaults = {\n  hostname: os_1.default.hostname(),\n  agentVersion: `apollo-server-core@${require('../../../package.json').version}`,\n  runtimeVersion: `node ${process.version}`,\n  uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`\n};\n\nclass ReportData {\n  constructor(executableSchemaId, graphRef) {\n    this.header = new apollo_reporting_protobuf_1.ReportHeader({ ...reportHeaderDefaults,\n      executableSchemaId,\n      graphRef\n    });\n    this.reset();\n  }\n\n  reset() {\n    this.report = new stats_1.OurReport(this.header);\n  }\n\n}\n\nfunction ApolloServerPluginUsageReporting() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  let requestDidStartHandler;\n  return {\n    __internal_plugin_id__() {\n      return 'UsageReporting';\n    },\n\n    async requestDidStart(requestContext) {\n      if (!requestDidStartHandler) {\n        throw Error('The usage reporting plugin has been asked to handle a request before the ' + 'server has started. See https://github.com/apollographql/apollo-server/issues/4588 ' + 'for more details.');\n      }\n\n      return requestDidStartHandler(requestContext);\n    },\n\n    async serverWillStart(_ref) {\n      let {\n        logger: serverLogger,\n        apollo,\n        serverlessFramework\n      } = _ref;\n\n      var _a, _b, _c, _d;\n\n      const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n      const {\n        key,\n        graphRef\n      } = apollo;\n\n      if (!(key && graphRef)) {\n        throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" + 'but you also need to provide your Apollo API key and graph ref, via ' + 'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' + 'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n      }\n\n      logger.info('Apollo usage reporting starting! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n      const sendReportsImmediately = (_b = options.sendReportsImmediately) !== null && _b !== void 0 ? _b : serverlessFramework;\n      const signatureCache = (0, signatureCache_1.createSignatureCache)({\n        logger\n      });\n      const reportDataByExecutableSchemaId = Object.create(null);\n      const overriddenExecutableSchemaId = options.overrideReportedSchema ? (0, schemaReporting_1.computeCoreSchemaHash)(options.overrideReportedSchema) : undefined;\n      let lastSeenExecutableSchemaToId;\n      let reportTimer;\n\n      if (!sendReportsImmediately) {\n        reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n      }\n\n      let graphMightSupportTraces = true;\n      const sendOperationAsTrace = (_c = options.experimental_sendOperationAsTrace) !== null && _c !== void 0 ? _c : (0, defaultSendOperationsAsTrace_1.defaultSendOperationsAsTrace)();\n      const includeTracesContributingToStats = (_d = options.internal_includeTracesContributingToStats) !== null && _d !== void 0 ? _d : false;\n      let stopped = false;\n\n      function executableSchemaIdForSchema(schema) {\n        if ((lastSeenExecutableSchemaToId === null || lastSeenExecutableSchemaToId === void 0 ? void 0 : lastSeenExecutableSchemaToId.executableSchema) === schema) {\n          return lastSeenExecutableSchemaToId.executableSchemaId;\n        }\n\n        const id = (0, schemaReporting_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema));\n        lastSeenExecutableSchemaToId = {\n          executableSchema: schema,\n          executableSchemaId: id\n        };\n        return id;\n      }\n\n      const getReportData = executableSchemaId => {\n        const existing = reportDataByExecutableSchemaId[executableSchemaId];\n\n        if (existing) {\n          return existing;\n        }\n\n        const reportData = new ReportData(executableSchemaId, graphRef);\n        reportDataByExecutableSchemaId[executableSchemaId] = reportData;\n        return reportData;\n      };\n\n      async function sendAllReportsAndReportErrors() {\n        await Promise.all(Object.keys(reportDataByExecutableSchemaId).map(executableSchemaId => sendReportAndReportErrors(executableSchemaId)));\n      }\n\n      async function sendReportAndReportErrors(executableSchemaId) {\n        return sendReport(executableSchemaId).catch(err => {\n          if (options.reportErrorFunction) {\n            options.reportErrorFunction(err);\n          } else {\n            logger.error(err.message);\n          }\n        });\n      }\n\n      const sendReport = async executableSchemaId => {\n        var _a, _b;\n\n        const reportData = getReportData(executableSchemaId);\n        const {\n          report\n        } = reportData;\n        reportData.reset();\n\n        if (Object.keys(report.tracesPerQuery).length === 0) {\n          return;\n        }\n\n        report.endTime = (0, traceTreeBuilder_1.dateToProtoTimestamp)(new Date());\n        const protobufError = apollo_reporting_protobuf_1.Report.verify(report);\n\n        if (protobufError) {\n          throw new Error(`Error encoding report: ${protobufError}`);\n        }\n\n        const message = apollo_reporting_protobuf_1.Report.encode(report).finish();\n\n        if (options.debugPrintReports) {\n          const decodedReport = apollo_reporting_protobuf_1.Report.decode(message);\n          logger.warn(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n        }\n\n        const compressed = await new Promise((resolve, reject) => {\n          const messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);\n          (0, zlib_1.gzip)(messageBuffer, (err, gzipResult) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(gzipResult);\n            }\n          });\n        });\n        const fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n        const response = await (0, async_retry_1.default)(async () => {\n          const curResponse = await fetcher((options.endpointUrl || 'https://usage-reporting.api.apollographql.com') + '/api/ingress/traces', {\n            method: 'POST',\n            headers: {\n              'user-agent': 'ApolloServerPluginUsageReporting',\n              'x-api-key': key,\n              'content-encoding': 'gzip',\n              accept: 'application/json'\n            },\n            body: compressed,\n            agent: options.requestAgent\n          });\n\n          if (curResponse.status >= 500 && curResponse.status < 600) {\n            throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n          } else {\n            return curResponse;\n          }\n        }, {\n          retries: (options.maxAttempts || 5) - 1,\n          minTimeout: options.minimumRetryDelayMs || 100,\n          factor: 2\n        }).catch(err => {\n          throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n        });\n\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n        }\n\n        if (graphMightSupportTraces && response.status === 200 && ((_b = response.headers.get('content-type')) === null || _b === void 0 ? void 0 : _b.match(/^\\s*application\\/json\\s*(?:;|$)/i))) {\n          const body = await response.text();\n          let parsedBody;\n\n          try {\n            parsedBody = JSON.parse(body);\n          } catch (e) {\n            throw new Error(`Error parsing response from Apollo servers: ${e}`);\n          }\n\n          if (parsedBody.tracesIgnored === true) {\n            logger.debug(\"This graph's organization does not have access to traces; sending all \" + 'subsequent operations as traces.');\n            graphMightSupportTraces = false;\n          }\n        }\n\n        if (options.debugPrintReports) {\n          logger.warn(`Apollo usage report: status ${response.status}`);\n        }\n      };\n\n      requestDidStartHandler = _ref2 => {\n        let {\n          logger: requestLogger,\n          metrics,\n          schema,\n          request: {\n            http,\n            variables\n          }\n        } = _ref2;\n\n        var _a;\n\n        const logger = (_a = requestLogger !== null && requestLogger !== void 0 ? requestLogger : options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n        const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n          rewriteError: options.rewriteError,\n          logger\n        });\n        treeBuilder.startTiming();\n        metrics.startHrTime = treeBuilder.startHrTime;\n        let graphqlValidationFailure = false;\n        let graphqlUnknownOperationName = false;\n\n        if (http) {\n          treeBuilder.trace.http = new apollo_reporting_protobuf_1.Trace.HTTP({\n            method: apollo_reporting_protobuf_1.Trace.HTTP.Method[http.method] || apollo_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n            host: null,\n            path: null\n          });\n\n          if (options.sendHeaders) {\n            makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n          }\n        }\n\n        async function shouldIncludeRequest(requestContext) {\n          if (metrics.captureTraces !== undefined) return;\n\n          if (typeof options.includeRequest !== 'function') {\n            metrics.captureTraces = true;\n            return;\n          }\n\n          metrics.captureTraces = await options.includeRequest(requestContext);\n\n          if (typeof metrics.captureTraces !== 'boolean') {\n            logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n            metrics.captureTraces = true;\n          }\n        }\n\n        let didResolveSource = false;\n        return {\n          async didResolveSource(requestContext) {\n            didResolveSource = true;\n\n            if (metrics.persistedQueryHit) {\n              treeBuilder.trace.persistedQueryHit = true;\n            }\n\n            if (metrics.persistedQueryRegister) {\n              treeBuilder.trace.persistedQueryRegister = true;\n            }\n\n            if (variables) {\n              treeBuilder.trace.details = (0, traceDetails_1.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);\n            }\n\n            const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n\n            if (clientInfo) {\n              const {\n                clientName,\n                clientVersion,\n                clientReferenceId\n              } = clientInfo;\n              treeBuilder.trace.clientVersion = clientVersion || '';\n              treeBuilder.trace.clientReferenceId = clientReferenceId || '';\n              treeBuilder.trace.clientName = clientName || '';\n            }\n          },\n\n          async validationDidStart() {\n            return async validationErrors => {\n              graphqlValidationFailure = validationErrors ? validationErrors.length !== 0 : false;\n            };\n          },\n\n          async didResolveOperation(requestContext) {\n            graphqlUnknownOperationName = requestContext.operation === undefined;\n            await shouldIncludeRequest(requestContext);\n          },\n\n          async executionDidStart() {\n            if (metrics.captureTraces === false) return;\n            return {\n              willResolveField(_ref3) {\n                let {\n                  info\n                } = _ref3;\n                return treeBuilder.willResolveField(info);\n              }\n\n            };\n          },\n\n          async willSendResponse(requestContext) {\n            if (!didResolveSource) return;\n\n            if (requestContext.errors) {\n              treeBuilder.didEncounterErrors(requestContext.errors);\n            }\n\n            await shouldIncludeRequest(requestContext);\n            treeBuilder.stopTiming();\n            if (metrics.captureTraces === false) return;\n            treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n            treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n            treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;\n            const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n\n            if (policyIfCacheable) {\n              treeBuilder.trace.cachePolicy = new apollo_reporting_protobuf_1.Trace.CachePolicy({\n                scope: policyIfCacheable.scope === apollo_server_types_1.CacheScope.Private ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE : policyIfCacheable.scope === apollo_server_types_1.CacheScope.Public ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC : apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.UNKNOWN,\n                maxAgeNs: policyIfCacheable.maxAge * 1e9\n              });\n            }\n\n            if (metrics.queryPlanTrace) {\n              treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n            }\n\n            addTrace().catch(logger.error);\n\n            async function addTrace() {\n              if (stopped) {\n                return;\n              }\n\n              await new Promise(res => setImmediate(res));\n              const executableSchemaId = overriddenExecutableSchemaId !== null && overriddenExecutableSchemaId !== void 0 ? overriddenExecutableSchemaId : executableSchemaIdForSchema(schema);\n              const reportData = getReportData(executableSchemaId);\n              const {\n                report\n              } = reportData;\n              const {\n                trace\n              } = treeBuilder;\n              let statsReportKey = undefined;\n\n              if (!requestContext.document) {\n                statsReportKey = `## GraphQLParseFailure\\n`;\n              } else if (graphqlValidationFailure) {\n                statsReportKey = `## GraphQLValidationFailure\\n`;\n              } else if (graphqlUnknownOperationName) {\n                statsReportKey = `## GraphQLUnknownOperationName\\n`;\n              }\n\n              if (statsReportKey) {\n                if (options.sendUnexecutableOperationDocuments) {\n                  trace.unexecutedOperationBody = requestContext.source;\n                  trace.unexecutedOperationName = requestContext.request.operationName || '';\n                }\n              } else {\n                const signature = getTraceSignature();\n                statsReportKey = `# ${requestContext.operationName || '-'}\\n${signature}`;\n              }\n\n              const protobufError = apollo_reporting_protobuf_1.Trace.verify(trace);\n\n              if (protobufError) {\n                throw new Error(`Error encoding trace: ${protobufError}`);\n              }\n\n              report.addTrace({\n                statsReportKey,\n                trace,\n                asTrace: graphMightSupportTraces && sendOperationAsTrace(trace, statsReportKey),\n                includeTracesContributingToStats\n              });\n\n              if (sendReportsImmediately || report.sizeEstimator.bytes >= (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                await sendReportAndReportErrors(executableSchemaId);\n              }\n            }\n\n            function getTraceSignature() {\n              if (!requestContext.document) {\n                throw new Error('No document?');\n              }\n\n              const cacheKey = (0, signatureCache_1.signatureCacheKey)(requestContext.queryHash, requestContext.operationName || '');\n              const cachedSignature = signatureCache.get(cacheKey);\n\n              if (cachedSignature) {\n                return cachedSignature;\n              }\n\n              const generatedSignature = (options.calculateSignature || apollo_graphql_1.defaultUsageReportingSignature)(requestContext.document, requestContext.operationName || '');\n              signatureCache.set(cacheKey, generatedSignature);\n              return generatedSignature;\n            }\n          }\n\n        };\n      };\n\n      return {\n        async serverWillStop() {\n          if (reportTimer) {\n            clearInterval(reportTimer);\n            reportTimer = undefined;\n          }\n\n          stopped = true;\n          await sendAllReportsAndReportErrors();\n        }\n\n      };\n    }\n\n  };\n}\n\nexports.ApolloServerPluginUsageReporting = ApolloServerPluginUsageReporting;\n\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n  if (!sendHeaders || 'none' in sendHeaders && sendHeaders.none || 'all' in sendHeaders && !sendHeaders.all) {\n    return;\n  }\n\n  for (const [key, value] of headers) {\n    const lowerCaseKey = key.toLowerCase();\n\n    if ('exceptNames' in sendHeaders && sendHeaders.exceptNames.some(exceptHeader => {\n      return exceptHeader.toLowerCase() === lowerCaseKey;\n    }) || 'onlyNames' in sendHeaders && !sendHeaders.onlyNames.some(header => {\n      return header.toLowerCase() === lowerCaseKey;\n    })) {\n      continue;\n    }\n\n    switch (key) {\n      case 'authorization':\n      case 'cookie':\n      case 'set-cookie':\n        break;\n\n      default:\n        http.requestHeaders[key] = new apollo_reporting_protobuf_1.Trace.HTTP.Values({\n          value: [value]\n        });\n    }\n  }\n}\n\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;\n\nfunction defaultGenerateClientInfo(_ref4) {\n  let {\n    request\n  } = _ref4;\n\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n  const clientNameHeaderKey = 'apollographql-client-name';\n  const clientReferenceIdHeaderKey = 'apollographql-client-reference-id';\n  const clientVersionHeaderKey = 'apollographql-client-version';\n\n  if (((_b = (_a = request.http) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.get(clientNameHeaderKey)) || ((_d = (_c = request.http) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d.get(clientVersionHeaderKey)) || ((_f = (_e = request.http) === null || _e === void 0 ? void 0 : _e.headers) === null || _f === void 0 ? void 0 : _f.get(clientReferenceIdHeaderKey))) {\n    return {\n      clientName: (_h = (_g = request.http) === null || _g === void 0 ? void 0 : _g.headers) === null || _h === void 0 ? void 0 : _h.get(clientNameHeaderKey),\n      clientVersion: (_k = (_j = request.http) === null || _j === void 0 ? void 0 : _j.headers) === null || _k === void 0 ? void 0 : _k.get(clientVersionHeaderKey),\n      clientReferenceId: (_m = (_l = request.http) === null || _l === void 0 ? void 0 : _l.headers) === null || _m === void 0 ? void 0 : _m.get(clientReferenceIdHeaderKey)\n    };\n  } else if ((_o = request.extensions) === null || _o === void 0 ? void 0 : _o.clientInfo) {\n    return request.extensions.clientInfo;\n  } else {\n    return {};\n  }\n}\n\nfunction ApolloServerPluginUsageReportingDisabled() {\n  return {\n    __internal_plugin_id__() {\n      return 'UsageReporting';\n    }\n\n  };\n}\n\nexports.ApolloServerPluginUsageReportingDisabled = ApolloServerPluginUsageReportingDisabled;","map":{"version":3,"sources":["../../../src/plugin/usageReporting/plugin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServerPluginUsageReportingDisabled = exports.makeHTTPRequestHeaders = exports.ApolloServerPluginUsageReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst zlib_1 = require(\"zlib\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst apollo_server_types_1 = require(\"apollo-server-types\");\nconst signatureCache_1 = require(\"./signatureCache\");\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\nconst traceDetails_1 = require(\"./traceDetails\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporting_1 = require(\"../schemaReporting\");\nconst stats_1 = require(\"./stats\");\nconst defaultSendOperationsAsTrace_1 = require(\"./defaultSendOperationsAsTrace\");\nconst reportHeaderDefaults = {\n    hostname: os_1.default.hostname(),\n    agentVersion: `apollo-server-core@${require('../../../package.json').version}`,\n    runtimeVersion: `node ${process.version}`,\n    uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`,\n};\nclass ReportData {\n    constructor(executableSchemaId, graphRef) {\n        this.header = new apollo_reporting_protobuf_1.ReportHeader({\n            ...reportHeaderDefaults,\n            executableSchemaId,\n            graphRef,\n        });\n        this.reset();\n    }\n    reset() {\n        this.report = new stats_1.OurReport(this.header);\n    }\n}\nfunction ApolloServerPluginUsageReporting(options = Object.create(null)) {\n    let requestDidStartHandler;\n    return {\n        __internal_plugin_id__() {\n            return 'UsageReporting';\n        },\n        async requestDidStart(requestContext) {\n            if (!requestDidStartHandler) {\n                throw Error('The usage reporting plugin has been asked to handle a request before the ' +\n                    'server has started. See https://github.com/apollographql/apollo-server/issues/4588 ' +\n                    'for more details.');\n            }\n            return requestDidStartHandler(requestContext);\n        },\n        async serverWillStart({ logger: serverLogger, apollo, serverlessFramework, }) {\n            var _a, _b, _c, _d;\n            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n            const { key, graphRef } = apollo;\n            if (!(key && graphRef)) {\n                throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" +\n                    'but you also need to provide your Apollo API key and graph ref, via ' +\n                    'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' +\n                    'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n            }\n            logger.info('Apollo usage reporting starting! See your graph at ' +\n                `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n            const sendReportsImmediately = (_b = options.sendReportsImmediately) !== null && _b !== void 0 ? _b : serverlessFramework;\n            const signatureCache = (0, signatureCache_1.createSignatureCache)({ logger });\n            const reportDataByExecutableSchemaId = Object.create(null);\n            const overriddenExecutableSchemaId = options.overrideReportedSchema\n                ? (0, schemaReporting_1.computeCoreSchemaHash)(options.overrideReportedSchema)\n                : undefined;\n            let lastSeenExecutableSchemaToId;\n            let reportTimer;\n            if (!sendReportsImmediately) {\n                reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n            }\n            let graphMightSupportTraces = true;\n            const sendOperationAsTrace = (_c = options.experimental_sendOperationAsTrace) !== null && _c !== void 0 ? _c : (0, defaultSendOperationsAsTrace_1.defaultSendOperationsAsTrace)();\n            const includeTracesContributingToStats = (_d = options.internal_includeTracesContributingToStats) !== null && _d !== void 0 ? _d : false;\n            let stopped = false;\n            function executableSchemaIdForSchema(schema) {\n                if ((lastSeenExecutableSchemaToId === null || lastSeenExecutableSchemaToId === void 0 ? void 0 : lastSeenExecutableSchemaToId.executableSchema) === schema) {\n                    return lastSeenExecutableSchemaToId.executableSchemaId;\n                }\n                const id = (0, schemaReporting_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema));\n                lastSeenExecutableSchemaToId = {\n                    executableSchema: schema,\n                    executableSchemaId: id,\n                };\n                return id;\n            }\n            const getReportData = (executableSchemaId) => {\n                const existing = reportDataByExecutableSchemaId[executableSchemaId];\n                if (existing) {\n                    return existing;\n                }\n                const reportData = new ReportData(executableSchemaId, graphRef);\n                reportDataByExecutableSchemaId[executableSchemaId] = reportData;\n                return reportData;\n            };\n            async function sendAllReportsAndReportErrors() {\n                await Promise.all(Object.keys(reportDataByExecutableSchemaId).map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));\n            }\n            async function sendReportAndReportErrors(executableSchemaId) {\n                return sendReport(executableSchemaId).catch((err) => {\n                    if (options.reportErrorFunction) {\n                        options.reportErrorFunction(err);\n                    }\n                    else {\n                        logger.error(err.message);\n                    }\n                });\n            }\n            const sendReport = async (executableSchemaId) => {\n                var _a, _b;\n                const reportData = getReportData(executableSchemaId);\n                const { report } = reportData;\n                reportData.reset();\n                if (Object.keys(report.tracesPerQuery).length === 0) {\n                    return;\n                }\n                report.endTime = (0, traceTreeBuilder_1.dateToProtoTimestamp)(new Date());\n                const protobufError = apollo_reporting_protobuf_1.Report.verify(report);\n                if (protobufError) {\n                    throw new Error(`Error encoding report: ${protobufError}`);\n                }\n                const message = apollo_reporting_protobuf_1.Report.encode(report).finish();\n                if (options.debugPrintReports) {\n                    const decodedReport = apollo_reporting_protobuf_1.Report.decode(message);\n                    logger.warn(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n                }\n                const compressed = await new Promise((resolve, reject) => {\n                    const messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);\n                    (0, zlib_1.gzip)(messageBuffer, (err, gzipResult) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(gzipResult);\n                        }\n                    });\n                });\n                const fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n                const response = await (0, async_retry_1.default)(async () => {\n                    const curResponse = await fetcher((options.endpointUrl ||\n                        'https://usage-reporting.api.apollographql.com') +\n                        '/api/ingress/traces', {\n                        method: 'POST',\n                        headers: {\n                            'user-agent': 'ApolloServerPluginUsageReporting',\n                            'x-api-key': key,\n                            'content-encoding': 'gzip',\n                            accept: 'application/json',\n                        },\n                        body: compressed,\n                        agent: options.requestAgent,\n                    });\n                    if (curResponse.status >= 500 && curResponse.status < 600) {\n                        throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n                    }\n                    else {\n                        return curResponse;\n                    }\n                }, {\n                    retries: (options.maxAttempts || 5) - 1,\n                    minTimeout: options.minimumRetryDelayMs || 100,\n                    factor: 2,\n                }).catch((err) => {\n                    throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n                });\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n                }\n                if (graphMightSupportTraces &&\n                    response.status === 200 &&\n                    ((_b = response.headers\n                        .get('content-type')) === null || _b === void 0 ? void 0 : _b.match(/^\\s*application\\/json\\s*(?:;|$)/i))) {\n                    const body = await response.text();\n                    let parsedBody;\n                    try {\n                        parsedBody = JSON.parse(body);\n                    }\n                    catch (e) {\n                        throw new Error(`Error parsing response from Apollo servers: ${e}`);\n                    }\n                    if (parsedBody.tracesIgnored === true) {\n                        logger.debug(\"This graph's organization does not have access to traces; sending all \" +\n                            'subsequent operations as traces.');\n                        graphMightSupportTraces = false;\n                    }\n                }\n                if (options.debugPrintReports) {\n                    logger.warn(`Apollo usage report: status ${response.status}`);\n                }\n            };\n            requestDidStartHandler = ({ logger: requestLogger, metrics, schema, request: { http, variables }, }) => {\n                var _a;\n                const logger = (_a = requestLogger !== null && requestLogger !== void 0 ? requestLogger : options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n                const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n                    rewriteError: options.rewriteError,\n                    logger,\n                });\n                treeBuilder.startTiming();\n                metrics.startHrTime = treeBuilder.startHrTime;\n                let graphqlValidationFailure = false;\n                let graphqlUnknownOperationName = false;\n                if (http) {\n                    treeBuilder.trace.http = new apollo_reporting_protobuf_1.Trace.HTTP({\n                        method: apollo_reporting_protobuf_1.Trace.HTTP.Method[http.method] || apollo_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n                        host: null,\n                        path: null,\n                    });\n                    if (options.sendHeaders) {\n                        makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n                    }\n                }\n                async function shouldIncludeRequest(requestContext) {\n                    if (metrics.captureTraces !== undefined)\n                        return;\n                    if (typeof options.includeRequest !== 'function') {\n                        metrics.captureTraces = true;\n                        return;\n                    }\n                    metrics.captureTraces = await options.includeRequest(requestContext);\n                    if (typeof metrics.captureTraces !== 'boolean') {\n                        logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n                        metrics.captureTraces = true;\n                    }\n                }\n                let didResolveSource = false;\n                return {\n                    async didResolveSource(requestContext) {\n                        didResolveSource = true;\n                        if (metrics.persistedQueryHit) {\n                            treeBuilder.trace.persistedQueryHit = true;\n                        }\n                        if (metrics.persistedQueryRegister) {\n                            treeBuilder.trace.persistedQueryRegister = true;\n                        }\n                        if (variables) {\n                            treeBuilder.trace.details = (0, traceDetails_1.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);\n                        }\n                        const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n                        if (clientInfo) {\n                            const { clientName, clientVersion, clientReferenceId } = clientInfo;\n                            treeBuilder.trace.clientVersion = clientVersion || '';\n                            treeBuilder.trace.clientReferenceId = clientReferenceId || '';\n                            treeBuilder.trace.clientName = clientName || '';\n                        }\n                    },\n                    async validationDidStart() {\n                        return async (validationErrors) => {\n                            graphqlValidationFailure = validationErrors\n                                ? validationErrors.length !== 0\n                                : false;\n                        };\n                    },\n                    async didResolveOperation(requestContext) {\n                        graphqlUnknownOperationName =\n                            requestContext.operation === undefined;\n                        await shouldIncludeRequest(requestContext);\n                    },\n                    async executionDidStart() {\n                        if (metrics.captureTraces === false)\n                            return;\n                        return {\n                            willResolveField({ info }) {\n                                return treeBuilder.willResolveField(info);\n                            },\n                        };\n                    },\n                    async willSendResponse(requestContext) {\n                        if (!didResolveSource)\n                            return;\n                        if (requestContext.errors) {\n                            treeBuilder.didEncounterErrors(requestContext.errors);\n                        }\n                        await shouldIncludeRequest(requestContext);\n                        treeBuilder.stopTiming();\n                        if (metrics.captureTraces === false)\n                            return;\n                        treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n                        treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n                        treeBuilder.trace.registeredOperation =\n                            !!metrics.registeredOperation;\n                        const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n                        if (policyIfCacheable) {\n                            treeBuilder.trace.cachePolicy = new apollo_reporting_protobuf_1.Trace.CachePolicy({\n                                scope: policyIfCacheable.scope === apollo_server_types_1.CacheScope.Private\n                                    ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE\n                                    : policyIfCacheable.scope === apollo_server_types_1.CacheScope.Public\n                                        ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC\n                                        : apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.UNKNOWN,\n                                maxAgeNs: policyIfCacheable.maxAge * 1e9,\n                            });\n                        }\n                        if (metrics.queryPlanTrace) {\n                            treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                        }\n                        addTrace().catch(logger.error);\n                        async function addTrace() {\n                            if (stopped) {\n                                return;\n                            }\n                            await new Promise((res) => setImmediate(res));\n                            const executableSchemaId = overriddenExecutableSchemaId !== null && overriddenExecutableSchemaId !== void 0 ? overriddenExecutableSchemaId : executableSchemaIdForSchema(schema);\n                            const reportData = getReportData(executableSchemaId);\n                            const { report } = reportData;\n                            const { trace } = treeBuilder;\n                            let statsReportKey = undefined;\n                            if (!requestContext.document) {\n                                statsReportKey = `## GraphQLParseFailure\\n`;\n                            }\n                            else if (graphqlValidationFailure) {\n                                statsReportKey = `## GraphQLValidationFailure\\n`;\n                            }\n                            else if (graphqlUnknownOperationName) {\n                                statsReportKey = `## GraphQLUnknownOperationName\\n`;\n                            }\n                            if (statsReportKey) {\n                                if (options.sendUnexecutableOperationDocuments) {\n                                    trace.unexecutedOperationBody = requestContext.source;\n                                    trace.unexecutedOperationName =\n                                        requestContext.request.operationName || '';\n                                }\n                            }\n                            else {\n                                const signature = getTraceSignature();\n                                statsReportKey = `# ${requestContext.operationName || '-'}\\n${signature}`;\n                            }\n                            const protobufError = apollo_reporting_protobuf_1.Trace.verify(trace);\n                            if (protobufError) {\n                                throw new Error(`Error encoding trace: ${protobufError}`);\n                            }\n                            report.addTrace({\n                                statsReportKey,\n                                trace,\n                                asTrace: graphMightSupportTraces &&\n                                    sendOperationAsTrace(trace, statsReportKey),\n                                includeTracesContributingToStats,\n                            });\n                            if (sendReportsImmediately ||\n                                report.sizeEstimator.bytes >=\n                                    (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                                await sendReportAndReportErrors(executableSchemaId);\n                            }\n                        }\n                        function getTraceSignature() {\n                            if (!requestContext.document) {\n                                throw new Error('No document?');\n                            }\n                            const cacheKey = (0, signatureCache_1.signatureCacheKey)(requestContext.queryHash, requestContext.operationName || '');\n                            const cachedSignature = signatureCache.get(cacheKey);\n                            if (cachedSignature) {\n                                return cachedSignature;\n                            }\n                            const generatedSignature = (options.calculateSignature || apollo_graphql_1.defaultUsageReportingSignature)(requestContext.document, requestContext.operationName || '');\n                            signatureCache.set(cacheKey, generatedSignature);\n                            return generatedSignature;\n                        }\n                    },\n                };\n            };\n            return {\n                async serverWillStop() {\n                    if (reportTimer) {\n                        clearInterval(reportTimer);\n                        reportTimer = undefined;\n                    }\n                    stopped = true;\n                    await sendAllReportsAndReportErrors();\n                },\n            };\n        },\n    };\n}\nexports.ApolloServerPluginUsageReporting = ApolloServerPluginUsageReporting;\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n    if (!sendHeaders ||\n        ('none' in sendHeaders && sendHeaders.none) ||\n        ('all' in sendHeaders && !sendHeaders.all)) {\n        return;\n    }\n    for (const [key, value] of headers) {\n        const lowerCaseKey = key.toLowerCase();\n        if (('exceptNames' in sendHeaders &&\n            sendHeaders.exceptNames.some((exceptHeader) => {\n                return exceptHeader.toLowerCase() === lowerCaseKey;\n            })) ||\n            ('onlyNames' in sendHeaders &&\n                !sendHeaders.onlyNames.some((header) => {\n                    return header.toLowerCase() === lowerCaseKey;\n                }))) {\n            continue;\n        }\n        switch (key) {\n            case 'authorization':\n            case 'cookie':\n            case 'set-cookie':\n                break;\n            default:\n                http.requestHeaders[key] = new apollo_reporting_protobuf_1.Trace.HTTP.Values({\n                    value: [value],\n                });\n        }\n    }\n}\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;\nfunction defaultGenerateClientInfo({ request }) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    const clientNameHeaderKey = 'apollographql-client-name';\n    const clientReferenceIdHeaderKey = 'apollographql-client-reference-id';\n    const clientVersionHeaderKey = 'apollographql-client-version';\n    if (((_b = (_a = request.http) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.get(clientNameHeaderKey)) ||\n        ((_d = (_c = request.http) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d.get(clientVersionHeaderKey)) ||\n        ((_f = (_e = request.http) === null || _e === void 0 ? void 0 : _e.headers) === null || _f === void 0 ? void 0 : _f.get(clientReferenceIdHeaderKey))) {\n        return {\n            clientName: (_h = (_g = request.http) === null || _g === void 0 ? void 0 : _g.headers) === null || _h === void 0 ? void 0 : _h.get(clientNameHeaderKey),\n            clientVersion: (_k = (_j = request.http) === null || _j === void 0 ? void 0 : _j.headers) === null || _k === void 0 ? void 0 : _k.get(clientVersionHeaderKey),\n            clientReferenceId: (_m = (_l = request.http) === null || _l === void 0 ? void 0 : _l.headers) === null || _m === void 0 ? void 0 : _m.get(clientReferenceIdHeaderKey),\n        };\n    }\n    else if ((_o = request.extensions) === null || _o === void 0 ? void 0 : _o.clientInfo) {\n        return request.extensions.clientInfo;\n    }\n    else {\n        return {};\n    }\n}\nfunction ApolloServerPluginUsageReportingDisabled() {\n    return {\n        __internal_plugin_id__() {\n            return 'UsageReporting';\n        },\n    };\n}\nexports.ApolloServerPluginUsageReportingDisabled = ApolloServerPluginUsageReportingDisabled;\n//# sourceMappingURL=plugin.js.map"]},"metadata":{},"sourceType":"script"}