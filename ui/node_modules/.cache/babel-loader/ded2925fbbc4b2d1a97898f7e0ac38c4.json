{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processGraphQLRequest = exports.APQ_CACHE_PREFIX = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst schemaInstrumentation_1 = require(\"./utils/schemaInstrumentation\");\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst dispatcher_1 = require(\"./utils/dispatcher\");\n\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\n\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\n\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nexports.APQ_CACHE_PREFIX = 'apq:';\n\nfunction computeQueryHash(query) {\n  return (0, createSHA_1.default)('sha256').update(query).digest('hex');\n}\n\nasync function processGraphQLRequest(config, requestContext) {\n  var _a, _b, _c;\n\n  const logger = requestContext.logger || console;\n  const metrics = requestContext.metrics = requestContext.metrics || Object.create(null);\n  const dispatcher = await initializeRequestListenerDispatcher();\n  await initializeDataSources();\n  const request = requestContext.request;\n  let {\n    query,\n    extensions\n  } = request;\n  let queryHash;\n  let persistedQueryCache;\n  metrics.persistedQueryHit = false;\n  metrics.persistedQueryRegister = false;\n\n  if (extensions === null || extensions === void 0 ? void 0 : extensions.persistedQuery) {\n    if (!config.persistedQueries || !config.persistedQueries.cache) {\n      return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotSupportedError());\n    } else if (extensions.persistedQuery.version !== 1) {\n      return await sendErrorResponse(new graphql_1.GraphQLError('Unsupported persisted query version'));\n    }\n\n    persistedQueryCache = config.persistedQueries.cache;\n\n    if (!(persistedQueryCache instanceof apollo_server_caching_1.PrefixingKeyValueCache)) {\n      persistedQueryCache = new apollo_server_caching_1.PrefixingKeyValueCache(persistedQueryCache, exports.APQ_CACHE_PREFIX);\n    }\n\n    queryHash = extensions.persistedQuery.sha256Hash;\n\n    if (query === undefined) {\n      query = await persistedQueryCache.get(queryHash);\n\n      if (query) {\n        metrics.persistedQueryHit = true;\n      } else {\n        return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotFoundError());\n      }\n    } else {\n      const computedQueryHash = computeQueryHash(query);\n\n      if (queryHash !== computedQueryHash) {\n        return await sendErrorResponse(new graphql_1.GraphQLError('provided sha does not match query'));\n      }\n\n      metrics.persistedQueryRegister = true;\n    }\n  } else if (query) {\n    queryHash = computeQueryHash(query);\n  } else {\n    return await sendErrorResponse(new graphql_1.GraphQLError('GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.'));\n  }\n\n  requestContext.queryHash = queryHash;\n  requestContext.source = query;\n  await dispatcher.invokeHook('didResolveSource', requestContext);\n\n  if (config.documentStore) {\n    try {\n      requestContext.document = await config.documentStore.get(queryHash);\n    } catch (err) {\n      logger.warn('An error occurred while attempting to read from the documentStore. ' + ((_a = err) === null || _a === void 0 ? void 0 : _a.message) || err);\n    }\n  }\n\n  if (!requestContext.document) {\n    const parsingDidEnd = await dispatcher.invokeDidStartHook('parsingDidStart', requestContext);\n\n    try {\n      requestContext.document = parse(query, config.parseOptions);\n      parsingDidEnd();\n    } catch (syntaxError) {\n      await parsingDidEnd(syntaxError);\n      return await sendErrorResponse(syntaxError, apollo_server_errors_1.SyntaxError);\n    }\n\n    const validationDidEnd = await dispatcher.invokeDidStartHook('validationDidStart', requestContext);\n    const validationErrors = validate(requestContext.document);\n\n    if (validationErrors.length === 0) {\n      await validationDidEnd();\n    } else {\n      await validationDidEnd(validationErrors);\n      return await sendErrorResponse(validationErrors, apollo_server_errors_1.ValidationError);\n    }\n\n    if (config.documentStore) {\n      Promise.resolve(config.documentStore.set(queryHash, requestContext.document)).catch(err => logger.warn('Could not store validated document. ' + (err === null || err === void 0 ? void 0 : err.message) || err));\n    }\n  }\n\n  const operation = (0, graphql_1.getOperationAST)(requestContext.document, request.operationName);\n  requestContext.operation = operation || undefined;\n  requestContext.operationName = ((_b = operation === null || operation === void 0 ? void 0 : operation.name) === null || _b === void 0 ? void 0 : _b.value) || null;\n\n  try {\n    await dispatcher.invokeHook('didResolveOperation', requestContext);\n  } catch (err) {\n    return await sendErrorResponse(err);\n  }\n\n  if (metrics.persistedQueryRegister && persistedQueryCache) {\n    Promise.resolve(persistedQueryCache.set(queryHash, query, config.persistedQueries && typeof config.persistedQueries.ttl !== 'undefined' ? {\n      ttl: config.persistedQueries.ttl\n    } : Object.create(null))).catch(logger.warn);\n  }\n\n  let response = await dispatcher.invokeHooksUntilNonNull('responseForOperation', requestContext);\n\n  if (response == null) {\n    const executionListeners = [];\n    (await dispatcher.invokeHook('executionDidStart', requestContext)).forEach(executionListener => {\n      if (executionListener) {\n        executionListeners.push(executionListener);\n      }\n    });\n    executionListeners.reverse();\n    const executionDispatcher = new dispatcher_1.Dispatcher(executionListeners);\n\n    const invokeWillResolveField = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return executionDispatcher.invokeSyncDidStartHook('willResolveField', ...args);\n    };\n\n    Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolExecutionDispatcherWillResolveField, {\n      value: invokeWillResolveField\n    });\n\n    if (config.fieldResolver) {\n      Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolUserFieldResolver, {\n        value: config.fieldResolver\n      });\n    }\n\n    (0, schemaInstrumentation_1.enablePluginsForSchemaResolvers)(config.schema);\n\n    try {\n      const result = await execute(requestContext);\n      const resultErrors = (_c = result.errors) === null || _c === void 0 ? void 0 : _c.map(e => {\n        var _a;\n\n        if (((_a = e.nodes) === null || _a === void 0 ? void 0 : _a.length) === 1 && e.nodes[0].kind === graphql_1.Kind.VARIABLE_DEFINITION && (e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" got invalid value `) || e.nodes[0].type.kind === graphql_1.Kind.NON_NULL_TYPE && e.nodes[0].type.type.kind === graphql_1.Kind.NAMED_TYPE && (e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" of required ` + `type \"${e.nodes[0].type.type.name.value}!\" was not provided.`) || e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" of non-null ` + `type \"${e.nodes[0].type.type.name.value}!\" must not be null.`)))) {\n          return (0, apollo_server_errors_1.fromGraphQLError)(e, {\n            errorClass: apollo_server_errors_1.UserInputError\n          });\n        }\n\n        return e;\n      });\n\n      if (resultErrors) {\n        await didEncounterErrors(resultErrors);\n      }\n\n      response = { ...result,\n        errors: resultErrors ? formatErrors(resultErrors) : undefined\n      };\n      await executionDispatcher.invokeHook('executionDidEnd');\n    } catch (executionError) {\n      await executionDispatcher.invokeHook('executionDidEnd', executionError);\n      return await sendErrorResponse(executionError);\n    }\n  }\n\n  if (config.formatResponse) {\n    const formattedResponse = config.formatResponse(response, requestContext);\n\n    if (formattedResponse != null) {\n      response = formattedResponse;\n    }\n  }\n\n  return sendResponse(response);\n\n  function parse(query, parseOptions) {\n    return (0, graphql_1.parse)(query, parseOptions);\n  }\n\n  function validate(document) {\n    let rules = graphql_1.specifiedRules;\n\n    if (config.validationRules) {\n      rules = rules.concat(config.validationRules);\n    }\n\n    return (0, graphql_1.validate)(config.schema, document, rules);\n  }\n\n  async function execute(requestContext) {\n    const {\n      request,\n      document\n    } = requestContext;\n    const executionArgs = {\n      schema: config.schema,\n      document,\n      rootValue: typeof config.rootValue === 'function' ? config.rootValue(document) : config.rootValue,\n      contextValue: requestContext.context,\n      variableValues: request.variables,\n      operationName: request.operationName,\n      fieldResolver: config.fieldResolver\n    };\n\n    if (config.executor) {\n      return await config.executor(requestContext);\n    } else {\n      return await (0, graphql_1.execute)(executionArgs);\n    }\n  }\n\n  async function sendResponse(response) {\n    requestContext.response = { ...requestContext.response,\n      errors: response.errors,\n      data: response.data,\n      extensions: response.extensions\n    };\n\n    if (response.http) {\n      if (!requestContext.response.http) {\n        requestContext.response.http = {\n          headers: new apollo_server_env_1.Headers()\n        };\n      }\n\n      if (response.http.status) {\n        requestContext.response.http.status = response.http.status;\n      }\n\n      for (const [name, value] of response.http.headers) {\n        requestContext.response.http.headers.set(name, value);\n      }\n    }\n\n    await dispatcher.invokeHook('willSendResponse', requestContext);\n    return requestContext.response;\n  }\n\n  async function didEncounterErrors(errors) {\n    requestContext.errors = errors;\n    return await dispatcher.invokeHook('didEncounterErrors', requestContext);\n  }\n\n  async function sendErrorResponse(errorOrErrors, errorClass) {\n    const errors = Array.isArray(errorOrErrors) ? errorOrErrors : [errorOrErrors];\n    await didEncounterErrors(errors);\n    const response = {\n      errors: formatErrors(errors.map(err => err instanceof apollo_server_errors_1.ApolloError && !errorClass ? err : (0, apollo_server_errors_1.fromGraphQLError)(err, errorClass && {\n        errorClass\n      })))\n    };\n\n    if (errors.every(err => err instanceof apollo_server_errors_1.PersistedQueryNotSupportedError || err instanceof apollo_server_errors_1.PersistedQueryNotFoundError)) {\n      response.http = {\n        status: 200,\n        headers: new apollo_server_env_1.Headers({\n          'Cache-Control': 'private, no-cache, must-revalidate'\n        })\n      };\n    } else if (errors.length === 1 && errors[0] instanceof runHttpQuery_1.HttpQueryError) {\n      response.http = {\n        status: errors[0].statusCode,\n        headers: new apollo_server_env_1.Headers(errors[0].headers)\n      };\n    }\n\n    return sendResponse(response);\n  }\n\n  function formatErrors(errors) {\n    return (0, apollo_server_errors_1.formatApolloErrors)(errors, {\n      formatter: config.formatError,\n      debug: requestContext.debug\n    });\n  }\n\n  async function initializeRequestListenerDispatcher() {\n    const requestListeners = [];\n\n    if (config.plugins) {\n      for (const plugin of config.plugins) {\n        if (!plugin.requestDidStart) continue;\n        const listener = await plugin.requestDidStart(requestContext);\n\n        if (listener) {\n          requestListeners.push(listener);\n        }\n      }\n    }\n\n    return new dispatcher_1.Dispatcher(requestListeners);\n  }\n\n  async function initializeDataSources() {\n    if (config.dataSources) {\n      const context = requestContext.context;\n      const dataSources = config.dataSources();\n      const initializers = [];\n\n      for (const dataSource of Object.values(dataSources)) {\n        if (dataSource.initialize) {\n          initializers.push(dataSource.initialize({\n            context,\n            cache: requestContext.cache\n          }));\n        }\n      }\n\n      await Promise.all(initializers);\n\n      if ('dataSources' in context) {\n        throw new Error('Please use the dataSources config option instead of putting dataSources on the context yourself.');\n      }\n\n      context.dataSources = dataSources;\n    }\n  }\n}\n\nexports.processGraphQLRequest = processGraphQLRequest;","map":{"version":3,"sources":["../src/requestPipeline.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.processGraphQLRequest = exports.APQ_CACHE_PREFIX = void 0;\nconst graphql_1 = require(\"graphql\");\nconst schemaInstrumentation_1 = require(\"./utils/schemaInstrumentation\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst dispatcher_1 = require(\"./utils/dispatcher\");\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nexports.APQ_CACHE_PREFIX = 'apq:';\nfunction computeQueryHash(query) {\n    return (0, createSHA_1.default)('sha256').update(query).digest('hex');\n}\nasync function processGraphQLRequest(config, requestContext) {\n    var _a, _b, _c;\n    const logger = requestContext.logger || console;\n    const metrics = (requestContext.metrics =\n        requestContext.metrics || Object.create(null));\n    const dispatcher = await initializeRequestListenerDispatcher();\n    await initializeDataSources();\n    const request = requestContext.request;\n    let { query, extensions } = request;\n    let queryHash;\n    let persistedQueryCache;\n    metrics.persistedQueryHit = false;\n    metrics.persistedQueryRegister = false;\n    if (extensions === null || extensions === void 0 ? void 0 : extensions.persistedQuery) {\n        if (!config.persistedQueries || !config.persistedQueries.cache) {\n            return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotSupportedError());\n        }\n        else if (extensions.persistedQuery.version !== 1) {\n            return await sendErrorResponse(new graphql_1.GraphQLError('Unsupported persisted query version'));\n        }\n        persistedQueryCache = config.persistedQueries.cache;\n        if (!(persistedQueryCache instanceof apollo_server_caching_1.PrefixingKeyValueCache)) {\n            persistedQueryCache = new apollo_server_caching_1.PrefixingKeyValueCache(persistedQueryCache, exports.APQ_CACHE_PREFIX);\n        }\n        queryHash = extensions.persistedQuery.sha256Hash;\n        if (query === undefined) {\n            query = await persistedQueryCache.get(queryHash);\n            if (query) {\n                metrics.persistedQueryHit = true;\n            }\n            else {\n                return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotFoundError());\n            }\n        }\n        else {\n            const computedQueryHash = computeQueryHash(query);\n            if (queryHash !== computedQueryHash) {\n                return await sendErrorResponse(new graphql_1.GraphQLError('provided sha does not match query'));\n            }\n            metrics.persistedQueryRegister = true;\n        }\n    }\n    else if (query) {\n        queryHash = computeQueryHash(query);\n    }\n    else {\n        return await sendErrorResponse(new graphql_1.GraphQLError('GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.'));\n    }\n    requestContext.queryHash = queryHash;\n    requestContext.source = query;\n    await dispatcher.invokeHook('didResolveSource', requestContext);\n    if (config.documentStore) {\n        try {\n            requestContext.document = await config.documentStore.get(queryHash);\n        }\n        catch (err) {\n            logger.warn('An error occurred while attempting to read from the documentStore. ' +\n                ((_a = err) === null || _a === void 0 ? void 0 : _a.message) || err);\n        }\n    }\n    if (!requestContext.document) {\n        const parsingDidEnd = await dispatcher.invokeDidStartHook('parsingDidStart', requestContext);\n        try {\n            requestContext.document = parse(query, config.parseOptions);\n            parsingDidEnd();\n        }\n        catch (syntaxError) {\n            await parsingDidEnd(syntaxError);\n            return await sendErrorResponse(syntaxError, apollo_server_errors_1.SyntaxError);\n        }\n        const validationDidEnd = await dispatcher.invokeDidStartHook('validationDidStart', requestContext);\n        const validationErrors = validate(requestContext.document);\n        if (validationErrors.length === 0) {\n            await validationDidEnd();\n        }\n        else {\n            await validationDidEnd(validationErrors);\n            return await sendErrorResponse(validationErrors, apollo_server_errors_1.ValidationError);\n        }\n        if (config.documentStore) {\n            Promise.resolve(config.documentStore.set(queryHash, requestContext.document)).catch((err) => logger.warn('Could not store validated document. ' + (err === null || err === void 0 ? void 0 : err.message) || err));\n        }\n    }\n    const operation = (0, graphql_1.getOperationAST)(requestContext.document, request.operationName);\n    requestContext.operation = operation || undefined;\n    requestContext.operationName = ((_b = operation === null || operation === void 0 ? void 0 : operation.name) === null || _b === void 0 ? void 0 : _b.value) || null;\n    try {\n        await dispatcher.invokeHook('didResolveOperation', requestContext);\n    }\n    catch (err) {\n        return await sendErrorResponse(err);\n    }\n    if (metrics.persistedQueryRegister && persistedQueryCache) {\n        Promise.resolve(persistedQueryCache.set(queryHash, query, config.persistedQueries &&\n            typeof config.persistedQueries.ttl !== 'undefined'\n            ? {\n                ttl: config.persistedQueries.ttl,\n            }\n            : Object.create(null))).catch(logger.warn);\n    }\n    let response = await dispatcher.invokeHooksUntilNonNull('responseForOperation', requestContext);\n    if (response == null) {\n        const executionListeners = [];\n        (await dispatcher.invokeHook('executionDidStart', requestContext)).forEach((executionListener) => {\n            if (executionListener) {\n                executionListeners.push(executionListener);\n            }\n        });\n        executionListeners.reverse();\n        const executionDispatcher = new dispatcher_1.Dispatcher(executionListeners);\n        const invokeWillResolveField = (...args) => executionDispatcher.invokeSyncDidStartHook('willResolveField', ...args);\n        Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });\n        if (config.fieldResolver) {\n            Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolUserFieldResolver, {\n                value: config.fieldResolver,\n            });\n        }\n        (0, schemaInstrumentation_1.enablePluginsForSchemaResolvers)(config.schema);\n        try {\n            const result = await execute(requestContext);\n            const resultErrors = (_c = result.errors) === null || _c === void 0 ? void 0 : _c.map((e) => {\n                var _a;\n                if (((_a = e.nodes) === null || _a === void 0 ? void 0 : _a.length) === 1 &&\n                    e.nodes[0].kind === graphql_1.Kind.VARIABLE_DEFINITION &&\n                    (e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" got invalid value `) ||\n                        (e.nodes[0].type.kind === graphql_1.Kind.NON_NULL_TYPE &&\n                            e.nodes[0].type.type.kind === graphql_1.Kind.NAMED_TYPE &&\n                            (e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" of required ` +\n                                `type \"${e.nodes[0].type.type.name.value}!\" was not provided.`) ||\n                                e.message.startsWith(`Variable \"$${e.nodes[0].variable.name.value}\" of non-null ` +\n                                    `type \"${e.nodes[0].type.type.name.value}!\" must not be null.`))))) {\n                    return (0, apollo_server_errors_1.fromGraphQLError)(e, {\n                        errorClass: apollo_server_errors_1.UserInputError,\n                    });\n                }\n                return e;\n            });\n            if (resultErrors) {\n                await didEncounterErrors(resultErrors);\n            }\n            response = {\n                ...result,\n                errors: resultErrors ? formatErrors(resultErrors) : undefined,\n            };\n            await executionDispatcher.invokeHook('executionDidEnd');\n        }\n        catch (executionError) {\n            await executionDispatcher.invokeHook('executionDidEnd', executionError);\n            return await sendErrorResponse(executionError);\n        }\n    }\n    if (config.formatResponse) {\n        const formattedResponse = config.formatResponse(response, requestContext);\n        if (formattedResponse != null) {\n            response = formattedResponse;\n        }\n    }\n    return sendResponse(response);\n    function parse(query, parseOptions) {\n        return (0, graphql_1.parse)(query, parseOptions);\n    }\n    function validate(document) {\n        let rules = graphql_1.specifiedRules;\n        if (config.validationRules) {\n            rules = rules.concat(config.validationRules);\n        }\n        return (0, graphql_1.validate)(config.schema, document, rules);\n    }\n    async function execute(requestContext) {\n        const { request, document } = requestContext;\n        const executionArgs = {\n            schema: config.schema,\n            document,\n            rootValue: typeof config.rootValue === 'function'\n                ? config.rootValue(document)\n                : config.rootValue,\n            contextValue: requestContext.context,\n            variableValues: request.variables,\n            operationName: request.operationName,\n            fieldResolver: config.fieldResolver,\n        };\n        if (config.executor) {\n            return await config.executor(requestContext);\n        }\n        else {\n            return await (0, graphql_1.execute)(executionArgs);\n        }\n    }\n    async function sendResponse(response) {\n        requestContext.response = {\n            ...requestContext.response,\n            errors: response.errors,\n            data: response.data,\n            extensions: response.extensions,\n        };\n        if (response.http) {\n            if (!requestContext.response.http) {\n                requestContext.response.http = {\n                    headers: new apollo_server_env_1.Headers(),\n                };\n            }\n            if (response.http.status) {\n                requestContext.response.http.status = response.http.status;\n            }\n            for (const [name, value] of response.http.headers) {\n                requestContext.response.http.headers.set(name, value);\n            }\n        }\n        await dispatcher.invokeHook('willSendResponse', requestContext);\n        return requestContext.response;\n    }\n    async function didEncounterErrors(errors) {\n        requestContext.errors = errors;\n        return await dispatcher.invokeHook('didEncounterErrors', requestContext);\n    }\n    async function sendErrorResponse(errorOrErrors, errorClass) {\n        const errors = Array.isArray(errorOrErrors)\n            ? errorOrErrors\n            : [errorOrErrors];\n        await didEncounterErrors(errors);\n        const response = {\n            errors: formatErrors(errors.map((err) => err instanceof apollo_server_errors_1.ApolloError && !errorClass\n                ? err\n                : (0, apollo_server_errors_1.fromGraphQLError)(err, errorClass && {\n                    errorClass,\n                }))),\n        };\n        if (errors.every((err) => err instanceof apollo_server_errors_1.PersistedQueryNotSupportedError ||\n            err instanceof apollo_server_errors_1.PersistedQueryNotFoundError)) {\n            response.http = {\n                status: 200,\n                headers: new apollo_server_env_1.Headers({\n                    'Cache-Control': 'private, no-cache, must-revalidate',\n                }),\n            };\n        }\n        else if (errors.length === 1 && errors[0] instanceof runHttpQuery_1.HttpQueryError) {\n            response.http = {\n                status: errors[0].statusCode,\n                headers: new apollo_server_env_1.Headers(errors[0].headers),\n            };\n        }\n        return sendResponse(response);\n    }\n    function formatErrors(errors) {\n        return (0, apollo_server_errors_1.formatApolloErrors)(errors, {\n            formatter: config.formatError,\n            debug: requestContext.debug,\n        });\n    }\n    async function initializeRequestListenerDispatcher() {\n        const requestListeners = [];\n        if (config.plugins) {\n            for (const plugin of config.plugins) {\n                if (!plugin.requestDidStart)\n                    continue;\n                const listener = await plugin.requestDidStart(requestContext);\n                if (listener) {\n                    requestListeners.push(listener);\n                }\n            }\n        }\n        return new dispatcher_1.Dispatcher(requestListeners);\n    }\n    async function initializeDataSources() {\n        if (config.dataSources) {\n            const context = requestContext.context;\n            const dataSources = config.dataSources();\n            const initializers = [];\n            for (const dataSource of Object.values(dataSources)) {\n                if (dataSource.initialize) {\n                    initializers.push(dataSource.initialize({\n                        context,\n                        cache: requestContext.cache,\n                    }));\n                }\n            }\n            await Promise.all(initializers);\n            if ('dataSources' in context) {\n                throw new Error('Please use the dataSources config option instead of putting dataSources on the context yourself.');\n            }\n            context.dataSources = dataSources;\n        }\n    }\n}\nexports.processGraphQLRequest = processGraphQLRequest;\n//# sourceMappingURL=requestPipeline.js.map"]},"metadata":{},"sourceType":"script"}