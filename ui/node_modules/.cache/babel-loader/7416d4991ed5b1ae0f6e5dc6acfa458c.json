{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GatewayIsTooOldError = exports.SchemaManager = void 0;\n\nclass SchemaManager {\n  constructor(options) {\n    this.onSchemaLoadOrUpdateListeners = new Set();\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;\n\n    if ('gateway' in options) {\n      this.modeSpecificState = {\n        mode: 'gateway',\n        gateway: options.gateway,\n        apolloConfig: options.apolloConfig\n      };\n    } else {\n      this.modeSpecificState = {\n        mode: 'schema',\n        apiSchema: options.apiSchema,\n        schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema)\n      };\n    }\n  }\n\n  async start() {\n    if (this.modeSpecificState.mode === 'gateway') {\n      const gateway = this.modeSpecificState.gateway;\n\n      if (gateway.onSchemaLoadOrUpdate) {\n        this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaLoadOrUpdate(schemaContext => {\n          this.processSchemaLoadOrUpdateEvent(schemaContext);\n        });\n      } else if (gateway.onSchemaChange) {\n        this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaChange(apiSchema => {\n          this.processSchemaLoadOrUpdateEvent({\n            apiSchema\n          });\n        });\n      } else {\n        throw new Error(\"Unexpectedly couldn't find onSchemaChange or onSchemaLoadOrUpdate on gateway\");\n      }\n\n      const config = await this.modeSpecificState.gateway.load({\n        apollo: this.modeSpecificState.apolloConfig\n      });\n\n      if (!this.schemaDerivedData) {\n        this.processSchemaLoadOrUpdateEvent({\n          apiSchema: config.schema\n        });\n      }\n\n      return config.executor;\n    } else {\n      this.processSchemaLoadOrUpdateEvent({\n        apiSchema: this.modeSpecificState.apiSchema\n      }, this.modeSpecificState.schemaDerivedData);\n      return null;\n    }\n  }\n\n  onSchemaLoadOrUpdate(callback) {\n    if (this.modeSpecificState.mode === 'gateway' && !this.modeSpecificState.gateway.onSchemaLoadOrUpdate) {\n      throw new GatewayIsTooOldError([`Your gateway is too old to register a 'onSchemaLoadOrUpdate' listener.`, `Please update your version of @apollo/gateway to at least 0.35.0.`].join(' '));\n    } else {\n      if (!this.schemaContext) {\n        throw new Error('You must call start() before onSchemaLoadOrUpdate()');\n      }\n\n      if (!this.isStopped) {\n        try {\n          callback(this.schemaContext);\n        } catch (e) {\n          throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);\n        }\n      }\n\n      this.onSchemaLoadOrUpdateListeners.add(callback);\n    }\n\n    return () => {\n      this.onSchemaLoadOrUpdateListeners.delete(callback);\n    };\n  }\n\n  getSchemaDerivedData() {\n    if (!this.schemaDerivedData) {\n      throw new Error('You must call start() before getSchemaDerivedData()');\n    }\n\n    return this.schemaDerivedData;\n  }\n\n  async stop() {\n    var _a, _b, _c, _d;\n\n    this.isStopped = true;\n\n    if (this.modeSpecificState.mode === 'gateway') {\n      (_b = (_a = this.modeSpecificState).unsubscribeFromGateway) === null || _b === void 0 ? void 0 : _b.call(_a);\n      await ((_d = (_c = this.modeSpecificState.gateway).stop) === null || _d === void 0 ? void 0 : _d.call(_c));\n    }\n  }\n\n  processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {\n    if (!this.isStopped) {\n      this.schemaDerivedData = schemaDerivedData !== null && schemaDerivedData !== void 0 ? schemaDerivedData : this.schemaDerivedDataProvider(schemaContext.apiSchema);\n      this.schemaContext = schemaContext;\n      this.onSchemaLoadOrUpdateListeners.forEach(listener => {\n        try {\n          listener(schemaContext);\n        } catch (e) {\n          this.logger.error(\"An error was thrown from an 'onSchemaLoadOrUpdate' listener\");\n          this.logger.error(e);\n        }\n      });\n    }\n  }\n\n}\n\nexports.SchemaManager = SchemaManager;\n\nclass GatewayIsTooOldError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.GatewayIsTooOldError = GatewayIsTooOldError;","map":{"version":3,"sources":["../../src/utils/schemaManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GatewayIsTooOldError = exports.SchemaManager = void 0;\nclass SchemaManager {\n    constructor(options) {\n        this.onSchemaLoadOrUpdateListeners = new Set();\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;\n        if ('gateway' in options) {\n            this.modeSpecificState = {\n                mode: 'gateway',\n                gateway: options.gateway,\n                apolloConfig: options.apolloConfig,\n            };\n        }\n        else {\n            this.modeSpecificState = {\n                mode: 'schema',\n                apiSchema: options.apiSchema,\n                schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema),\n            };\n        }\n    }\n    async start() {\n        if (this.modeSpecificState.mode === 'gateway') {\n            const gateway = this.modeSpecificState.gateway;\n            if (gateway.onSchemaLoadOrUpdate) {\n                this.modeSpecificState.unsubscribeFromGateway =\n                    gateway.onSchemaLoadOrUpdate((schemaContext) => {\n                        this.processSchemaLoadOrUpdateEvent(schemaContext);\n                    });\n            }\n            else if (gateway.onSchemaChange) {\n                this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaChange((apiSchema) => {\n                    this.processSchemaLoadOrUpdateEvent({ apiSchema });\n                });\n            }\n            else {\n                throw new Error(\"Unexpectedly couldn't find onSchemaChange or onSchemaLoadOrUpdate on gateway\");\n            }\n            const config = await this.modeSpecificState.gateway.load({\n                apollo: this.modeSpecificState.apolloConfig,\n            });\n            if (!this.schemaDerivedData) {\n                this.processSchemaLoadOrUpdateEvent({ apiSchema: config.schema });\n            }\n            return config.executor;\n        }\n        else {\n            this.processSchemaLoadOrUpdateEvent({\n                apiSchema: this.modeSpecificState.apiSchema,\n            }, this.modeSpecificState.schemaDerivedData);\n            return null;\n        }\n    }\n    onSchemaLoadOrUpdate(callback) {\n        if (this.modeSpecificState.mode === 'gateway' &&\n            !this.modeSpecificState.gateway.onSchemaLoadOrUpdate) {\n            throw new GatewayIsTooOldError([\n                `Your gateway is too old to register a 'onSchemaLoadOrUpdate' listener.`,\n                `Please update your version of @apollo/gateway to at least 0.35.0.`,\n            ].join(' '));\n        }\n        else {\n            if (!this.schemaContext) {\n                throw new Error('You must call start() before onSchemaLoadOrUpdate()');\n            }\n            if (!this.isStopped) {\n                try {\n                    callback(this.schemaContext);\n                }\n                catch (e) {\n                    throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);\n                }\n            }\n            this.onSchemaLoadOrUpdateListeners.add(callback);\n        }\n        return () => {\n            this.onSchemaLoadOrUpdateListeners.delete(callback);\n        };\n    }\n    getSchemaDerivedData() {\n        if (!this.schemaDerivedData) {\n            throw new Error('You must call start() before getSchemaDerivedData()');\n        }\n        return this.schemaDerivedData;\n    }\n    async stop() {\n        var _a, _b, _c, _d;\n        this.isStopped = true;\n        if (this.modeSpecificState.mode === 'gateway') {\n            (_b = (_a = this.modeSpecificState).unsubscribeFromGateway) === null || _b === void 0 ? void 0 : _b.call(_a);\n            await ((_d = (_c = this.modeSpecificState.gateway).stop) === null || _d === void 0 ? void 0 : _d.call(_c));\n        }\n    }\n    processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {\n        if (!this.isStopped) {\n            this.schemaDerivedData =\n                schemaDerivedData !== null && schemaDerivedData !== void 0 ? schemaDerivedData : this.schemaDerivedDataProvider(schemaContext.apiSchema);\n            this.schemaContext = schemaContext;\n            this.onSchemaLoadOrUpdateListeners.forEach((listener) => {\n                try {\n                    listener(schemaContext);\n                }\n                catch (e) {\n                    this.logger.error(\"An error was thrown from an 'onSchemaLoadOrUpdate' listener\");\n                    this.logger.error(e);\n                }\n            });\n        }\n    }\n}\nexports.SchemaManager = SchemaManager;\nclass GatewayIsTooOldError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.GatewayIsTooOldError = GatewayIsTooOldError;\n//# sourceMappingURL=schemaManager.js.map"]},"metadata":{},"sourceType":"script"}