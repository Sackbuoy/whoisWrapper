{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isImplicitlyInstallablePlugin = exports.ApolloServerBase = void 0;\n\nconst mock_1 = require(\"@graphql-tools/mock\");\n\nconst schema_1 = require(\"@graphql-tools/schema\");\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst graphql_1 = require(\"graphql\");\n\nconst resolvable_1 = __importDefault(require(\"@josephg/resolvable\"));\n\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\n\nconst schemaHash_1 = require(\"./utils/schemaHash\");\n\nconst requestPipeline_1 = require(\"./requestPipeline\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst apollo_tools_1 = require(\"@apollographql/apollo-tools\");\n\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\n\nconst isNodeLike_1 = __importDefault(require(\"./utils/isNodeLike\"));\n\nconst determineApolloConfig_1 = require(\"./determineApolloConfig\");\n\nconst plugin_1 = require(\"./plugin\");\n\nconst internalPlugin_1 = require(\"./internalPlugin\");\n\nconst cachePolicy_1 = require(\"./cachePolicy\");\n\nconst schemaManager_1 = require(\"./utils/schemaManager\");\n\nconst NoIntrospection = context => ({\n  Field(node) {\n    if (node.name.value === '__schema' || node.name.value === '__type') {\n      context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', [node]));\n    }\n  }\n\n});\n\nclass UnreachableCaseError extends Error {\n  constructor(val) {\n    super(`Unreachable case: ${val}`);\n  }\n\n}\n\nclass ApolloServerBase {\n  constructor(config) {\n    var _a;\n\n    this.graphqlPath = '/graphql';\n    this.requestOptions = Object.create(null);\n    this.plugins = [];\n    this.toDispose = new Set();\n    this.toDisposeLast = new Set();\n    this.drainServers = null;\n    this.landingPage = null;\n    if (!config) throw new Error('ApolloServer requires options.');\n    this.config = { ...config,\n      nodeEnv: (_a = config.nodeEnv) !== null && _a !== void 0 ? _a : process.env.NODE_ENV\n    };\n    const {\n      context,\n      resolvers,\n      schema,\n      modules,\n      typeDefs,\n      parseOptions = {},\n      introspection,\n      plugins,\n      gateway,\n      apollo,\n      stopOnTerminationSignals,\n      mocks,\n      mockEntireSchema,\n      documentStore,\n      ...requestOptions\n    } = this.config;\n\n    if (config.logger) {\n      this.logger = config.logger;\n    } else {\n      const loglevelLogger = loglevel_1.default.getLogger('apollo-server');\n\n      if (this.config.debug === true) {\n        loglevelLogger.setLevel(loglevel_1.default.levels.DEBUG);\n      } else {\n        loglevelLogger.setLevel(loglevel_1.default.levels.INFO);\n      }\n\n      this.logger = loglevelLogger;\n    }\n\n    this.apolloConfig = (0, determineApolloConfig_1.determineApolloConfig)(apollo);\n\n    if (gateway && (modules || schema || typeDefs || resolvers)) {\n      throw new Error('Cannot define both `gateway` and any of: `modules`, `schema`, `typeDefs`, or `resolvers`');\n    }\n\n    this.parseOptions = parseOptions;\n    this.context = context;\n    const isDev = this.config.nodeEnv !== 'production';\n    this.stopOnTerminationSignals = typeof stopOnTerminationSignals === 'boolean' ? stopOnTerminationSignals : isNodeLike_1.default && this.config.nodeEnv !== 'test' && !this.serverlessFramework();\n\n    if (typeof introspection === 'boolean' && !introspection || introspection === undefined && !isDev) {\n      const noIntro = [NoIntrospection];\n      requestOptions.validationRules = requestOptions.validationRules ? requestOptions.validationRules.concat(noIntro) : noIntro;\n    }\n\n    if (!requestOptions.cache) {\n      requestOptions.cache = new apollo_server_caching_1.InMemoryLRUCache();\n    }\n\n    if (requestOptions.persistedQueries !== false) {\n      const {\n        cache: apqCache = requestOptions.cache,\n        ...apqOtherOptions\n      } = requestOptions.persistedQueries || Object.create(null);\n      requestOptions.persistedQueries = {\n        cache: new apollo_server_caching_1.PrefixingKeyValueCache(apqCache, requestPipeline_1.APQ_CACHE_PREFIX),\n        ...apqOtherOptions\n      };\n    } else {\n      delete requestOptions.persistedQueries;\n    }\n\n    this.requestOptions = requestOptions;\n    this.ensurePluginInstantiation(plugins, isDev);\n\n    if (gateway) {\n      this.state = {\n        phase: 'initialized',\n        schemaManager: new schemaManager_1.SchemaManager({\n          gateway,\n          apolloConfig: this.apolloConfig,\n          schemaDerivedDataProvider: schema => this.generateSchemaDerivedData(schema),\n          logger: this.logger\n        })\n      };\n    } else {\n      this.state = {\n        phase: 'initialized',\n        schemaManager: new schemaManager_1.SchemaManager({\n          apiSchema: this.maybeAddMocksToConstructedSchema(this.constructSchema()),\n          schemaDerivedDataProvider: schema => this.generateSchemaDerivedData(schema),\n          logger: this.logger\n        })\n      };\n    }\n\n    if (this.serverlessFramework()) {\n      this._start().catch(e => this.logStartupError(e));\n    }\n  }\n\n  async start() {\n    if (this.serverlessFramework()) {\n      throw new Error('When using an ApolloServer subclass from a serverless framework ' + \"package, you don't need to call start(); just call createHandler().\");\n    }\n\n    return await this._start();\n  }\n\n  async _start() {\n    var _a;\n\n    if (this.state.phase !== 'initialized') {\n      throw new Error(`called start() with surprising state ${this.state.phase}`);\n    }\n\n    const schemaManager = this.state.schemaManager;\n    const barrier = (0, resolvable_1.default)();\n    this.state = {\n      phase: 'starting',\n      barrier,\n      schemaManager\n    };\n\n    try {\n      const executor = await schemaManager.start();\n      this.toDispose.add(async () => {\n        await schemaManager.stop();\n      });\n\n      if (executor) {\n        this.requestOptions.executor = executor;\n      }\n\n      const schemaDerivedData = schemaManager.getSchemaDerivedData();\n      const service = {\n        logger: this.logger,\n        schema: schemaDerivedData.schema,\n        schemaHash: schemaDerivedData.schemaHash,\n        apollo: this.apolloConfig,\n        serverlessFramework: this.serverlessFramework()\n      };\n\n      if ((_a = this.requestOptions.persistedQueries) === null || _a === void 0 ? void 0 : _a.cache) {\n        service.persistedQueries = {\n          cache: this.requestOptions.persistedQueries.cache\n        };\n      }\n\n      const taggedServerListeners = (await Promise.all(this.plugins.map(async plugin => ({\n        serverListener: plugin.serverWillStart && (await plugin.serverWillStart(service)),\n        installedImplicity: isImplicitlyInstallablePlugin(plugin) && plugin.__internal_installed_implicitly__\n      })))).filter(maybeTaggedServerListener => typeof maybeTaggedServerListener.serverListener === 'object');\n      taggedServerListeners.forEach(_ref => {\n        let {\n          serverListener: {\n            schemaDidLoadOrUpdate\n          }\n        } = _ref;\n\n        if (schemaDidLoadOrUpdate) {\n          try {\n            schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);\n          } catch (e) {\n            if (e instanceof schemaManager_1.GatewayIsTooOldError) {\n              throw new Error([`One of your plugins uses the 'schemaDidLoadOrUpdate' hook,`, `but your gateway version is too old to support this hook.`, `Please update your version of @apollo/gateway to at least 0.35.0.`].join(' '));\n            }\n\n            throw e;\n          }\n        }\n      });\n      const serverWillStops = taggedServerListeners.flatMap(l => l.serverListener.serverWillStop ? [l.serverListener.serverWillStop] : []);\n\n      if (serverWillStops.length) {\n        this.toDispose.add(async () => {\n          await Promise.all(serverWillStops.map(serverWillStop => serverWillStop()));\n        });\n      }\n\n      const drainServerCallbacks = taggedServerListeners.flatMap(l => l.serverListener.drainServer ? [l.serverListener.drainServer] : []);\n\n      if (drainServerCallbacks.length) {\n        this.drainServers = async () => {\n          await Promise.all(drainServerCallbacks.map(drainServer => drainServer()));\n        };\n      }\n\n      let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter(l => l.serverListener.renderLandingPage);\n\n      if (taggedServerListenersWithRenderLandingPage.length > 1) {\n        taggedServerListenersWithRenderLandingPage = taggedServerListenersWithRenderLandingPage.filter(l => !l.installedImplicity);\n      }\n\n      if (taggedServerListenersWithRenderLandingPage.length > 1) {\n        throw Error('Only one plugin can implement renderLandingPage.');\n      } else if (taggedServerListenersWithRenderLandingPage.length) {\n        this.landingPage = await taggedServerListenersWithRenderLandingPage[0].serverListener.renderLandingPage();\n      } else {\n        this.landingPage = null;\n      }\n\n      this.state = {\n        phase: 'started',\n        schemaManager\n      };\n      this.maybeRegisterTerminationSignalHandlers(['SIGINT', 'SIGTERM']);\n    } catch (error) {\n      this.state = {\n        phase: 'failed to start',\n        error: error\n      };\n      throw error;\n    } finally {\n      barrier.resolve();\n    }\n  }\n\n  maybeRegisterTerminationSignalHandlers(signals) {\n    if (!this.stopOnTerminationSignals) {\n      return;\n    }\n\n    let receivedSignal = false;\n\n    const signalHandler = async signal => {\n      if (receivedSignal) {\n        return;\n      }\n\n      receivedSignal = true;\n\n      try {\n        await this.stop();\n      } catch (e) {\n        this.logger.error(`stop() threw during ${signal} shutdown`);\n        this.logger.error(e);\n        process.exit(1);\n      }\n\n      process.kill(process.pid, signal);\n    };\n\n    signals.forEach(signal => {\n      process.on(signal, signalHandler);\n      this.toDisposeLast.add(async () => {\n        process.removeListener(signal, signalHandler);\n      });\n    });\n  }\n\n  async _ensureStarted() {\n    while (true) {\n      switch (this.state.phase) {\n        case 'initialized':\n          throw new Error('You need to call `server.start()` before using your Apollo Server.');\n\n        case 'starting':\n          await this.state.barrier;\n          break;\n\n        case 'failed to start':\n          this.logStartupError(this.state.error);\n          throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n\n        case 'started':\n        case 'draining':\n          return this.state.schemaManager.getSchemaDerivedData();\n\n        case 'stopping':\n          throw new Error('Cannot execute GraphQL operations while the server is stopping.');\n\n        case 'stopped':\n          throw new Error('Cannot execute GraphQL operations after the server has stopped.');\n\n        default:\n          throw new UnreachableCaseError(this.state);\n      }\n    }\n  }\n\n  async ensureStarted() {\n    await this._ensureStarted();\n  }\n\n  assertStarted(methodName) {\n    if (this.state.phase !== 'started' && this.state.phase !== 'draining') {\n      throw new Error('You must `await server.start()` before calling `server.' + methodName + '()`');\n    }\n  }\n\n  logStartupError(err) {\n    this.logger.error('An error occurred during Apollo Server startup. All GraphQL requests ' + 'will now fail. The startup error was: ' + ((err === null || err === void 0 ? void 0 : err.message) || err));\n  }\n\n  constructSchema() {\n    const {\n      schema,\n      modules,\n      typeDefs,\n      resolvers,\n      parseOptions\n    } = this.config;\n\n    if (schema) {\n      return schema;\n    }\n\n    if (modules) {\n      const {\n        schema,\n        errors\n      } = (0, apollo_tools_1.buildServiceDefinition)(modules);\n\n      if (errors && errors.length > 0) {\n        throw new Error(errors.map(error => error.message).join('\\n\\n'));\n      }\n\n      return schema;\n    }\n\n    if (!typeDefs) {\n      throw Error('Apollo Server requires either an existing schema, modules or typeDefs');\n    }\n\n    const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n    return (0, schema_1.makeExecutableSchema)({\n      typeDefs: augmentedTypeDefs,\n      resolvers,\n      parseOptions\n    });\n  }\n\n  maybeAddMocksToConstructedSchema(schema) {\n    const {\n      mocks,\n      mockEntireSchema\n    } = this.config;\n\n    if (mocks === false) {\n      return schema;\n    }\n\n    if (!mocks && typeof mockEntireSchema === 'undefined') {\n      return schema;\n    }\n\n    return (0, mock_1.addMocksToSchema)({\n      schema,\n      mocks: mocks === true || typeof mocks === 'undefined' ? {} : mocks,\n      preserveResolvers: typeof mockEntireSchema === 'undefined' ? false : !mockEntireSchema\n    });\n  }\n\n  generateSchemaDerivedData(schema) {\n    const schemaHash = (0, schemaHash_1.generateSchemaHash)(schema);\n    return {\n      schema,\n      schemaHash,\n      documentStore: this.config.documentStore === undefined ? this.initializeDocumentStore() : this.config.documentStore\n    };\n  }\n\n  async stop() {\n    var _a;\n\n    switch (this.state.phase) {\n      case 'initialized':\n      case 'starting':\n      case 'failed to start':\n        throw Error('apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded');\n\n      case 'stopped':\n        if (this.state.stopError) {\n          throw this.state.stopError;\n        }\n\n        return;\n\n      case 'stopping':\n      case 'draining':\n        {\n          await this.state.barrier;\n          const state = this.state;\n\n          if (state.phase !== 'stopped') {\n            throw Error(`Surprising post-stopping state ${state.phase}`);\n          }\n\n          if (state.stopError) {\n            throw state.stopError;\n          }\n\n          return;\n        }\n\n      case 'started':\n        break;\n\n      default:\n        throw new UnreachableCaseError(this.state);\n    }\n\n    const barrier = (0, resolvable_1.default)();\n    this.state = {\n      phase: 'draining',\n      schemaManager: this.state.schemaManager,\n      barrier\n    };\n\n    try {\n      await ((_a = this.drainServers) === null || _a === void 0 ? void 0 : _a.call(this));\n      this.state = {\n        phase: 'stopping',\n        barrier\n      };\n      await Promise.all([...this.toDispose].map(dispose => dispose()));\n      await Promise.all([...this.toDisposeLast].map(dispose => dispose()));\n    } catch (stopError) {\n      this.state = {\n        phase: 'stopped',\n        stopError: stopError\n      };\n      barrier.resolve();\n      throw stopError;\n    }\n\n    this.state = {\n      phase: 'stopped',\n      stopError: null\n    };\n  }\n\n  serverlessFramework() {\n    return false;\n  }\n\n  ensurePluginInstantiation() {\n    let userPlugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let isDev = arguments.length > 1 ? arguments[1] : undefined;\n    this.plugins = userPlugins.map(plugin => {\n      if (typeof plugin === 'function') {\n        return plugin();\n      }\n\n      return plugin;\n    });\n\n    const alreadyHavePluginWithInternalId = id => this.plugins.some(p => (0, internalPlugin_1.pluginIsInternal)(p) && p.__internal_plugin_id__() === id);\n\n    {\n      if (!alreadyHavePluginWithInternalId('CacheControl')) {\n        this.plugins.push((0, plugin_1.ApolloServerPluginCacheControl)());\n      }\n    }\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n\n      if (!alreadyHavePlugin && this.apolloConfig.key) {\n        if (this.apolloConfig.graphRef) {\n          this.plugins.unshift((0, plugin_1.ApolloServerPluginUsageReporting)());\n        } else {\n          this.logger.warn('You have specified an Apollo key but have not specified a graph ref; usage ' + 'reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` ' + 'environment variable to `your-graph-id@your-graph-variant`. To disable this ' + 'warning, install `ApolloServerPluginUsageReportingDisabled`.');\n        }\n      }\n    }\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n      const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n\n      if (!alreadyHavePlugin && enabledViaEnvVar) {\n        if (this.apolloConfig.key) {\n          const options = {};\n          this.plugins.push((0, plugin_1.ApolloServerPluginSchemaReporting)(options));\n        } else {\n          throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" + 'environment variable to true, but you also need to provide your ' + 'Apollo API key, via the APOLLO_KEY environment ' + 'variable or via `new ApolloServer({apollo: {key})');\n        }\n      }\n    }\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n\n      if (!alreadyHavePlugin) {\n        this.plugins.push((0, plugin_1.ApolloServerPluginInlineTrace)({\n          __onlyIfSchemaIsFederated: true\n        }));\n      }\n    }\n    const alreadyHavePlugin = alreadyHavePluginWithInternalId('LandingPageDisabled');\n\n    if (!alreadyHavePlugin) {\n      const plugin = isDev ? (0, plugin_1.ApolloServerPluginLandingPageLocalDefault)() : (0, plugin_1.ApolloServerPluginLandingPageProductionDefault)();\n\n      if (!isImplicitlyInstallablePlugin(plugin)) {\n        throw Error('default landing page plugin should be implicitly installable?');\n      }\n\n      plugin.__internal_installed_implicitly__ = true;\n      this.plugins.push(plugin);\n    }\n  }\n\n  initializeDocumentStore() {\n    return new apollo_server_caching_1.InMemoryLRUCache({\n      maxSize: Math.pow(2, 20) * 30,\n      sizeCalculator: apollo_server_caching_1.InMemoryLRUCache.jsonBytesSizeCalculator\n    });\n  }\n\n  async graphQLServerOptions(integrationContextArgument) {\n    const {\n      schema,\n      schemaHash,\n      documentStore\n    } = await this._ensureStarted();\n    let context = this.context ? this.context : {};\n\n    try {\n      context = typeof this.context === 'function' ? await this.context(integrationContextArgument || {}) : context;\n    } catch (error) {\n      context = () => {\n        throw error;\n      };\n    }\n\n    return {\n      schema,\n      schemaHash,\n      logger: this.logger,\n      plugins: this.plugins,\n      documentStore,\n      context,\n      parseOptions: this.parseOptions,\n      ...this.requestOptions\n    };\n  }\n\n  async executeOperation(request, integrationContextArgument) {\n    if (this.state.phase === 'initialized') {\n      await this._start();\n    }\n\n    const options = await this.graphQLServerOptions(integrationContextArgument);\n\n    if (typeof options.context === 'function') {\n      options.context = options.context();\n    } else if (typeof options.context === 'object') {\n      options.context = (0, runHttpQuery_1.cloneObject)(options.context);\n    }\n\n    const requestCtx = {\n      logger: this.logger,\n      schema: options.schema,\n      schemaHash: options.schemaHash,\n      request: { ...request,\n        query: request.query && typeof request.query !== 'string' ? (0, graphql_1.print)(request.query) : request.query\n      },\n      context: options.context || Object.create(null),\n      cache: options.cache,\n      metrics: {},\n      response: {\n        http: {\n          headers: new apollo_server_env_1.Headers()\n        }\n      },\n      debug: options.debug,\n      overallCachePolicy: (0, cachePolicy_1.newCachePolicy)()\n    };\n    return (0, requestPipeline_1.processGraphQLRequest)(options, requestCtx);\n  }\n\n  getLandingPage() {\n    this.assertStarted('getLandingPage');\n    return this.landingPage;\n  }\n\n}\n\nexports.ApolloServerBase = ApolloServerBase;\n\nfunction isImplicitlyInstallablePlugin(p) {\n  return '__internal_installed_implicitly__' in p;\n}\n\nexports.isImplicitlyInstallablePlugin = isImplicitlyInstallablePlugin;","map":{"version":3,"sources":["../src/ApolloServer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isImplicitlyInstallablePlugin = exports.ApolloServerBase = void 0;\nconst mock_1 = require(\"@graphql-tools/mock\");\nconst schema_1 = require(\"@graphql-tools/schema\");\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\nconst graphql_1 = require(\"graphql\");\nconst resolvable_1 = __importDefault(require(\"@josephg/resolvable\"));\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\nconst schemaHash_1 = require(\"./utils/schemaHash\");\nconst requestPipeline_1 = require(\"./requestPipeline\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst apollo_tools_1 = require(\"@apollographql/apollo-tools\");\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\nconst isNodeLike_1 = __importDefault(require(\"./utils/isNodeLike\"));\nconst determineApolloConfig_1 = require(\"./determineApolloConfig\");\nconst plugin_1 = require(\"./plugin\");\nconst internalPlugin_1 = require(\"./internalPlugin\");\nconst cachePolicy_1 = require(\"./cachePolicy\");\nconst schemaManager_1 = require(\"./utils/schemaManager\");\nconst NoIntrospection = (context) => ({\n    Field(node) {\n        if (node.name.value === '__schema' || node.name.value === '__type') {\n            context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', [node]));\n        }\n    },\n});\nclass UnreachableCaseError extends Error {\n    constructor(val) {\n        super(`Unreachable case: ${val}`);\n    }\n}\nclass ApolloServerBase {\n    constructor(config) {\n        var _a;\n        this.graphqlPath = '/graphql';\n        this.requestOptions = Object.create(null);\n        this.plugins = [];\n        this.toDispose = new Set();\n        this.toDisposeLast = new Set();\n        this.drainServers = null;\n        this.landingPage = null;\n        if (!config)\n            throw new Error('ApolloServer requires options.');\n        this.config = {\n            ...config,\n            nodeEnv: (_a = config.nodeEnv) !== null && _a !== void 0 ? _a : process.env.NODE_ENV,\n        };\n        const { context, resolvers, schema, modules, typeDefs, parseOptions = {}, introspection, plugins, gateway, apollo, stopOnTerminationSignals, mocks, mockEntireSchema, documentStore, ...requestOptions } = this.config;\n        if (config.logger) {\n            this.logger = config.logger;\n        }\n        else {\n            const loglevelLogger = loglevel_1.default.getLogger('apollo-server');\n            if (this.config.debug === true) {\n                loglevelLogger.setLevel(loglevel_1.default.levels.DEBUG);\n            }\n            else {\n                loglevelLogger.setLevel(loglevel_1.default.levels.INFO);\n            }\n            this.logger = loglevelLogger;\n        }\n        this.apolloConfig = (0, determineApolloConfig_1.determineApolloConfig)(apollo);\n        if (gateway && (modules || schema || typeDefs || resolvers)) {\n            throw new Error('Cannot define both `gateway` and any of: `modules`, `schema`, `typeDefs`, or `resolvers`');\n        }\n        this.parseOptions = parseOptions;\n        this.context = context;\n        const isDev = this.config.nodeEnv !== 'production';\n        this.stopOnTerminationSignals =\n            typeof stopOnTerminationSignals === 'boolean'\n                ? stopOnTerminationSignals\n                : isNodeLike_1.default &&\n                    this.config.nodeEnv !== 'test' &&\n                    !this.serverlessFramework();\n        if ((typeof introspection === 'boolean' && !introspection) ||\n            (introspection === undefined && !isDev)) {\n            const noIntro = [NoIntrospection];\n            requestOptions.validationRules = requestOptions.validationRules\n                ? requestOptions.validationRules.concat(noIntro)\n                : noIntro;\n        }\n        if (!requestOptions.cache) {\n            requestOptions.cache = new apollo_server_caching_1.InMemoryLRUCache();\n        }\n        if (requestOptions.persistedQueries !== false) {\n            const { cache: apqCache = requestOptions.cache, ...apqOtherOptions } = requestOptions.persistedQueries || Object.create(null);\n            requestOptions.persistedQueries = {\n                cache: new apollo_server_caching_1.PrefixingKeyValueCache(apqCache, requestPipeline_1.APQ_CACHE_PREFIX),\n                ...apqOtherOptions,\n            };\n        }\n        else {\n            delete requestOptions.persistedQueries;\n        }\n        this.requestOptions = requestOptions;\n        this.ensurePluginInstantiation(plugins, isDev);\n        if (gateway) {\n            this.state = {\n                phase: 'initialized',\n                schemaManager: new schemaManager_1.SchemaManager({\n                    gateway,\n                    apolloConfig: this.apolloConfig,\n                    schemaDerivedDataProvider: (schema) => this.generateSchemaDerivedData(schema),\n                    logger: this.logger,\n                }),\n            };\n        }\n        else {\n            this.state = {\n                phase: 'initialized',\n                schemaManager: new schemaManager_1.SchemaManager({\n                    apiSchema: this.maybeAddMocksToConstructedSchema(this.constructSchema()),\n                    schemaDerivedDataProvider: (schema) => this.generateSchemaDerivedData(schema),\n                    logger: this.logger,\n                }),\n            };\n        }\n        if (this.serverlessFramework()) {\n            this._start().catch((e) => this.logStartupError(e));\n        }\n    }\n    async start() {\n        if (this.serverlessFramework()) {\n            throw new Error('When using an ApolloServer subclass from a serverless framework ' +\n                \"package, you don't need to call start(); just call createHandler().\");\n        }\n        return await this._start();\n    }\n    async _start() {\n        var _a;\n        if (this.state.phase !== 'initialized') {\n            throw new Error(`called start() with surprising state ${this.state.phase}`);\n        }\n        const schemaManager = this.state.schemaManager;\n        const barrier = (0, resolvable_1.default)();\n        this.state = {\n            phase: 'starting',\n            barrier,\n            schemaManager,\n        };\n        try {\n            const executor = await schemaManager.start();\n            this.toDispose.add(async () => {\n                await schemaManager.stop();\n            });\n            if (executor) {\n                this.requestOptions.executor = executor;\n            }\n            const schemaDerivedData = schemaManager.getSchemaDerivedData();\n            const service = {\n                logger: this.logger,\n                schema: schemaDerivedData.schema,\n                schemaHash: schemaDerivedData.schemaHash,\n                apollo: this.apolloConfig,\n                serverlessFramework: this.serverlessFramework(),\n            };\n            if ((_a = this.requestOptions.persistedQueries) === null || _a === void 0 ? void 0 : _a.cache) {\n                service.persistedQueries = {\n                    cache: this.requestOptions.persistedQueries.cache,\n                };\n            }\n            const taggedServerListeners = (await Promise.all(this.plugins.map(async (plugin) => ({\n                serverListener: plugin.serverWillStart && (await plugin.serverWillStart(service)),\n                installedImplicity: isImplicitlyInstallablePlugin(plugin) &&\n                    plugin.__internal_installed_implicitly__,\n            })))).filter((maybeTaggedServerListener) => typeof maybeTaggedServerListener.serverListener === 'object');\n            taggedServerListeners.forEach(({ serverListener: { schemaDidLoadOrUpdate } }) => {\n                if (schemaDidLoadOrUpdate) {\n                    try {\n                        schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);\n                    }\n                    catch (e) {\n                        if (e instanceof schemaManager_1.GatewayIsTooOldError) {\n                            throw new Error([\n                                `One of your plugins uses the 'schemaDidLoadOrUpdate' hook,`,\n                                `but your gateway version is too old to support this hook.`,\n                                `Please update your version of @apollo/gateway to at least 0.35.0.`,\n                            ].join(' '));\n                        }\n                        throw e;\n                    }\n                }\n            });\n            const serverWillStops = taggedServerListeners.flatMap((l) => l.serverListener.serverWillStop\n                ? [l.serverListener.serverWillStop]\n                : []);\n            if (serverWillStops.length) {\n                this.toDispose.add(async () => {\n                    await Promise.all(serverWillStops.map((serverWillStop) => serverWillStop()));\n                });\n            }\n            const drainServerCallbacks = taggedServerListeners.flatMap((l) => l.serverListener.drainServer ? [l.serverListener.drainServer] : []);\n            if (drainServerCallbacks.length) {\n                this.drainServers = async () => {\n                    await Promise.all(drainServerCallbacks.map((drainServer) => drainServer()));\n                };\n            }\n            let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter((l) => l.serverListener.renderLandingPage);\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                taggedServerListenersWithRenderLandingPage =\n                    taggedServerListenersWithRenderLandingPage.filter((l) => !l.installedImplicity);\n            }\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                throw Error('Only one plugin can implement renderLandingPage.');\n            }\n            else if (taggedServerListenersWithRenderLandingPage.length) {\n                this.landingPage = await taggedServerListenersWithRenderLandingPage[0]\n                    .serverListener.renderLandingPage();\n            }\n            else {\n                this.landingPage = null;\n            }\n            this.state = {\n                phase: 'started',\n                schemaManager,\n            };\n            this.maybeRegisterTerminationSignalHandlers(['SIGINT', 'SIGTERM']);\n        }\n        catch (error) {\n            this.state = { phase: 'failed to start', error: error };\n            throw error;\n        }\n        finally {\n            barrier.resolve();\n        }\n    }\n    maybeRegisterTerminationSignalHandlers(signals) {\n        if (!this.stopOnTerminationSignals) {\n            return;\n        }\n        let receivedSignal = false;\n        const signalHandler = async (signal) => {\n            if (receivedSignal) {\n                return;\n            }\n            receivedSignal = true;\n            try {\n                await this.stop();\n            }\n            catch (e) {\n                this.logger.error(`stop() threw during ${signal} shutdown`);\n                this.logger.error(e);\n                process.exit(1);\n            }\n            process.kill(process.pid, signal);\n        };\n        signals.forEach((signal) => {\n            process.on(signal, signalHandler);\n            this.toDisposeLast.add(async () => {\n                process.removeListener(signal, signalHandler);\n            });\n        });\n    }\n    async _ensureStarted() {\n        while (true) {\n            switch (this.state.phase) {\n                case 'initialized':\n                    throw new Error('You need to call `server.start()` before using your Apollo Server.');\n                case 'starting':\n                    await this.state.barrier;\n                    break;\n                case 'failed to start':\n                    this.logStartupError(this.state.error);\n                    throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n                case 'started':\n                case 'draining':\n                    return this.state.schemaManager.getSchemaDerivedData();\n                case 'stopping':\n                    throw new Error('Cannot execute GraphQL operations while the server is stopping.');\n                case 'stopped':\n                    throw new Error('Cannot execute GraphQL operations after the server has stopped.');\n                default:\n                    throw new UnreachableCaseError(this.state);\n            }\n        }\n    }\n    async ensureStarted() {\n        await this._ensureStarted();\n    }\n    assertStarted(methodName) {\n        if (this.state.phase !== 'started' && this.state.phase !== 'draining') {\n            throw new Error('You must `await server.start()` before calling `server.' +\n                methodName +\n                '()`');\n        }\n    }\n    logStartupError(err) {\n        this.logger.error('An error occurred during Apollo Server startup. All GraphQL requests ' +\n            'will now fail. The startup error was: ' +\n            ((err === null || err === void 0 ? void 0 : err.message) || err));\n    }\n    constructSchema() {\n        const { schema, modules, typeDefs, resolvers, parseOptions } = this.config;\n        if (schema) {\n            return schema;\n        }\n        if (modules) {\n            const { schema, errors } = (0, apollo_tools_1.buildServiceDefinition)(modules);\n            if (errors && errors.length > 0) {\n                throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n            }\n            return schema;\n        }\n        if (!typeDefs) {\n            throw Error('Apollo Server requires either an existing schema, modules or typeDefs');\n        }\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        return (0, schema_1.makeExecutableSchema)({\n            typeDefs: augmentedTypeDefs,\n            resolvers,\n            parseOptions,\n        });\n    }\n    maybeAddMocksToConstructedSchema(schema) {\n        const { mocks, mockEntireSchema } = this.config;\n        if (mocks === false) {\n            return schema;\n        }\n        if (!mocks && typeof mockEntireSchema === 'undefined') {\n            return schema;\n        }\n        return (0, mock_1.addMocksToSchema)({\n            schema,\n            mocks: mocks === true || typeof mocks === 'undefined' ? {} : mocks,\n            preserveResolvers: typeof mockEntireSchema === 'undefined' ? false : !mockEntireSchema,\n        });\n    }\n    generateSchemaDerivedData(schema) {\n        const schemaHash = (0, schemaHash_1.generateSchemaHash)(schema);\n        return {\n            schema,\n            schemaHash,\n            documentStore: this.config.documentStore === undefined\n                ? this.initializeDocumentStore()\n                : this.config.documentStore,\n        };\n    }\n    async stop() {\n        var _a;\n        switch (this.state.phase) {\n            case 'initialized':\n            case 'starting':\n            case 'failed to start':\n                throw Error('apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded');\n            case 'stopped':\n                if (this.state.stopError) {\n                    throw this.state.stopError;\n                }\n                return;\n            case 'stopping':\n            case 'draining': {\n                await this.state.barrier;\n                const state = this.state;\n                if (state.phase !== 'stopped') {\n                    throw Error(`Surprising post-stopping state ${state.phase}`);\n                }\n                if (state.stopError) {\n                    throw state.stopError;\n                }\n                return;\n            }\n            case 'started':\n                break;\n            default:\n                throw new UnreachableCaseError(this.state);\n        }\n        const barrier = (0, resolvable_1.default)();\n        this.state = {\n            phase: 'draining',\n            schemaManager: this.state.schemaManager,\n            barrier,\n        };\n        try {\n            await ((_a = this.drainServers) === null || _a === void 0 ? void 0 : _a.call(this));\n            this.state = { phase: 'stopping', barrier };\n            await Promise.all([...this.toDispose].map((dispose) => dispose()));\n            await Promise.all([...this.toDisposeLast].map((dispose) => dispose()));\n        }\n        catch (stopError) {\n            this.state = { phase: 'stopped', stopError: stopError };\n            barrier.resolve();\n            throw stopError;\n        }\n        this.state = { phase: 'stopped', stopError: null };\n    }\n    serverlessFramework() {\n        return false;\n    }\n    ensurePluginInstantiation(userPlugins = [], isDev) {\n        this.plugins = userPlugins.map((plugin) => {\n            if (typeof plugin === 'function') {\n                return plugin();\n            }\n            return plugin;\n        });\n        const alreadyHavePluginWithInternalId = (id) => this.plugins.some((p) => (0, internalPlugin_1.pluginIsInternal)(p) && p.__internal_plugin_id__() === id);\n        {\n            if (!alreadyHavePluginWithInternalId('CacheControl')) {\n                this.plugins.push((0, plugin_1.ApolloServerPluginCacheControl)());\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n            if (!alreadyHavePlugin && this.apolloConfig.key) {\n                if (this.apolloConfig.graphRef) {\n                    this.plugins.unshift((0, plugin_1.ApolloServerPluginUsageReporting)());\n                }\n                else {\n                    this.logger.warn('You have specified an Apollo key but have not specified a graph ref; usage ' +\n                        'reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` ' +\n                        'environment variable to `your-graph-id@your-graph-variant`. To disable this ' +\n                        'warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n            const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n            if (!alreadyHavePlugin && enabledViaEnvVar) {\n                if (this.apolloConfig.key) {\n                    const options = {};\n                    this.plugins.push((0, plugin_1.ApolloServerPluginSchemaReporting)(options));\n                }\n                else {\n                    throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" +\n                        'environment variable to true, but you also need to provide your ' +\n                        'Apollo API key, via the APOLLO_KEY environment ' +\n                        'variable or via `new ApolloServer({apollo: {key})');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n            if (!alreadyHavePlugin) {\n                this.plugins.push((0, plugin_1.ApolloServerPluginInlineTrace)({ __onlyIfSchemaIsFederated: true }));\n            }\n        }\n        const alreadyHavePlugin = alreadyHavePluginWithInternalId('LandingPageDisabled');\n        if (!alreadyHavePlugin) {\n            const plugin = isDev\n                ? (0, plugin_1.ApolloServerPluginLandingPageLocalDefault)()\n                : (0, plugin_1.ApolloServerPluginLandingPageProductionDefault)();\n            if (!isImplicitlyInstallablePlugin(plugin)) {\n                throw Error('default landing page plugin should be implicitly installable?');\n            }\n            plugin.__internal_installed_implicitly__ = true;\n            this.plugins.push(plugin);\n        }\n    }\n    initializeDocumentStore() {\n        return new apollo_server_caching_1.InMemoryLRUCache({\n            maxSize: Math.pow(2, 20) * 30,\n            sizeCalculator: apollo_server_caching_1.InMemoryLRUCache.jsonBytesSizeCalculator,\n        });\n    }\n    async graphQLServerOptions(integrationContextArgument) {\n        const { schema, schemaHash, documentStore } = await this._ensureStarted();\n        let context = this.context ? this.context : {};\n        try {\n            context =\n                typeof this.context === 'function'\n                    ? await this.context(integrationContextArgument || {})\n                    : context;\n        }\n        catch (error) {\n            context = () => {\n                throw error;\n            };\n        }\n        return {\n            schema,\n            schemaHash,\n            logger: this.logger,\n            plugins: this.plugins,\n            documentStore,\n            context,\n            parseOptions: this.parseOptions,\n            ...this.requestOptions,\n        };\n    }\n    async executeOperation(request, integrationContextArgument) {\n        if (this.state.phase === 'initialized') {\n            await this._start();\n        }\n        const options = await this.graphQLServerOptions(integrationContextArgument);\n        if (typeof options.context === 'function') {\n            options.context = options.context();\n        }\n        else if (typeof options.context === 'object') {\n            options.context = (0, runHttpQuery_1.cloneObject)(options.context);\n        }\n        const requestCtx = {\n            logger: this.logger,\n            schema: options.schema,\n            schemaHash: options.schemaHash,\n            request: {\n                ...request,\n                query: request.query && typeof request.query !== 'string'\n                    ? (0, graphql_1.print)(request.query)\n                    : request.query,\n            },\n            context: options.context || Object.create(null),\n            cache: options.cache,\n            metrics: {},\n            response: {\n                http: {\n                    headers: new apollo_server_env_1.Headers(),\n                },\n            },\n            debug: options.debug,\n            overallCachePolicy: (0, cachePolicy_1.newCachePolicy)(),\n        };\n        return (0, requestPipeline_1.processGraphQLRequest)(options, requestCtx);\n    }\n    getLandingPage() {\n        this.assertStarted('getLandingPage');\n        return this.landingPage;\n    }\n}\nexports.ApolloServerBase = ApolloServerBase;\nfunction isImplicitlyInstallablePlugin(p) {\n    return '__internal_installed_implicitly__' in p;\n}\nexports.isImplicitlyInstallablePlugin = isImplicitlyInstallablePlugin;\n//# sourceMappingURL=ApolloServer.js.map"]},"metadata":{},"sourceType":"script"}