{"ast":null,"code":"'use strict';\n\nconst {\n  isBlobLike,\n  toUSVString\n} = require('./util');\n\nconst {\n  kState\n} = require('./symbols');\n\nconst {\n  File\n} = require('./file');\n\nclass FormData {\n  constructor() {\n    if (arguments.length > 0 && !((arguments.length <= 0 ? undefined : arguments[0])?.constructor?.name === 'HTMLFormElement')) {\n      throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'\");\n    }\n\n    this[kState] = [];\n  }\n\n  append() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    if (arguments.length === 3 && !isBlobLike(arguments.length <= 1 ? undefined : arguments[1])) {\n      throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]);\n    const filename = arguments.length === 3 ? toUSVString(arguments.length <= 2 ? undefined : arguments[2]) : undefined; // 1. Let value be value if given; otherwise blobValue.\n\n    const value = isBlobLike(arguments.length <= 1 ? undefined : arguments[1]) ? arguments.length <= 1 ? undefined : arguments[1] : toUSVString(arguments.length <= 1 ? undefined : arguments[1]); // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n\n    const entry = makeEntry(name, value, filename); // 3. Append entry to this’s entry list.\n\n    this[kState].push(entry);\n  }\n\n  delete() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'delete' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]); // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n\n    const next = [];\n\n    for (const entry of this[kState]) {\n      if (entry.name !== name) {\n        next.push(entry);\n      }\n    }\n\n    this[kState] = next;\n  }\n\n  get() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'get' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]); // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n\n    const idx = this[kState].findIndex(entry => entry.name === name);\n\n    if (idx === -1) {\n      return null;\n    } // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n\n\n    return this[kState][idx].value;\n  }\n\n  getAll() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'getAll' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]); // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n\n    return this[kState].filter(entry => entry.name === name).map(entry => entry.value);\n  }\n\n  has() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'has' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]); // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n\n    return this[kState].findIndex(entry => entry.name === name) !== -1;\n  }\n\n  set() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    if (arguments.length === 3 && !isBlobLike(arguments.length <= 1 ? undefined : arguments[1])) {\n      throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n    }\n\n    const name = toUSVString(arguments.length <= 0 ? undefined : arguments[0]);\n    const filename = arguments.length === 3 ? toUSVString(arguments.length <= 2 ? undefined : arguments[2]) : undefined; // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n    // 1. Let value be value if given; otherwise blobValue.\n\n    const value = isBlobLike(arguments.length <= 1 ? undefined : arguments[1]) ? arguments.length <= 1 ? undefined : arguments[1] : toUSVString(arguments.length <= 1 ? undefined : arguments[1]); // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n\n    const entry = makeEntry(name, value, filename); // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n\n    const idx = this[kState].findIndex(entry => entry.name === name);\n\n    if (idx !== -1) {\n      this[kState] = [...this[kState].slice(0, idx), entry, ...this[kState].slice(idx + 1).filter(entry => entry.name !== name)];\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'FormData';\n  }\n\n  *entries() {\n    for (const pair of this) {\n      yield pair;\n    }\n  }\n\n  *keys() {\n    for (const [key] of this) {\n      yield key;\n    }\n  }\n\n  *values() {\n    for (const [, value] of this) {\n      yield value;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // The value pairs to iterate over are this’s entry list’s entries with\n    // the key being the name and the value being the value.\n    for (const {\n      name,\n      value\n    } of this[kState]) {\n      yield [name, value];\n    }\n  }\n\n}\n\nfunction makeEntry(name, value, filename) {\n  // To create an entry for name, value, and optionally a filename, run these\n  // steps:\n  // 1. Let entry be a new entry.\n  const entry = {\n    name: null,\n    value: null\n  }; // 2. Set entry’s name to name.\n\n  entry.name = name; // 3. If value is a Blob object and not a File object, then set value to a new File\n  // object, representing the same bytes, whose name attribute value is \"blob\".\n\n  if (isBlobLike(value) && !(value instanceof File)) {\n    value = new File([value], 'blob');\n  } // 4. If value is (now) a File object and filename is given, then set value to a\n  // new File object, representing the same bytes, whose name attribute value is\n  // filename.\n  // TODO: This is a bit weird... What if passed value is a File?\n  // Do we just override the name attribute? Since it says \"if value is (now)\"\n  // does that mean that this lives inside the previous condition? In which case\n  // creating one more File instance doesn't make much sense....\n\n\n  if (value instanceof File && filename) {\n    value = new File([value], filename);\n  } // 5. Set entry’s value to value.\n\n\n  entry.value = value; // 6. Return entry.\n\n  return entry;\n}\n\nmodule.exports = {\n  FormData: globalThis.FormData ?? FormData\n};","map":{"version":3,"sources":["/home/cameron/Dev/whoisWrapper/ui/node_modules/undici/lib/fetch/formdata.js"],"names":["isBlobLike","toUSVString","require","kState","File","FormData","constructor","length","name","TypeError","append","filename","undefined","value","entry","makeEntry","push","delete","next","get","idx","findIndex","getAll","filter","map","has","set","slice","Symbol","toStringTag","entries","pair","keys","key","values","iterator","module","exports","globalThis"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { isBlobLike, toUSVString } = require('./util')\nconst { kState } = require('./symbols')\nconst { File } = require('./file')\n\nclass FormData {\n  constructor (...args) {\n    if (args.length > 0 && !(args[0]?.constructor?.name === 'HTMLFormElement')) {\n      throw new TypeError(\n        \"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'\"\n      )\n    }\n\n    this[kState] = []\n  }\n\n  append (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 2) {\n      throw new TypeError(\n        `Failed to execute 'append' on 'FormData': 2 arguments required, but only ${args.length} present.`\n      )\n    }\n    if (args.length === 3 && !isBlobLike(args[1])) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n    const name = toUSVString(args[0])\n    const filename = args.length === 3 ? toUSVString(args[2]) : undefined\n\n    // 1. Let value be value if given; otherwise blobValue.\n    const value = isBlobLike(args[1]) ? args[1] : toUSVString(args[1])\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'delete' on 'FormData': 1 arguments required, but only ${args.length} present.`\n      )\n    }\n    const name = toUSVString(args[0])\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    const next = []\n    for (const entry of this[kState]) {\n      if (entry.name !== name) {\n        next.push(entry)\n      }\n    }\n\n    this[kState] = next\n  }\n\n  get (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'get' on 'FormData': 1 arguments required, but only ${args.length} present.`\n      )\n    }\n    const name = toUSVString(args[0])\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'getAll' on 'FormData': 1 arguments required, but only ${args.length} present.`\n      )\n    }\n    const name = toUSVString(args[0])\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'has' on 'FormData': 1 arguments required, but only ${args.length} present.`\n      )\n    }\n    const name = toUSVString(args[0])\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (...args) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n    if (args.length < 2) {\n      throw new TypeError(\n        `Failed to execute 'set' on 'FormData': 2 arguments required, but only ${args.length} present.`\n      )\n    }\n    if (args.length === 3 && !isBlobLike(args[1])) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n    const name = toUSVString(args[0])\n    const filename = args.length === 3 ? toUSVString(args[2]) : undefined\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n    const value = isBlobLike(args[1]) ? args[1] : toUSVString(args[1])\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'FormData'\n  }\n\n  * entries () {\n    for (const pair of this) {\n      yield pair\n    }\n  }\n\n  * keys () {\n    for (const [key] of this) {\n      yield key\n    }\n  }\n\n  * values () {\n    for (const [, value] of this) {\n      yield value\n    }\n  }\n\n  * [Symbol.iterator] () {\n    // The value pairs to iterate over are this’s entry list’s entries with\n    // the key being the name and the value being the value.\n    for (const { name, value } of this[kState]) {\n      yield [name, value]\n    }\n  }\n}\n\nfunction makeEntry (name, value, filename) {\n  // To create an entry for name, value, and optionally a filename, run these\n  // steps:\n\n  // 1. Let entry be a new entry.\n  const entry = {\n    name: null,\n    value: null\n  }\n\n  // 2. Set entry’s name to name.\n  entry.name = name\n\n  // 3. If value is a Blob object and not a File object, then set value to a new File\n  // object, representing the same bytes, whose name attribute value is \"blob\".\n  if (isBlobLike(value) && !(value instanceof File)) {\n    value = new File([value], 'blob')\n  }\n\n  // 4. If value is (now) a File object and filename is given, then set value to a\n  // new File object, representing the same bytes, whose name attribute value is\n  // filename.\n  // TODO: This is a bit weird... What if passed value is a File?\n  // Do we just override the name attribute? Since it says \"if value is (now)\"\n  // does that mean that this lives inside the previous condition? In which case\n  // creating one more File instance doesn't make much sense....\n  if (value instanceof File && filename) {\n    value = new File([value], filename)\n  }\n\n  // 5. Set entry’s value to value.\n  entry.value = value\n\n  // 6. Return entry.\n  return entry\n}\n\nmodule.exports = { FormData: globalThis.FormData ?? FormData }\n"]},"metadata":{},"sourceType":"script"}