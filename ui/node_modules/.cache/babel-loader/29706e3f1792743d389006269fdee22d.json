{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerPluginCacheControlDisabled = exports.ApolloServerPluginCacheControl = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst cachePolicy_1 = require(\"../../cachePolicy\");\n\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\n\nfunction ApolloServerPluginCacheControl() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  const typeAnnotationCache = new lru_cache_1.default();\n  const fieldAnnotationCache = new lru_cache_1.default();\n\n  function memoizedCacheAnnotationFromType(t) {\n    const existing = typeAnnotationCache.get(t);\n\n    if (existing) {\n      return existing;\n    }\n\n    const annotation = cacheAnnotationFromType(t);\n    typeAnnotationCache.set(t, annotation);\n    return annotation;\n  }\n\n  function memoizedCacheAnnotationFromField(field) {\n    const existing = fieldAnnotationCache.get(field);\n\n    if (existing) {\n      return existing;\n    }\n\n    const annotation = cacheAnnotationFromField(field);\n    fieldAnnotationCache.set(field, annotation);\n    return annotation;\n  }\n\n  return {\n    __internal_plugin_id__() {\n      return 'CacheControl';\n    },\n\n    async serverWillStart(_ref) {\n      let {\n        schema\n      } = _ref;\n      typeAnnotationCache.max = Object.values(schema.getTypeMap()).filter(graphql_1.isCompositeType).length;\n      fieldAnnotationCache.max = Object.values(schema.getTypeMap()).filter(graphql_1.isObjectType).flatMap(t => Object.values(t.getFields())).length + Object.values(schema.getTypeMap()).filter(graphql_1.isInterfaceType).flatMap(t => Object.values(t.getFields())).length;\n      return undefined;\n    },\n\n    async requestDidStart(requestContext) {\n      var _a, _b;\n\n      const defaultMaxAge = (_a = options.defaultMaxAge) !== null && _a !== void 0 ? _a : 0;\n      const calculateHttpHeaders = (_b = options.calculateHttpHeaders) !== null && _b !== void 0 ? _b : true;\n      const {\n        __testing__cacheHints\n      } = options;\n      return {\n        async executionDidStart() {\n          if (isRestricted(requestContext.overallCachePolicy)) {\n            const fakeFieldPolicy = (0, cachePolicy_1.newCachePolicy)();\n            return {\n              willResolveField(_ref2) {\n                let {\n                  info\n                } = _ref2;\n                info.cacheControl = {\n                  setCacheHint: dynamicHint => {\n                    fakeFieldPolicy.replace(dynamicHint);\n                  },\n                  cacheHint: fakeFieldPolicy,\n                  cacheHintFromType: memoizedCacheAnnotationFromType\n                };\n              }\n\n            };\n          }\n\n          return {\n            willResolveField(_ref3) {\n              let {\n                info\n              } = _ref3;\n              const fieldPolicy = (0, cachePolicy_1.newCachePolicy)();\n              let inheritMaxAge = false;\n              const targetType = (0, graphql_1.getNamedType)(info.returnType);\n\n              if ((0, graphql_1.isCompositeType)(targetType)) {\n                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);\n                fieldPolicy.replace(typeAnnotation);\n                inheritMaxAge = !!typeAnnotation.inheritMaxAge;\n              }\n\n              const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);\n\n              if (fieldAnnotation.inheritMaxAge && fieldPolicy.maxAge === undefined) {\n                inheritMaxAge = true;\n\n                if (fieldAnnotation.scope) {\n                  fieldPolicy.replace({\n                    scope: fieldAnnotation.scope\n                  });\n                }\n              } else {\n                fieldPolicy.replace(fieldAnnotation);\n              }\n\n              info.cacheControl = {\n                setCacheHint: dynamicHint => {\n                  fieldPolicy.replace(dynamicHint);\n                },\n                cacheHint: fieldPolicy,\n                cacheHintFromType: memoizedCacheAnnotationFromType\n              };\n              return () => {\n                if (fieldPolicy.maxAge === undefined && ((0, graphql_1.isCompositeType)(targetType) && !inheritMaxAge || !info.path.prev)) {\n                  fieldPolicy.restrict({\n                    maxAge: defaultMaxAge\n                  });\n                }\n\n                if (__testing__cacheHints && isRestricted(fieldPolicy)) {\n                  const path = (0, graphql_1.responsePathAsArray)(info.path).join('.');\n\n                  if (__testing__cacheHints.has(path)) {\n                    throw Error(\"shouldn't happen: addHint should only be called once per path\");\n                  }\n\n                  __testing__cacheHints.set(path, {\n                    maxAge: fieldPolicy.maxAge,\n                    scope: fieldPolicy.scope\n                  });\n                }\n\n                requestContext.overallCachePolicy.restrict(fieldPolicy);\n              };\n            }\n\n          };\n        },\n\n        async willSendResponse(requestContext) {\n          const {\n            response,\n            overallCachePolicy\n          } = requestContext;\n          const policyIfCacheable = overallCachePolicy.policyIfCacheable();\n\n          if (calculateHttpHeaders && policyIfCacheable && !response.errors && response.http) {\n            response.http.headers.set('Cache-Control', `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);\n          }\n        }\n\n      };\n    }\n\n  };\n}\n\nexports.ApolloServerPluginCacheControl = ApolloServerPluginCacheControl;\n\nfunction cacheAnnotationFromDirectives(directives) {\n  var _a, _b, _c;\n\n  if (!directives) return undefined;\n  const cacheControlDirective = directives.find(directive => directive.name.value === 'cacheControl');\n  if (!cacheControlDirective) return undefined;\n  if (!cacheControlDirective.arguments) return undefined;\n  const maxAgeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'maxAge');\n  const scopeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'scope');\n  const inheritMaxAgeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'inheritMaxAge');\n  const scope = ((_a = scopeArgument === null || scopeArgument === void 0 ? void 0 : scopeArgument.value) === null || _a === void 0 ? void 0 : _a.kind) === 'EnumValue' ? scopeArgument.value.value : undefined;\n\n  if (((_b = inheritMaxAgeArgument === null || inheritMaxAgeArgument === void 0 ? void 0 : inheritMaxAgeArgument.value) === null || _b === void 0 ? void 0 : _b.kind) === 'BooleanValue' && inheritMaxAgeArgument.value.value) {\n    return {\n      inheritMaxAge: true,\n      scope\n    };\n  }\n\n  return {\n    maxAge: ((_c = maxAgeArgument === null || maxAgeArgument === void 0 ? void 0 : maxAgeArgument.value) === null || _c === void 0 ? void 0 : _c.kind) === 'IntValue' ? parseInt(maxAgeArgument.value.value) : undefined,\n    scope\n  };\n}\n\nfunction cacheAnnotationFromType(t) {\n  if (t.astNode) {\n    const hint = cacheAnnotationFromDirectives(t.astNode.directives);\n\n    if (hint) {\n      return hint;\n    }\n  }\n\n  if (t.extensionASTNodes) {\n    for (const node of t.extensionASTNodes) {\n      const hint = cacheAnnotationFromDirectives(node.directives);\n\n      if (hint) {\n        return hint;\n      }\n    }\n  }\n\n  return {};\n}\n\nfunction cacheAnnotationFromField(field) {\n  if (field.astNode) {\n    const hint = cacheAnnotationFromDirectives(field.astNode.directives);\n\n    if (hint) {\n      return hint;\n    }\n  }\n\n  return {};\n}\n\nfunction isRestricted(hint) {\n  return hint.maxAge !== undefined || hint.scope !== undefined;\n}\n\nfunction ApolloServerPluginCacheControlDisabled() {\n  return {\n    __internal_plugin_id__() {\n      return 'CacheControl';\n    }\n\n  };\n}\n\nexports.ApolloServerPluginCacheControlDisabled = ApolloServerPluginCacheControlDisabled;","map":{"version":3,"sources":["../../../src/plugin/cacheControl/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServerPluginCacheControlDisabled = exports.ApolloServerPluginCacheControl = void 0;\nconst graphql_1 = require(\"graphql\");\nconst cachePolicy_1 = require(\"../../cachePolicy\");\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nfunction ApolloServerPluginCacheControl(options = Object.create(null)) {\n    const typeAnnotationCache = new lru_cache_1.default();\n    const fieldAnnotationCache = new lru_cache_1.default();\n    function memoizedCacheAnnotationFromType(t) {\n        const existing = typeAnnotationCache.get(t);\n        if (existing) {\n            return existing;\n        }\n        const annotation = cacheAnnotationFromType(t);\n        typeAnnotationCache.set(t, annotation);\n        return annotation;\n    }\n    function memoizedCacheAnnotationFromField(field) {\n        const existing = fieldAnnotationCache.get(field);\n        if (existing) {\n            return existing;\n        }\n        const annotation = cacheAnnotationFromField(field);\n        fieldAnnotationCache.set(field, annotation);\n        return annotation;\n    }\n    return {\n        __internal_plugin_id__() {\n            return 'CacheControl';\n        },\n        async serverWillStart({ schema }) {\n            typeAnnotationCache.max = Object.values(schema.getTypeMap()).filter(graphql_1.isCompositeType).length;\n            fieldAnnotationCache.max =\n                Object.values(schema.getTypeMap())\n                    .filter(graphql_1.isObjectType)\n                    .flatMap((t) => Object.values(t.getFields())).length +\n                    Object.values(schema.getTypeMap())\n                        .filter(graphql_1.isInterfaceType)\n                        .flatMap((t) => Object.values(t.getFields())).length;\n            return undefined;\n        },\n        async requestDidStart(requestContext) {\n            var _a, _b;\n            const defaultMaxAge = (_a = options.defaultMaxAge) !== null && _a !== void 0 ? _a : 0;\n            const calculateHttpHeaders = (_b = options.calculateHttpHeaders) !== null && _b !== void 0 ? _b : true;\n            const { __testing__cacheHints } = options;\n            return {\n                async executionDidStart() {\n                    if (isRestricted(requestContext.overallCachePolicy)) {\n                        const fakeFieldPolicy = (0, cachePolicy_1.newCachePolicy)();\n                        return {\n                            willResolveField({ info }) {\n                                info.cacheControl = {\n                                    setCacheHint: (dynamicHint) => {\n                                        fakeFieldPolicy.replace(dynamicHint);\n                                    },\n                                    cacheHint: fakeFieldPolicy,\n                                    cacheHintFromType: memoizedCacheAnnotationFromType,\n                                };\n                            },\n                        };\n                    }\n                    return {\n                        willResolveField({ info }) {\n                            const fieldPolicy = (0, cachePolicy_1.newCachePolicy)();\n                            let inheritMaxAge = false;\n                            const targetType = (0, graphql_1.getNamedType)(info.returnType);\n                            if ((0, graphql_1.isCompositeType)(targetType)) {\n                                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);\n                                fieldPolicy.replace(typeAnnotation);\n                                inheritMaxAge = !!typeAnnotation.inheritMaxAge;\n                            }\n                            const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);\n                            if (fieldAnnotation.inheritMaxAge &&\n                                fieldPolicy.maxAge === undefined) {\n                                inheritMaxAge = true;\n                                if (fieldAnnotation.scope) {\n                                    fieldPolicy.replace({ scope: fieldAnnotation.scope });\n                                }\n                            }\n                            else {\n                                fieldPolicy.replace(fieldAnnotation);\n                            }\n                            info.cacheControl = {\n                                setCacheHint: (dynamicHint) => {\n                                    fieldPolicy.replace(dynamicHint);\n                                },\n                                cacheHint: fieldPolicy,\n                                cacheHintFromType: memoizedCacheAnnotationFromType,\n                            };\n                            return () => {\n                                if (fieldPolicy.maxAge === undefined &&\n                                    (((0, graphql_1.isCompositeType)(targetType) && !inheritMaxAge) ||\n                                        !info.path.prev)) {\n                                    fieldPolicy.restrict({ maxAge: defaultMaxAge });\n                                }\n                                if (__testing__cacheHints && isRestricted(fieldPolicy)) {\n                                    const path = (0, graphql_1.responsePathAsArray)(info.path).join('.');\n                                    if (__testing__cacheHints.has(path)) {\n                                        throw Error(\"shouldn't happen: addHint should only be called once per path\");\n                                    }\n                                    __testing__cacheHints.set(path, {\n                                        maxAge: fieldPolicy.maxAge,\n                                        scope: fieldPolicy.scope,\n                                    });\n                                }\n                                requestContext.overallCachePolicy.restrict(fieldPolicy);\n                            };\n                        },\n                    };\n                },\n                async willSendResponse(requestContext) {\n                    const { response, overallCachePolicy } = requestContext;\n                    const policyIfCacheable = overallCachePolicy.policyIfCacheable();\n                    if (calculateHttpHeaders &&\n                        policyIfCacheable &&\n                        !response.errors &&\n                        response.http) {\n                        response.http.headers.set('Cache-Control', `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);\n                    }\n                },\n            };\n        },\n    };\n}\nexports.ApolloServerPluginCacheControl = ApolloServerPluginCacheControl;\nfunction cacheAnnotationFromDirectives(directives) {\n    var _a, _b, _c;\n    if (!directives)\n        return undefined;\n    const cacheControlDirective = directives.find((directive) => directive.name.value === 'cacheControl');\n    if (!cacheControlDirective)\n        return undefined;\n    if (!cacheControlDirective.arguments)\n        return undefined;\n    const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'maxAge');\n    const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'scope');\n    const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'inheritMaxAge');\n    const scope = ((_a = scopeArgument === null || scopeArgument === void 0 ? void 0 : scopeArgument.value) === null || _a === void 0 ? void 0 : _a.kind) === 'EnumValue'\n        ? scopeArgument.value.value\n        : undefined;\n    if (((_b = inheritMaxAgeArgument === null || inheritMaxAgeArgument === void 0 ? void 0 : inheritMaxAgeArgument.value) === null || _b === void 0 ? void 0 : _b.kind) === 'BooleanValue' &&\n        inheritMaxAgeArgument.value.value) {\n        return { inheritMaxAge: true, scope };\n    }\n    return {\n        maxAge: ((_c = maxAgeArgument === null || maxAgeArgument === void 0 ? void 0 : maxAgeArgument.value) === null || _c === void 0 ? void 0 : _c.kind) === 'IntValue'\n            ? parseInt(maxAgeArgument.value.value)\n            : undefined,\n        scope,\n    };\n}\nfunction cacheAnnotationFromType(t) {\n    if (t.astNode) {\n        const hint = cacheAnnotationFromDirectives(t.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    if (t.extensionASTNodes) {\n        for (const node of t.extensionASTNodes) {\n            const hint = cacheAnnotationFromDirectives(node.directives);\n            if (hint) {\n                return hint;\n            }\n        }\n    }\n    return {};\n}\nfunction cacheAnnotationFromField(field) {\n    if (field.astNode) {\n        const hint = cacheAnnotationFromDirectives(field.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    return {};\n}\nfunction isRestricted(hint) {\n    return hint.maxAge !== undefined || hint.scope !== undefined;\n}\nfunction ApolloServerPluginCacheControlDisabled() {\n    return {\n        __internal_plugin_id__() {\n            return 'CacheControl';\n        },\n    };\n}\nexports.ApolloServerPluginCacheControlDisabled = ApolloServerPluginCacheControlDisabled;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}