{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServer = void 0;\n\nconst express_1 = __importDefault(require(\"express\"));\n\nconst http_1 = __importDefault(require(\"http\"));\n\nconst apollo_server_express_1 = require(\"apollo-server-express\");\n\nconst url_1 = require(\"url\");\n\nconst apollo_server_core_1 = require(\"apollo-server-core\");\n\n__exportStar(require(\"./exports\"), exports);\n\nclass ApolloServer extends apollo_server_express_1.ApolloServer {\n  constructor(config) {\n    var _a;\n\n    const httpServer = http_1.default.createServer();\n    super({ ...config,\n      plugins: [...((_a = config.plugins) !== null && _a !== void 0 ? _a : []), (0, apollo_server_core_1.ApolloServerPluginDrainHttpServer)({\n        httpServer: httpServer,\n        stopGracePeriodMillis: config.stopGracePeriodMillis\n      })]\n    });\n    this.httpServer = httpServer;\n    this.cors = config.cors;\n    this.onHealthCheck = config.onHealthCheck;\n    this.healthCheckPath = config === null || config === void 0 ? void 0 : config.healthCheckPath;\n  }\n\n  createServerInfo() {\n    const addressInfo = this.httpServer.address();\n    let hostForUrl = addressInfo.address;\n\n    if (hostForUrl === '' || hostForUrl === '::') {\n      hostForUrl = 'localhost';\n    }\n\n    const url = (0, url_1.format)({\n      protocol: 'http',\n      hostname: hostForUrl,\n      port: addressInfo.port,\n      pathname: this.graphqlPath\n    });\n    return { ...addressInfo,\n      server: this.httpServer,\n      url\n    };\n  }\n\n  applyMiddleware() {\n    throw new Error('To use Apollo Server with an existing express application, please use apollo-server-express');\n  }\n\n  async start() {\n    throw new Error(\"When using the `apollo-server` package, you don't need to call start(); just call listen().\");\n  }\n\n  async listen() {\n    for (var _len = arguments.length, opts = new Array(_len), _key = 0; _key < _len; _key++) {\n      opts[_key] = arguments[_key];\n    }\n\n    await this._start();\n    const app = (0, express_1.default)();\n    this.httpServer.on('request', app);\n    app.disable('x-powered-by');\n    super.applyMiddleware({\n      app: app,\n      path: '/',\n      bodyParserConfig: {\n        limit: '50mb'\n      },\n      onHealthCheck: this.onHealthCheck,\n      cors: typeof this.cors !== 'undefined' ? this.cors : {\n        origin: '*'\n      },\n      __internal_healthCheckPath: this.healthCheckPath\n    });\n    await new Promise(resolve => {\n      this.httpServer.once('listening', resolve);\n      this.httpServer.listen(...(opts.length ? opts : [{\n        port: 4000\n      }]));\n    });\n    return this.createServerInfo();\n  }\n\n}\n\nexports.ApolloServer = ApolloServer;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst http_1 = __importDefault(require(\"http\"));\nconst apollo_server_express_1 = require(\"apollo-server-express\");\nconst url_1 = require(\"url\");\nconst apollo_server_core_1 = require(\"apollo-server-core\");\n__exportStar(require(\"./exports\"), exports);\nclass ApolloServer extends apollo_server_express_1.ApolloServer {\n    constructor(config) {\n        var _a;\n        const httpServer = http_1.default.createServer();\n        super({\n            ...config,\n            plugins: [\n                ...((_a = config.plugins) !== null && _a !== void 0 ? _a : []),\n                (0, apollo_server_core_1.ApolloServerPluginDrainHttpServer)({\n                    httpServer: httpServer,\n                    stopGracePeriodMillis: config.stopGracePeriodMillis,\n                }),\n            ],\n        });\n        this.httpServer = httpServer;\n        this.cors = config.cors;\n        this.onHealthCheck = config.onHealthCheck;\n        this.healthCheckPath = config === null || config === void 0 ? void 0 : config.healthCheckPath;\n    }\n    createServerInfo() {\n        const addressInfo = this.httpServer.address();\n        let hostForUrl = addressInfo.address;\n        if (hostForUrl === '' || hostForUrl === '::') {\n            hostForUrl = 'localhost';\n        }\n        const url = (0, url_1.format)({\n            protocol: 'http',\n            hostname: hostForUrl,\n            port: addressInfo.port,\n            pathname: this.graphqlPath,\n        });\n        return {\n            ...addressInfo,\n            server: this.httpServer,\n            url,\n        };\n    }\n    applyMiddleware() {\n        throw new Error('To use Apollo Server with an existing express application, please use apollo-server-express');\n    }\n    async start() {\n        throw new Error(\"When using the `apollo-server` package, you don't need to call start(); just call listen().\");\n    }\n    async listen(...opts) {\n        await this._start();\n        const app = (0, express_1.default)();\n        this.httpServer.on('request', app);\n        app.disable('x-powered-by');\n        super.applyMiddleware({\n            app: app,\n            path: '/',\n            bodyParserConfig: { limit: '50mb' },\n            onHealthCheck: this.onHealthCheck,\n            cors: typeof this.cors !== 'undefined'\n                ? this.cors\n                : {\n                    origin: '*',\n                },\n            __internal_healthCheckPath: this.healthCheckPath,\n        });\n        await new Promise((resolve) => {\n            this.httpServer.once('listening', resolve);\n            this.httpServer.listen(...(opts.length ? opts : [{ port: 4000 }]));\n        });\n        return this.createServerInfo();\n    }\n}\nexports.ApolloServer = ApolloServer;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}