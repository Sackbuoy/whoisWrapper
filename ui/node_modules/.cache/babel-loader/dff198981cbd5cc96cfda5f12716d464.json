{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RESTDataSource = exports.Request = void 0;\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nObject.defineProperty(exports, \"Request\", {\n  enumerable: true,\n  get: function () {\n    return apollo_server_env_1.Request;\n  }\n});\n\nconst apollo_datasource_1 = require(\"apollo-datasource\");\n\nconst HTTPCache_1 = require(\"./HTTPCache\");\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst NODE_ENV = process.env.NODE_ENV;\n\nclass RESTDataSource extends apollo_datasource_1.DataSource {\n  constructor(httpFetch) {\n    super();\n    this.httpFetch = httpFetch;\n    this.memoizedResults = new Map();\n  }\n\n  initialize(config) {\n    this.context = config.context;\n    this.httpCache = new HTTPCache_1.HTTPCache(config.cache, this.httpFetch);\n  }\n\n  cacheKeyFor(request) {\n    return request.url;\n  }\n\n  resolveURL(request) {\n    let path = request.path;\n\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n\n    const baseURL = this.baseURL;\n\n    if (baseURL) {\n      const normalizedBaseURL = baseURL.endsWith('/') ? baseURL : baseURL.concat('/');\n      return new apollo_server_env_1.URL(path, normalizedBaseURL);\n    } else {\n      return new apollo_server_env_1.URL(path);\n    }\n  }\n\n  async didReceiveResponse(response, _request) {\n    if (response.ok) {\n      return this.parseBody(response);\n    } else {\n      throw await this.errorFromResponse(response);\n    }\n  }\n\n  didEncounterError(error, _request) {\n    throw error;\n  }\n\n  parseBody(response) {\n    const contentType = response.headers.get('Content-Type');\n    const contentLength = response.headers.get('Content-Length');\n\n    if (response.status !== 204 && contentLength !== '0' && contentType && (contentType.startsWith('application/json') || contentType.endsWith('+json'))) {\n      return response.json();\n    } else {\n      return response.text();\n    }\n  }\n\n  async errorFromResponse(response) {\n    const message = `${response.status}: ${response.statusText}`;\n    let error;\n\n    if (response.status === 401) {\n      error = new apollo_server_errors_1.AuthenticationError(message);\n    } else if (response.status === 403) {\n      error = new apollo_server_errors_1.ForbiddenError(message);\n    } else {\n      error = new apollo_server_errors_1.ApolloError(message);\n    }\n\n    const body = await this.parseBody(response);\n    Object.assign(error.extensions, {\n      response: {\n        url: response.url,\n        status: response.status,\n        statusText: response.statusText,\n        body\n      }\n    });\n    return error;\n  }\n\n  async get(path, params, init) {\n    return this.fetch(Object.assign({\n      method: 'GET',\n      path,\n      params\n    }, init));\n  }\n\n  async post(path, body, init) {\n    return this.fetch(Object.assign({\n      method: 'POST',\n      path,\n      body\n    }, init));\n  }\n\n  async patch(path, body, init) {\n    return this.fetch(Object.assign({\n      method: 'PATCH',\n      path,\n      body\n    }, init));\n  }\n\n  async put(path, body, init) {\n    return this.fetch(Object.assign({\n      method: 'PUT',\n      path,\n      body\n    }, init));\n  }\n\n  async delete(path, params, init) {\n    return this.fetch(Object.assign({\n      method: 'DELETE',\n      path,\n      params\n    }, init));\n  }\n\n  async fetch(init) {\n    if (!(init.params instanceof apollo_server_env_1.URLSearchParams)) {\n      init.params = new apollo_server_env_1.URLSearchParams(init.params);\n    }\n\n    if (!(init.headers instanceof apollo_server_env_1.Headers)) {\n      init.headers = new apollo_server_env_1.Headers(init.headers || Object.create(null));\n    }\n\n    const options = init;\n\n    if (this.willSendRequest) {\n      await this.willSendRequest(options);\n    }\n\n    const url = await this.resolveURL(options);\n\n    for (const [name, value] of options.params) {\n      url.searchParams.append(name, value);\n    }\n\n    if (options.body !== undefined && options.body !== null && (options.body.constructor === Object || Array.isArray(options.body) || options.body.toJSON && typeof options.body.toJSON === 'function')) {\n      options.body = JSON.stringify(options.body);\n\n      if (!options.headers.get('Content-Type')) {\n        options.headers.set('Content-Type', 'application/json');\n      }\n    }\n\n    const request = new apollo_server_env_1.Request(String(url), options);\n    const cacheKey = this.cacheKeyFor(request);\n\n    const performRequest = async () => {\n      return this.trace(request, async () => {\n        var _a;\n\n        const cacheOptions = options.cacheOptions ? options.cacheOptions : (_a = this.cacheOptionsFor) === null || _a === void 0 ? void 0 : _a.bind(this);\n\n        try {\n          const response = await this.httpCache.fetch(request, {\n            cacheKey,\n            cacheOptions\n          });\n          return await this.didReceiveResponse(response, request);\n        } catch (error) {\n          this.didEncounterError(error, request);\n        }\n      });\n    };\n\n    if (request.method === 'GET') {\n      let promise = this.memoizedResults.get(cacheKey);\n      if (promise) return promise;\n      promise = performRequest();\n      this.memoizedResults.set(cacheKey, promise);\n      return promise;\n    } else {\n      this.memoizedResults.delete(cacheKey);\n      return performRequest();\n    }\n  }\n\n  async trace(request, fn) {\n    if (NODE_ENV === 'development') {\n      const startTime = Date.now();\n\n      try {\n        return await fn();\n      } finally {\n        const duration = Date.now() - startTime;\n        const label = `${request.method || 'GET'} ${request.url}`;\n        console.log(`${label} (${duration}ms)`);\n      }\n    } else {\n      return fn();\n    }\n  }\n\n}\n\nexports.RESTDataSource = RESTDataSource;","map":{"version":3,"sources":["../src/RESTDataSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTDataSource = exports.Request = void 0;\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nObject.defineProperty(exports, \"Request\", { enumerable: true, get: function () { return apollo_server_env_1.Request; } });\nconst apollo_datasource_1 = require(\"apollo-datasource\");\nconst HTTPCache_1 = require(\"./HTTPCache\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst NODE_ENV = process.env.NODE_ENV;\nclass RESTDataSource extends apollo_datasource_1.DataSource {\n    constructor(httpFetch) {\n        super();\n        this.httpFetch = httpFetch;\n        this.memoizedResults = new Map();\n    }\n    initialize(config) {\n        this.context = config.context;\n        this.httpCache = new HTTPCache_1.HTTPCache(config.cache, this.httpFetch);\n    }\n    cacheKeyFor(request) {\n        return request.url;\n    }\n    resolveURL(request) {\n        let path = request.path;\n        if (path.startsWith('/')) {\n            path = path.slice(1);\n        }\n        const baseURL = this.baseURL;\n        if (baseURL) {\n            const normalizedBaseURL = baseURL.endsWith('/')\n                ? baseURL\n                : baseURL.concat('/');\n            return new apollo_server_env_1.URL(path, normalizedBaseURL);\n        }\n        else {\n            return new apollo_server_env_1.URL(path);\n        }\n    }\n    async didReceiveResponse(response, _request) {\n        if (response.ok) {\n            return this.parseBody(response);\n        }\n        else {\n            throw await this.errorFromResponse(response);\n        }\n    }\n    didEncounterError(error, _request) {\n        throw error;\n    }\n    parseBody(response) {\n        const contentType = response.headers.get('Content-Type');\n        const contentLength = response.headers.get('Content-Length');\n        if (response.status !== 204 &&\n            contentLength !== '0' &&\n            contentType &&\n            (contentType.startsWith('application/json') ||\n                contentType.endsWith('+json'))) {\n            return response.json();\n        }\n        else {\n            return response.text();\n        }\n    }\n    async errorFromResponse(response) {\n        const message = `${response.status}: ${response.statusText}`;\n        let error;\n        if (response.status === 401) {\n            error = new apollo_server_errors_1.AuthenticationError(message);\n        }\n        else if (response.status === 403) {\n            error = new apollo_server_errors_1.ForbiddenError(message);\n        }\n        else {\n            error = new apollo_server_errors_1.ApolloError(message);\n        }\n        const body = await this.parseBody(response);\n        Object.assign(error.extensions, {\n            response: {\n                url: response.url,\n                status: response.status,\n                statusText: response.statusText,\n                body,\n            },\n        });\n        return error;\n    }\n    async get(path, params, init) {\n        return this.fetch(Object.assign({ method: 'GET', path, params }, init));\n    }\n    async post(path, body, init) {\n        return this.fetch(Object.assign({ method: 'POST', path, body }, init));\n    }\n    async patch(path, body, init) {\n        return this.fetch(Object.assign({ method: 'PATCH', path, body }, init));\n    }\n    async put(path, body, init) {\n        return this.fetch(Object.assign({ method: 'PUT', path, body }, init));\n    }\n    async delete(path, params, init) {\n        return this.fetch(Object.assign({ method: 'DELETE', path, params }, init));\n    }\n    async fetch(init) {\n        if (!(init.params instanceof apollo_server_env_1.URLSearchParams)) {\n            init.params = new apollo_server_env_1.URLSearchParams(init.params);\n        }\n        if (!(init.headers instanceof apollo_server_env_1.Headers)) {\n            init.headers = new apollo_server_env_1.Headers(init.headers || Object.create(null));\n        }\n        const options = init;\n        if (this.willSendRequest) {\n            await this.willSendRequest(options);\n        }\n        const url = await this.resolveURL(options);\n        for (const [name, value] of options.params) {\n            url.searchParams.append(name, value);\n        }\n        if (options.body !== undefined &&\n            options.body !== null &&\n            (options.body.constructor === Object ||\n                Array.isArray(options.body) ||\n                (options.body.toJSON &&\n                    typeof options.body.toJSON === 'function'))) {\n            options.body = JSON.stringify(options.body);\n            if (!options.headers.get('Content-Type')) {\n                options.headers.set('Content-Type', 'application/json');\n            }\n        }\n        const request = new apollo_server_env_1.Request(String(url), options);\n        const cacheKey = this.cacheKeyFor(request);\n        const performRequest = async () => {\n            return this.trace(request, async () => {\n                var _a;\n                const cacheOptions = options.cacheOptions\n                    ? options.cacheOptions\n                    : (_a = this.cacheOptionsFor) === null || _a === void 0 ? void 0 : _a.bind(this);\n                try {\n                    const response = await this.httpCache.fetch(request, {\n                        cacheKey,\n                        cacheOptions,\n                    });\n                    return await this.didReceiveResponse(response, request);\n                }\n                catch (error) {\n                    this.didEncounterError(error, request);\n                }\n            });\n        };\n        if (request.method === 'GET') {\n            let promise = this.memoizedResults.get(cacheKey);\n            if (promise)\n                return promise;\n            promise = performRequest();\n            this.memoizedResults.set(cacheKey, promise);\n            return promise;\n        }\n        else {\n            this.memoizedResults.delete(cacheKey);\n            return performRequest();\n        }\n    }\n    async trace(request, fn) {\n        if (NODE_ENV === 'development') {\n            const startTime = Date.now();\n            try {\n                return await fn();\n            }\n            finally {\n                const duration = Date.now() - startTime;\n                const label = `${request.method || 'GET'} ${request.url}`;\n                console.log(`${label} (${duration}ms)`);\n            }\n        }\n        else {\n            return fn();\n        }\n    }\n}\nexports.RESTDataSource = RESTDataSource;\n//# sourceMappingURL=RESTDataSource.js.map"]},"metadata":{},"sourceType":"script"}