{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runKeyValueCacheTests = void 0;\n\nasync function runKeyValueCacheTests(keyValueCache, tick) {\n  await keyValueCache.set('hello', 'world');\n  assertEqual(await keyValueCache.get('hello'), 'world');\n  assertEqual(await keyValueCache.get('missing'), undefined);\n  await keyValueCache.set('hello2', 'world');\n  assertEqual(await keyValueCache.get('hello2'), 'world');\n  await keyValueCache.delete('hello2');\n  assertEqual(await keyValueCache.get('hello2'), undefined);\n\n  if (tick) {\n    await keyValueCache.set('short', 's', {\n      ttl: 1\n    });\n    await keyValueCache.set('long', 'l', {\n      ttl: 5\n    });\n    assertEqual(await keyValueCache.get('short'), 's');\n    assertEqual(await keyValueCache.get('long'), 'l');\n    tick(1500);\n    assertEqual(await keyValueCache.get('short'), undefined);\n    assertEqual(await keyValueCache.get('long'), 'l');\n    tick(4000);\n    assertEqual(await keyValueCache.get('short'), undefined);\n    assertEqual(await keyValueCache.get('long'), undefined);\n    await keyValueCache.set('forever', 'yours', {\n      ttl: null\n    });\n    assertEqual(await keyValueCache.get('forever'), 'yours');\n    tick(1500);\n    assertEqual(await keyValueCache.get('forever'), 'yours');\n    tick(4000);\n    assertEqual(await keyValueCache.get('forever'), 'yours');\n  }\n}\n\nexports.runKeyValueCacheTests = runKeyValueCacheTests;\n\nfunction assertEqual(actual, expected) {\n  if (actual === expected) {\n    return;\n  }\n\n  throw Error(`Expected ${actual} to equal ${expected}`);\n}","map":{"version":3,"sources":["../src/testsuite.ts"],"names":[],"mappings":";;;;;;;AAYO,eAAe,qBAAf,CACL,aADK,EAEL,IAFK,EAEsB;AAG3B,QAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,EAA2B,OAA3B,CAAN;AACA,EAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,CAAP,EAAmC,OAAnC,CAAX;AACA,EAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP,EAAqC,SAArC,CAAX;AAGA,QAAM,aAAa,CAAC,GAAd,CAAkB,QAAlB,EAA4B,OAA5B,CAAN;AACA,EAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,QAAlB,CAAP,EAAoC,OAApC,CAAX;AACA,QAAM,aAAa,CAAC,MAAd,CAAqB,QAArB,CAAN;AACA,EAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,QAAlB,CAAP,EAAoC,SAApC,CAAX;;AAEA,MAAI,IAAJ,EAAU;AAER,UAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,EAA2B,GAA3B,EAAgC;AAAE,MAAA,GAAG,EAAE;AAAP,KAAhC,CAAN;AACA,UAAM,aAAa,CAAC,GAAd,CAAkB,MAAlB,EAA0B,GAA1B,EAA+B;AAAE,MAAA,GAAG,EAAE;AAAP,KAA/B,CAAN;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,CAAP,EAAmC,GAAnC,CAAX;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,MAAlB,CAAP,EAAkC,GAAlC,CAAX;AACA,IAAA,IAAI,CAAC,IAAD,CAAJ;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,CAAP,EAAmC,SAAnC,CAAX;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,MAAlB,CAAP,EAAkC,GAAlC,CAAX;AACA,IAAA,IAAI,CAAC,IAAD,CAAJ;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,OAAlB,CAAP,EAAmC,SAAnC,CAAX;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,MAAlB,CAAP,EAAkC,SAAlC,CAAX;AAGA,UAAM,aAAa,CAAC,GAAd,CAAkB,SAAlB,EAA6B,OAA7B,EAAsC;AAAE,MAAA,GAAG,EAAE;AAAP,KAAtC,CAAN;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP,EAAqC,OAArC,CAAX;AACA,IAAA,IAAI,CAAC,IAAD,CAAJ;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP,EAAqC,OAArC,CAAX;AACA,IAAA,IAAI,CAAC,IAAD,CAAJ;AACA,IAAA,WAAW,CAAC,MAAM,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP,EAAqC,OAArC,CAAX;AACD;AACF;;AApCD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAsCA,SAAS,WAAT,CAAwB,MAAxB,EAAmC,QAAnC,EAA8C;AAC5C,MAAI,MAAM,KAAK,QAAf,EAAyB;AACvB;AACD;;AACD,QAAM,KAAK,CAAC,YAAY,MAAM,aAAa,QAAQ,EAAxC,CAAX;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runKeyValueCacheTests = void 0;\nasync function runKeyValueCacheTests(keyValueCache, tick) {\n    await keyValueCache.set('hello', 'world');\n    assertEqual(await keyValueCache.get('hello'), 'world');\n    assertEqual(await keyValueCache.get('missing'), undefined);\n    await keyValueCache.set('hello2', 'world');\n    assertEqual(await keyValueCache.get('hello2'), 'world');\n    await keyValueCache.delete('hello2');\n    assertEqual(await keyValueCache.get('hello2'), undefined);\n    if (tick) {\n        await keyValueCache.set('short', 's', { ttl: 1 });\n        await keyValueCache.set('long', 'l', { ttl: 5 });\n        assertEqual(await keyValueCache.get('short'), 's');\n        assertEqual(await keyValueCache.get('long'), 'l');\n        tick(1500);\n        assertEqual(await keyValueCache.get('short'), undefined);\n        assertEqual(await keyValueCache.get('long'), 'l');\n        tick(4000);\n        assertEqual(await keyValueCache.get('short'), undefined);\n        assertEqual(await keyValueCache.get('long'), undefined);\n        await keyValueCache.set('forever', 'yours', { ttl: null });\n        assertEqual(await keyValueCache.get('forever'), 'yours');\n        tick(1500);\n        assertEqual(await keyValueCache.get('forever'), 'yours');\n        tick(4000);\n        assertEqual(await keyValueCache.get('forever'), 'yours');\n    }\n}\nexports.runKeyValueCacheTests = runKeyValueCacheTests;\nfunction assertEqual(actual, expected) {\n    if (actual === expected) {\n        return;\n    }\n    throw Error(`Expected ${actual} to equal ${expected}`);\n}\n//# sourceMappingURL=testsuite.js.map"]},"metadata":{},"sourceType":"script"}