{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaReporter = exports.schemaReportGql = void 0;\n\nconst gql_1 = require(\"../../gql\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst graphql_1 = require(\"graphql\");\n\nexports.schemaReportGql = (0, graphql_1.print)((0, gql_1.gql)`\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`);\n\nclass SchemaReporter {\n  constructor(options) {\n    var _a;\n\n    this.headers = new apollo_server_env_1.Headers();\n    this.headers.set('Content-Type', 'application/json');\n    this.headers.set('x-api-key', options.apiKey);\n    this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n    this.headers.set('apollographql-client-version', require('../../../package.json').version);\n    this.endpointUrl = options.endpointUrl || 'https://schema-reporting.api.apollographql.com/api/graphql';\n    this.schemaReport = options.schemaReport;\n    this.coreSchema = options.coreSchema;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    this.fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n  }\n\n  stopped() {\n    return this.isStopped;\n  }\n\n  start() {\n    this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n  }\n\n  stop() {\n    this.isStopped = true;\n\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n\n  async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n    this.pollTimer = undefined;\n    if (this.stopped()) return;\n\n    try {\n      const result = await this.reportSchema(sendNextWithCoreSchema);\n\n      if (!result) {\n        return;\n      }\n\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n      }\n\n      return;\n    } catch (error) {\n      this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n      }\n    }\n  }\n\n  async reportSchema(withCoreSchema) {\n    const {\n      data,\n      errors\n    } = await this.apolloQuery({\n      report: this.schemaReport,\n      coreSchema: withCoreSchema ? this.coreSchema : null\n    });\n\n    if (errors) {\n      throw new Error(errors.map(x => x.message).join('\\n'));\n    }\n\n    function msgForUnexpectedResponse(data) {\n      return ['Unexpected response shape from Apollo when', 'reporting schema. If this continues, please reach', 'out to support@apollographql.com.', 'Received response:', JSON.stringify(data)].join(' ');\n    }\n\n    if (!data || !data.reportSchema) {\n      throw new Error(msgForUnexpectedResponse(data));\n    }\n\n    if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n      return data.reportSchema;\n    } else if (data.reportSchema.__typename === 'ReportSchemaError') {\n      this.logger.error(['Received input validation error from Apollo:', data.reportSchema.message, 'Stopping reporting. Please fix the input errors.'].join(' '));\n      this.stop();\n      return null;\n    }\n\n    throw new Error(msgForUnexpectedResponse(data));\n  }\n\n  async apolloQuery(variables) {\n    const request = {\n      query: exports.schemaReportGql,\n      variables\n    };\n    const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request)\n    });\n    const httpResponse = await this.fetcher(httpRequest);\n\n    if (!httpResponse.ok) {\n      throw new Error([`An unexpected HTTP status code (${httpResponse.status}) was`, 'encountered during schema reporting.'].join(' '));\n    }\n\n    try {\n      return await httpResponse.json();\n    } catch (error) {\n      throw new Error([\"Couldn't report schema to Apollo.\", 'Parsing response as JSON failed.', 'If this continues please reach out to support@apollographql.com', error].join(' '));\n    }\n  }\n\n}\n\nexports.SchemaReporter = SchemaReporter;","map":{"version":3,"sources":["../../../src/plugin/schemaReporting/schemaReporter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaReporter = exports.schemaReportGql = void 0;\nconst gql_1 = require(\"../../gql\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst graphql_1 = require(\"graphql\");\nexports.schemaReportGql = (0, graphql_1.print)((0, gql_1.gql) `\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`);\nclass SchemaReporter {\n    constructor(options) {\n        var _a;\n        this.headers = new apollo_server_env_1.Headers();\n        this.headers.set('Content-Type', 'application/json');\n        this.headers.set('x-api-key', options.apiKey);\n        this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n        this.headers.set('apollographql-client-version', require('../../../package.json').version);\n        this.endpointUrl =\n            options.endpointUrl ||\n                'https://schema-reporting.api.apollographql.com/api/graphql';\n        this.schemaReport = options.schemaReport;\n        this.coreSchema = options.coreSchema;\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n        this.fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n    }\n    stopped() {\n        return this.isStopped;\n    }\n    start() {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n    }\n    stop() {\n        this.isStopped = true;\n        if (this.pollTimer) {\n            clearTimeout(this.pollTimer);\n            this.pollTimer = undefined;\n        }\n    }\n    async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n        this.pollTimer = undefined;\n        if (this.stopped())\n            return;\n        try {\n            const result = await this.reportSchema(sendNextWithCoreSchema);\n            if (!result) {\n                return;\n            }\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n            }\n            return;\n        }\n        catch (error) {\n            this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n            }\n        }\n    }\n    async reportSchema(withCoreSchema) {\n        const { data, errors } = await this.apolloQuery({\n            report: this.schemaReport,\n            coreSchema: withCoreSchema ? this.coreSchema : null,\n        });\n        if (errors) {\n            throw new Error(errors.map((x) => x.message).join('\\n'));\n        }\n        function msgForUnexpectedResponse(data) {\n            return [\n                'Unexpected response shape from Apollo when',\n                'reporting schema. If this continues, please reach',\n                'out to support@apollographql.com.',\n                'Received response:',\n                JSON.stringify(data),\n            ].join(' ');\n        }\n        if (!data || !data.reportSchema) {\n            throw new Error(msgForUnexpectedResponse(data));\n        }\n        if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n            return data.reportSchema;\n        }\n        else if (data.reportSchema.__typename === 'ReportSchemaError') {\n            this.logger.error([\n                'Received input validation error from Apollo:',\n                data.reportSchema.message,\n                'Stopping reporting. Please fix the input errors.',\n            ].join(' '));\n            this.stop();\n            return null;\n        }\n        throw new Error(msgForUnexpectedResponse(data));\n    }\n    async apolloQuery(variables) {\n        const request = {\n            query: exports.schemaReportGql,\n            variables,\n        };\n        const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(request),\n        });\n        const httpResponse = await this.fetcher(httpRequest);\n        if (!httpResponse.ok) {\n            throw new Error([\n                `An unexpected HTTP status code (${httpResponse.status}) was`,\n                'encountered during schema reporting.',\n            ].join(' '));\n        }\n        try {\n            return await httpResponse.json();\n        }\n        catch (error) {\n            throw new Error([\n                \"Couldn't report schema to Apollo.\",\n                'Parsing response as JSON failed.',\n                'If this continues please reach out to support@apollographql.com',\n                error,\n            ].join(' '));\n        }\n    }\n}\nexports.SchemaReporter = SchemaReporter;\n//# sourceMappingURL=schemaReporter.js.map"]},"metadata":{},"sourceType":"script"}