{"ast":null,"code":"// https://github.com/Ethan-Arrowood/undici-fetch\n'use strict';\n\nconst {\n  Response,\n  makeNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response');\n\nconst {\n  Headers\n} = require('./headers');\n\nconst {\n  Request,\n  makeRequest\n} = require('./request');\n\nconst zlib = require('zlib');\n\nconst {\n  ServiceWorkerGlobalScope,\n  Window,\n  matchRequestIntegrity,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  makeTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime\n} = require('./util');\n\nconst {\n  kState,\n  kHeaders,\n  kGuard,\n  kRealm\n} = require('./symbols');\n\nconst {\n  AbortError\n} = require('../core/errors');\n\nconst assert = require('assert');\n\nconst {\n  safelyExtractBody,\n  cancelBody\n} = require('./body');\n\nconst {\n  redirectStatus,\n  nullBodyStatus,\n  safeMethods,\n  requestBodyHeader,\n  subresource\n} = require('./constants');\n\nconst {\n  kHeadersList\n} = require('../core/symbols');\n\nconst EE = require('events');\n\nconst {\n  PassThrough,\n  pipeline,\n  compose\n} = require('stream');\n\nlet ReadableStream; // https://fetch.spec.whatwg.org/#garbage-collection\n\nconst registry = new FinalizationRegistry(abort => {\n  abort();\n}); // https://fetch.spec.whatwg.org/#fetch-method\n\nasync function fetch() {\n  if (arguments.length < 1) {\n    throw new TypeError(`Failed to execute 'fetch' on 'Window': 1 argument required, but only ${arguments.length} present.`);\n  }\n\n  if (arguments.length >= 1 && typeof (arguments.length <= 1 ? undefined : arguments[1]) !== 'object' && (arguments.length <= 1 ? undefined : arguments[1]) !== undefined) {\n    throw new TypeError(\"Failed to execute 'fetch' on 'Window': cannot convert to dictionary.\");\n  }\n\n  const resource = arguments.length <= 0 ? undefined : arguments[0];\n  const init = arguments.length >= 1 ? (arguments.length <= 1 ? undefined : arguments[1]) ?? {} : {};\n  const context = Object.assign(new EE(), {\n    dispatcher: this,\n    terminated: false,\n    connection: null,\n    dump: false,\n\n    terminate() {\n      let {\n        reason,\n        aborted\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.terminated) {\n        return;\n      }\n\n      if (this.connection) {\n        this.connection.destroy();\n        this.connection = null;\n      }\n\n      this.terminated = {\n        aborted\n      };\n      this.emit('terminated', reason);\n    }\n\n  }); // 1. Let p be a new promise.\n\n  const p = createDeferredPromise(); // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n\n  const requestObject = new Request(resource, init); // 3. Let request be requestObject’s request.\n\n  const request = requestObject[kState]; // 4. If requestObject’s signal’s aborted flag is set, then:\n\n  if (requestObject.signal.aborted) {\n    // 1. Abort fetch with p, request, and null.\n    abortFetch.call(context, p, request, null); // 2. Return p.\n\n    return p.promise;\n  } // 5. Let globalObject be request’s client’s global object.\n  // TODO: What if request.client is null?\n\n\n  const globalObject = request.client?.globalObject; // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n\n  if (globalObject instanceof ServiceWorkerGlobalScope) {\n    request.serviceWorkers = 'none';\n  } // 7. Let responseObject be null.\n\n\n  let responseObject = null; // 8. Let relevantRealm be this’s relevant Realm.\n\n  const relevantRealm = null; // 9. Let locallyAborted be false.\n\n  let locallyAborted = false; // 10. Add the following abort steps to requestObject’s signal:\n\n  requestObject.signal.addEventListener('abort', () => {\n    // 1. Set locallyAborted to true.\n    locallyAborted = true; // 2. Abort fetch with p, request, and responseObject.\n\n    abortFetch.call(context, p, request, responseObject); // 3. Terminate the ongoing fetch with the aborted flag set.\n\n    context.terminate({\n      aborted: true\n    });\n  }, {\n    once: true\n  }); // 11. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n\n  const handleFetchDone = response => finalizeAndReportTiming(response, 'fetch'); // 12. Fetch request with processResponseDone set to handleFetchDone,\n  // and processResponse given response being these substeps:\n\n\n  const processResponse = response => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return;\n    } // 2. If response’s aborted flag is set, then abort fetch with p,\n    // request, and responseObject, and terminate these substeps.\n\n\n    if (response.aborted) {\n      abortFetch.call(context, p, request, responseObject);\n      return;\n    } // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n\n\n    if (response.type === 'error') {\n      p.reject(Object.assign(new TypeError('fetch failed'), {\n        cause: response.error\n      }));\n      return;\n    } // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n\n\n    responseObject = new Response();\n    responseObject[kState] = response;\n    responseObject[kRealm] = relevantRealm;\n    responseObject[kHeaders][kHeadersList] = response.headersList;\n    responseObject[kHeaders][kGuard] = 'immutable';\n    responseObject[kHeaders][kRealm] = relevantRealm; // 5. Resolve p with responseObject.\n\n    p.resolve(responseObject);\n  };\n\n  fetching.call(context, {\n    request,\n    processResponseDone: handleFetchDone,\n    processResponse\n  }).catch(err => {\n    p.reject(err);\n  }); // 13. Return p.\n\n  return p.promise;\n}\n\nfunction finalizeAndReportTiming(response) {\n  let initiatorType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n\n  // 1. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return;\n  } // 2. Let originalURL be response’s URL list[0].\n\n\n  const originalURL = response.urlList[0]; // 3. Let timingInfo be response’s timing info.\n\n  let timingInfo = response.timingInfo; // 4. Let cacheState be response’s cache state.\n\n  let cacheState = response.cacheState; // 5. If timingInfo is null, then return.\n\n  if (timingInfo === null) {\n    return;\n  } // 6. If response’s timing allow passed flag is not set, then:\n\n\n  if (!timingInfo.timingAllowPassed) {\n    //  1. Set timingInfo to a new fetch timing info whose start time and\n    //  post-redirect start time are timingInfo’s start time.\n    timingInfo = makeTimingInfo({\n      startTime: timingInfo.startTime,\n      postRedirectStartTime: timingInfo.postRedirectStartTime\n    }); //  2. Set cacheState to the empty string.\n\n    cacheState = '';\n  } // 7. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n\n\n  response.timingInfo.endTime = coarsenedSharedCurrentTime(); // 8. Set response’s timing info to timingInfo.\n\n  response.timingInfo = timingInfo; // 9. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n\n  markResourceTiming(timingInfo, originalURL, initiatorType, global, cacheState);\n} // https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\n\n\nfunction markResourceTiming() {// TODO\n} // https://fetch.spec.whatwg.org/#abort-fetch\n\n\nfunction abortFetch(p, request, responseObject) {\n  const context = this; // 1. Let error be an \"AbortError\" DOMException.\n\n  const error = new AbortError(); // 2. Reject promise with error.\n\n  p.reject(error); // 3. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n\n  if (request.body !== null) {\n    cancelBody(request.body, error);\n  } // 4. If responseObject is null, then return.\n\n\n  if (responseObject == null) {\n    return;\n  } // 5. Let response be responseObject’s response.\n\n\n  const response = responseObject[kState]; // 6. If response’s body is not null and is readable, then error response’s\n  // body with error.\n\n  if (response.body != null) {\n    context.connection.destroy(error);\n  }\n} // https://fetch.spec.whatwg.org/#fetching\n\n\nfunction fetching(_ref) {\n  let {\n    request,\n    processResponse,\n    processResponseDone\n  } = _ref;\n  // 1. Let taskDestination be null.\n  let taskDestination = null; // 2. Let crossOriginIsolatedCapability be false.\n\n  let crossOriginIsolatedCapability = false; // 3. If request’s client is non-null, then:\n\n  if (request.client !== null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject; // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n\n    crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n  } // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n\n\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n  const timingInfo = makeTimingInfo({\n    startTime: currenTime,\n    postRedirectStartTime: currenTime\n  }); // 6. Let fetchParams be a new fetch params whose request is request, timing\n  // info is timingInfo, process request body is processRequestBody,\n  // process request end-of-body is processRequestEndOfBody, process response\n  // is processResponse, process response end-of-body is\n  // processResponseEndOfBody, process response done is processResponseDone,\n  // task destination is taskDestination, and cross-origin isolated capability\n  // is crossOriginIsolatedCapability.\n\n  const fetchParams = {\n    request,\n    timingInfo,\n    processRequestBody: null,\n    processRequestEndOfBody: null,\n    processResponse,\n    processResponseEndOfBody: null,\n    processResponseDone,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }; // 7. If request’s body is a byte sequence, then set request’s body to the\n  // first return value of safely extracting request’s body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n\n  assert(!request.body || request.body.stream); // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window = request.client?.globalObject instanceof Window ? request.client : 'no-window';\n  } // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n\n\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin;\n  } // 10. If request’s policy container is \"client\", then:\n\n\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client !== null) {\n      request.policyContainer = clonePolicyContainer(request.client.policyContainer);\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer();\n    }\n  } // 11. If request’s header list does not contain `Accept`, then:\n\n\n  if (!request.headersList.has('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'; // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n    // 3. Append `Accept`/value to request’s header list.\n\n    request.headersList.append('accept', value); // 12. If request’s header list does not contain `Accept-Language`, then\n    // user agents should append `Accept-Language`/an appropriate value to\n    // request’s header list.\n\n    if (!request.headersList.has('accept-language')) {\n      request.headersList.append('accept-language', '*');\n    }\n  } // 13. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n\n\n  if (request.priority === null) {// TODO\n  } // 14. If request is a subresource request, then:\n\n\n  if (subresource.includes(request.destination)) {// 1. Let record be a new fetch record consisting of request and this\n    // instance of the fetch algorithm.\n    // TODO\n    // 2. Append record to request’s client’s fetch group list of fetch\n    // records.\n    // TODO\n  } // 15. Run main fetch given fetchParams.\n\n\n  return mainFetch.call(this, fetchParams);\n} // https://fetch.spec.whatwg.org/#concept-main-fetch\n\n\nasync function mainFetch(fetchParams) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const context = this; // 1. Let request be fetchParams’s request.\n\n  const request = fetchParams.request; // 2. Let response be null.\n\n  let response = null; // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n\n  if (request.localURLsOnly && !/^(about|blob|data):/.test(requestCurrentURL(request).protocol)) {\n    return makeNetworkError('local URLs only');\n  } // 4. Run report Content Security Policy violations for request.\n  // TODO\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n\n\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request); // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n\n  if (requestBadPort(request) === 'blocked') {\n    return makeNetworkError('bad port');\n  } // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n\n\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy;\n  } // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n\n\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request);\n  } // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n\n\n  if (response === null) {\n    response = await (async () => {\n      // - request’s current URL’s origin is same origin with request’s origin,\n      // and request’s response tainting is \"basic\"\n      // - request’s current URL’s scheme is \"data\"\n      // - request’s mode is \"navigate\" or \"websocket\"\n      //    1. Set request’s response tainting to \"basic\".\n      //    2. Return the result of running scheme fetch given fetchParams.\n      // TODO\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"');\n      } // request’s mode is \"no-cors\"\n\n\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError('redirect cmode cannot be \"follow\" for \"no-cors\" request');\n        } // 2. Set request’s response tainting to \"opaque\".\n\n\n        request.responseTainting = 'opaque'; // 3. Let noCorsResponse be the result of running scheme fetch given\n        // fetchParams.\n        // TODO\n        // 4. If noCorsResponse is a filtered response or the CORB check with\n        // request and noCorsResponse returns allowed, then return noCorsResponse.\n        // TODO\n        // 5. Return a new response whose status is noCorsResponse’s status.\n        // TODO\n      } // request’s current URL’s scheme is not an HTTP(S) scheme\n\n\n      if (!/^https?:/.test(requestCurrentURL(request).protocol)) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n      } // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n\n\n      request.responseTainting = 'cors'; //    2. Return the result of running HTTP fetch given fetchParams.\n\n      return await httpFetch.call(this, fetchParams).catch(err => makeNetworkError(err));\n    })();\n  } // 12. If recursive is true, then return response.\n\n\n  if (recursive) {\n    return response;\n  } // 13. If response is not a network error and response is not a filtered\n  // response, then:\n\n\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {// 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    } // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n\n\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic');\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors');\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque');\n    } else {\n      assert(false);\n    }\n  } // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n\n\n  let internalResponse = response.status === 0 ? response : response.internalResponse; // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList);\n  } // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n\n\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true;\n  } // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n\n\n  if (response.type === 'opaque' && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.has('range')) {\n    response = internalResponse = makeNetworkError();\n  } // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n\n\n  if (response.status !== 0 && (request.method === 'HEAD' || request.method === 'CONNECT' || nullBodyStatus.includes(internalResponse.status))) {\n    internalResponse.body = null;\n    context.connection.dump = true;\n  } // 20. If request’s integrity metadata is not the empty string, then:\n\n\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = reason => fetchFinale(fetchParams, makeNetworkError(reason)); // 2. If request’s response tainting is \"opaque\", response is a network\n    // error, or response’s body is null, then run processBodyError and abort\n    // these steps.\n\n\n    if (request.responseTainting === 'opaque' && response.status === 0) {\n      processBodyError(response.error);\n      return;\n    } // 3. Let processBody given bytes be these steps:\n\n\n    const processBody = bytes => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!matchRequestIntegrity(request, bytes)) {\n        processBodyError('integrity mismatch');\n        return;\n      } // 2. Set response’s body to the first return value of safely\n      // extracting bytes.\n\n\n      response.body = safelyExtractBody(bytes)[0]; // 3. Run fetch finale given fetchParams and response.\n\n      fetchFinale(fetchParams, response);\n    }; // 4. Fully read response’s body given processBody and processBodyError.\n\n\n    try {\n      processBody(await response.arrayBuffer());\n    } catch (err) {\n      processBodyError(err);\n    }\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response);\n  }\n} // https://fetch.spec.whatwg.org/#finalize-response\n\n\nfunction finalizeResponse(fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true; // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n\n  if (fetchParams.processResponseDone !== null) {\n    fetchParams.processResponseDone(response);\n  }\n} // https://fetch.spec.whatwg.org/#fetch-finale\n\n\nfunction fetchFinale(fetchParams, response) {\n  const context = this; // 1. If fetchParams’s process response is non-null,\n  // then queue a fetch task to run fetchParams’s process response\n  // given response, with fetchParams’s task destination.\n\n  if (fetchParams.processResponse !== null) {\n    fetchParams.processResponse(response);\n  } // 2. If fetchParams’s process response end-of-body is non-null, then:.\n  //    TODO\n  //    1. Let processBody given nullOrBytes be this step: run fetchParams’s\n  //    process response end-of-body given response and nullOrBytes.on.\n  //    TODO\n  //    2. Let processBodyError be this step: run fetchParams’s process\n  //    response end-of-body given response and failure.on.\n  //    TODO\n  //    3. If response’s body is null, then queue a fetch task to run\n  //    processBody given null, with fetchParams’s task destination.on.\n  //    TODO\n  //    4. Otherwise, fully read response’s body given processBody,\n  //    processBodyError, and fetchParams’s task destination.on.\n  //    TODO\n  // TODO (spec): The spec doesn't specify this but we need to\n  // terminate fetch if we have an error response.\n\n\n  if (response.type === 'error') {\n    context.terminate({\n      reason: response.error\n    });\n  }\n} // https://fetch.spec.whatwg.org/#http-fetch\n\n\nasync function httpFetch(fetchParams) {\n  const context = this; // 1. Let request be fetchParams’s request.\n\n  const request = fetchParams.request; // 2. Let response be null.\n\n  let response = null; // 3. Let actualResponse be null.\n\n  let actualResponse = null; // 4. Let timingInfo be fetchParams’s timing info.\n\n  const timingInfo = fetchParams.timingInfo; // 5. If request’s service-workers mode is \"all\", then:\n\n  if (request.serviceWorkers === 'all') {// TODO\n  } // 6. If response is null, then:\n\n\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none';\n    } // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n\n\n    actualResponse = response = await httpNetworkOrCacheFetch.call(this, fetchParams); // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n\n    if (request.responseTainting === 'cors' && corsCheck(request, response) === 'failure') {\n      return makeNetworkError('cors failure');\n    } // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n\n\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true;\n    }\n  } // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n\n\n  if ((request.responseTainting === 'opaque' || response.type === 'opaque') && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === 'blocked') {\n    return makeNetworkError('blocked');\n  } // 8. If actualResponse’s status is a redirect status, then:\n\n\n  if (redirectStatus.includes(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    context.connection.destroy(); // 2. Switch on request’s redirect mode:\n\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError();\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      response = filterResponse(actualResponse, 'opaqueredirect');\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch.call(this, fetchParams, response);\n    } else {\n      assert(false);\n    }\n  } // 9. Set response’s timing info to timingInfo.\n\n\n  response.timingInfo = timingInfo; // 10. Return response.\n\n  return response;\n} // https://fetch.spec.whatwg.org/#http-redirect-fetch\n\n\nasync function httpRedirectFetch(fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request; // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n\n  const actualResponse = response.internalResponse ? response.internalResponse : response; // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n\n  let locationURL;\n\n  try {\n    locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash); // 4. If locationURL is null, then return response.\n\n    if (locationURL == null) {\n      return response;\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return makeNetworkError(err);\n  } // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n\n\n  if (!/^https?:/.test(locationURL.protocol)) {\n    return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n  } // 7. If request’s redirect count is twenty, return a network error.\n\n\n  if (request.redirectCount === 20) {\n    return makeNetworkError('redirect count exceeded');\n  } // 8. Increase request’s redirect count by one.\n\n\n  request.redirectCount += 1; // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n\n  if (request.mode === 'cors' && (locationURL.username || locationURL.password) && request.origin !== locationURL.origin) {\n    return makeNetworkError('cross origin not allowed for request mode \"cors\"');\n  } // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n\n\n  if (request.responseTainting === 'cors' && (locationURL.username || locationURL.password)) {\n    return makeNetworkError('URL cannot contain credentials for request mode \"cors\"');\n  } // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n\n\n  if (actualResponse.status !== 303 && request.body !== null && request.body.source == null) {\n    return makeNetworkError();\n  } // 12. If locationURL’s origin is not same origin with request’s current URL’s\n  // origin and request’s origin is not same origin with request’s current\n  // URL’s origin, then set request’s tainted origin flag.\n\n\n  if (locationURL.origin !== requestCurrentURL(request).origin && request.origin !== locationURL.origin) {\n    request.taintedOrigin = true;\n  } // 13. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n\n\n  if ([301, 302].includes(actualResponse.status) && request.method === 'POST' || actualResponse.status === 303 && !['GET', 'HEADER'].includes(request.method)) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET';\n    request.body = null; // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName);\n    }\n  } // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n\n\n  if (request.body !== null) {\n    assert(request.body.source);\n    request.body = safelyExtractBody(request.body.source)[0];\n  } // 15. Let timingInfo be fetchParams’s timing info.\n\n\n  const timingInfo = fetchParams.timingInfo; // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability); // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime;\n  } // 18. Append locationURL to request’s URL list.\n\n\n  request.urlList.push(locationURL); // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n\n  setRequestReferrerPolicyOnRedirect(request, actualResponse); // 20. Return the result of running main fetch given fetchParams and true.\n\n  return mainFetch.call(this, fetchParams, true);\n} // https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\n\n\nasync function httpNetworkOrCacheFetch(fetchParams) {\n  let isAuthenticationFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let isNewConnectionFetch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const context = this; // 1. Let request be fetchParams’s request.\n\n  const request = fetchParams.request; // 2. Let httpFetchParams be null.\n\n  let httpFetchParams = null; // 3. Let httpRequest be null.\n\n  let httpRequest = null; // 4. Let response be null.\n\n  let response = null; // 5. Let storedResponse be null.\n  // TODO: cache\n  // 6. Let httpCache be null.\n\n  const httpCache = null; // 7. Let the revalidatingFlag be unset.\n\n  const revalidatingFlag = false; // 8. Run these steps, but abort when the ongoing fetch is terminated:\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams;\n    httpRequest = request;\n  } else {\n    // Otherwise:\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request); // 2. Set httpFetchParams to a copy of fetchParams.\n\n    httpFetchParams = { ...fetchParams\n    }; // 3. Set httpFetchParams’s request to httpRequest.\n\n    httpFetchParams.request = httpRequest;\n  } //    3. Let includeCredentials be true if one of\n\n\n  const includeCredentials = request.credentials === 'include' || request.credentials === 'same-origin' && request.responseTainting === 'basic'; //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n\n  const contentLength = httpRequest.body ? httpRequest.body.length : null; //    5. Let contentLengthHeaderValue be null.\n\n  let contentLengthHeaderValue = null; //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n\n  if (httpRequest.body == null && ['POST', 'PUT'].includes(httpRequest.method)) {\n    contentLengthHeaderValue = '0';\n  } //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n\n\n  if (contentLength !== null) {\n    // TODO: isomorphic encoded\n    contentLengthHeaderValue = String(contentLength);\n  } //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n\n\n  if (contentLengthHeaderValue !== null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue);\n  } //    9. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n\n\n  if (contentLength !== null && httpRequest.keepalive) {// NOTE: keepalive is a noop outside of browser context.\n  } //    10 .If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n\n\n  if (httpRequest.referrer instanceof URL) {\n    // TODO: isomorphic encoded\n    httpRequest.headersList.append('referer', httpRequest.referrer.href);\n  } //    11. Append a request `Origin` header for httpRequest.\n\n\n  appendRequestOriginHeader(httpRequest); //    12. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n\n  appendFetchMetadata(httpRequest); //    13. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n\n  if (!httpRequest.headersList.has('user-agent')) {\n    httpRequest.headersList.append('user-agent', 'undici');\n  } //    14. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n\n\n  if (httpRequest.cache === 'default' && (httpRequest.headersList.has('if-modified-since') || httpRequest.headersList.has('if-none-match') || httpRequest.headersList.has('if-unmodified-since') || httpRequest.headersList.has('if-match') || httpRequest.headersList.has('if-range'))) {\n    httpRequest.cache = 'no-store';\n  } //    15. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n\n\n  if (httpRequest.cache === 'no-cache' && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.has('cache-control')) {\n    httpRequest.headersList.append('cache-control', 'max-age=0');\n  } //    16. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n\n\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.has('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache');\n    } // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n\n\n    if (!httpRequest.headersList.has('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache');\n    }\n  } //    17. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n\n\n  if (httpRequest.headersList.has('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity');\n  } //    18. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n\n\n  if (!httpRequest.headersList.has('accept-encoding')) {\n    if (/^https:/.test(requestCurrentURL(httpRequest).protocol)) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate');\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate');\n    }\n  } //    19. If includeCredentials is true, then:\n\n\n  if (includeCredentials) {// 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  } //    20. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n  //    21. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n  //    22. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n\n\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store';\n  } //    23. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n\n\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {// TODO: cache\n  } // 9. If aborted, then:\n  // TODO\n  // 10. If response is null, then:\n\n\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached');\n    } // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n\n\n    const forwardResponse = await httpNetworkFetch.call(this, httpFetchParams, includeCredentials, isNewConnectionFetch); // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n\n    if (!safeMethods.includes(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {// TODO: cache\n    } // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n\n\n    if (revalidatingFlag && forwardResponse.status === 304) {// TODO: cache\n    } // 5. If response is null, then:\n\n\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse; // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  } // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n\n\n  response.urlList = [...httpRequest.urlList]; // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n\n  if (httpRequest.headersList.has('range')) {\n    response.rangeRequested = true;\n  } // 13. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n  // 14. If response’s status is 407, then:\n\n\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError();\n    } // 2. ???\n    // 3. If the ongoing fetch is terminated, then:\n\n\n    if (context.terminated) {\n      // 1. Let aborted be the termination’s aborted flag.\n      // 2. If aborted is set, then return an aborted network error.\n      // 3. Return a network error.\n      return makeNetworkError(context.terminated.aborted ? new AbortError() : null);\n    } // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n\n\n    return makeNetworkError('proxy authentication required');\n  } // 15. If all of the following are true\n\n\n  if ( // response’s status is 421\n  response.status === 421 && // isNewConnectionFetch is false\n  !isNewConnectionFetch && ( // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n  request.body == null || request.body.source !== null)) {\n    // then:\n    // 1. If the ongoing fetch is terminated, then:\n    if (context.terminated) {\n      // 1. Let aborted be the termination’s aborted flag.\n      const aborted = context.terminated.aborted; // 2. If aborted is set, then return an aborted network error.\n\n      const reason = aborted ? new AbortError() : new Error('terminated'); // 3. Return a network error.\n\n      return makeNetworkError(reason);\n    } // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n\n\n    context.connection.destroy();\n    response = await httpNetworkOrCacheFetch.call(this, fetchParams, isAuthenticationFetch, true);\n  } // 16. If isAuthenticationFetch is true, then create an authentication entry\n\n\n  if (isAuthenticationFetch) {// TODO\n  } // 17. Return response.\n\n\n  return response;\n} // https://fetch.spec.whatwg.org/#http-network-fetch\n\n\nfunction httpNetworkFetch(fetchParams) {\n  let includeCredentials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let forceNewConnection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const context = this;\n  return new Promise(resolve => {\n    assert(!context.connection || context.connection.destroyed);\n    const connection = context.connection = {\n      abort: null,\n      controller: null,\n      destroyed: false,\n      errored: false,\n      dump: false,\n\n      destroy(err) {\n        if (this.destroyed) {\n          return;\n        }\n\n        this.destroyed = true;\n\n        if (this.abort) {\n          this.abort();\n          this.abort = null;\n        }\n\n        if (err) {\n          this.errored = err;\n        }\n\n        if (this.controller) {\n          try {\n            this.controller.error(err ?? new AbortError());\n            this.controller = null;\n          } catch (err) {\n            // Will throw TypeError if body is not readable.\n            if (err.name !== 'TypeError') {\n              throw err;\n            }\n          }\n        }\n      }\n\n    }; // 1. Let request be fetchParams’s request.\n\n    const request = fetchParams.request; // 2. Let response be null.\n\n    let response = null; // 3. Let timingInfo be fetchParams’s timing info.\n\n    const timingInfo = fetchParams.timingInfo; // 4. Let httpCache be the result of determining the HTTP cache partition,\n    // given request.\n    // TODO: cache\n\n    const httpCache = null; // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n\n    if (httpCache == null) {\n      request.cache = 'no-store';\n    } // 6. Let networkPartitionKey be the result of determining the network\n    // partition key given request.\n    // TODO\n    // 7. Switch on request’s mode:\n\n\n    if (request.mode === 'websocket') {// Let connection be the result of obtaining a WebSocket connection,\n      // given request’s current URL.\n      // TODO\n    } else {// Let connection be the result of obtaining a connection, given\n      // networkPartitionKey, request’s current URL’s origin,\n      // includeCredentials, and forceNewConnection.\n      // TODO\n    } // 8. Run these steps, but abort when the ongoing fetch is terminated:\n    // TODO: When do we cleanup this listener?\n\n\n    context.on('terminated', onRequestAborted); //    5. Set response to the result of making an HTTP request over connection\n    //    using request with the following caveats:\n    //    Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n    //    [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n    //    If request’s body is non-null, and request’s body’s source is null,\n    //    then the user agent may have a buffer of up to 64 kibibytes and store\n    //    a part of request’s body in that buffer. If the user agent reads from\n    //    request’s body beyond that buffer’s size and the user agent needs to\n    //    resend request, then instead return a network error.\n    //    TODO\n    //    Set timingInfo’s final network-response start time to the coarsened\n    //    shared current time given fetchParams’s cross-origin isolated capability,\n    //    immediately after the user agent’s HTTP parser receives the first byte\n    //    of the response (e.g., frame header bytes for HTTP/2 or response status\n    //    line for HTTP/1.x).\n    //    TODO\n    //    Wait until all the headers are transmitted.\n    //    Any responses whose status is in the range 100 to 199, inclusive,\n    //    and is not 101, are to be ignored, except for the purposes of setting\n    //    timingInfo’s final network-response start time above.\n    //    If request’s header list contains `Transfer-Encoding`/`chunked` and\n    //    response is transferred via HTTP/1.0 or older, then return a network\n    //    error.\n    //    If the HTTP request results in a TLS client certificate dialog, then:\n    //        1. If request’s window is an environment settings object, make the\n    //        dialog available in request’s window.\n    //        2. Otherwise, return a network error.\n    // To transmit request’s body body, run these steps:\n\n    const body = async function* () {\n      try {\n        // 1. If body is null and fetchParams’s process request end-of-body is\n        // non-null, then queue a fetch task given fetchParams’s process request\n        // end-of-body and fetchParams’s task destination.\n        if (request.body === null) {\n          fetchParams.processEndOfBody?.();\n          return;\n        } // 2. Otherwise, if body is non-null:\n        //    1. Let processBodyChunk given bytes be these steps:\n\n\n        for await (const bytes of request.body.stream) {\n          // 1. If the ongoing fetch is terminated, then abort these steps.\n          if (context.terminated) {\n            return;\n          } // 2. Run this step in parallel: transmit bytes.\n\n\n          yield bytes; // 3. If fetchParams’s process request body is non-null, then run\n          // fetchParams’s process request body given bytes’s length.\n\n          fetchParams.processRequestBody?.(bytes.byteLength);\n        } // 2. Let processEndOfBody be these steps:\n        //    1. If the ongoing fetch is terminated, then abort these steps.\n\n\n        if (context.terminated) {\n          return;\n        } //    2. If fetchParams’s process request end-of-body is non-null,\n        //    then run fetchParams’s process request end-of-body.\n\n\n        fetchParams.processRequestEndOfBody?.();\n      } catch (e) {\n        // 3. Let processBodyError given e be these steps:\n        //    1. If the ongoing fetch is terminated, then abort these steps.\n        if (context.terminated) {\n          return;\n        } //    2. If e is an \"AbortError\" DOMException, then terminate the ongoing fetch with the aborted flag set.\n        //    3. Otherwise, terminate the ongoing fetch.\n\n\n        context.terminate({\n          aborted: e.name === 'AbortError',\n          reason: e\n        });\n      }\n    }(); // 9. If aborted, then:\n\n\n    function onRequestAborted() {\n      // 1. Let aborted be the termination’s aborted flag.\n      const aborted = context.terminated.aborted; // 2. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n\n      connection.destroy(); // 3. If aborted is set, then return an aborted network error.\n\n      const reason = aborted ? new AbortError() : new Error('terminated'); // 4. Return a network error.\n\n      resolve(makeNetworkError(reason));\n    } // 10. Let pullAlgorithm be an action that resumes the ongoing fetch\n    // if it is suspended.\n\n\n    let pullAlgorithm; // 11. Let cancelAlgorithm be an action that terminates the ongoing\n    // fetch with the aborted flag set.\n\n    const cancelAlgorithm = () => {\n      context.terminate({\n        aborted: true\n      });\n    }; // 12. Let highWaterMark be a non-negative, non-NaN number, chosen by\n    // the user agent.\n\n\n    const highWaterMark = 65536; // 13. Let sizeAlgorithm be an algorithm that accepts a chunk object\n    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n    // TODO\n    // 14. Let stream be a new ReadableStream.\n    // 15. Set up stream with pullAlgorithm set to pullAlgorithm,\n    // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n    // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n\n    if (!ReadableStream) {\n      ReadableStream = require('stream/web').ReadableStream;\n    }\n\n    const stream = new ReadableStream({\n      async start(controller) {\n        connection.controller = controller;\n      },\n\n      async pull() {\n        if (pullAlgorithm) {\n          pullAlgorithm();\n        } else {\n          pullAlgorithm = null;\n        }\n      },\n\n      async cancel(reason) {\n        cancelAlgorithm();\n      }\n\n    }, {\n      highWaterMark\n    }); // 16. Run these steps, but abort when the ongoing fetch is terminated:\n    // TODO\n    // 17. If aborted, then:\n    // TODO: How can this happen? The steps above are not async?\n    // 18. Run these steps in parallel:\n    //    1. Run these steps, but abort when the ongoing fetch is terminated:\n    //        1. While true:\n    //            1. If one or more bytes have been transmitted from response’s\n    //            message body, then:\n    //            NOTE: See onHeaders\n    //            2. Otherwise, if the bytes transmission for response’s message\n    //            body is done normally and stream is readable, then close stream,\n    //            finalize response for fetchParams and response, and abort these\n    //            in-parallel steps.\n    //            NOTE: See onHeaders\n    //    2. If aborted, then:\n\n    function onResponseAborted() {\n      // 1. Finalize response for fetchParams and response.\n      finalizeResponse(fetchParams, response); // 2. Let aborted be the termination’s aborted flag.\n\n      const aborted = context.terminated.aborted; // 3. If aborted is set, then:\n\n      if (aborted) {\n        // 1. Set response’s aborted flag.\n        response.aborted = true; // 2. If stream is readable, error stream with an \"AbortError\" DOMException.\n\n        connection.destroy(new AbortError());\n      } else {\n        // 4. Otherwise, if stream is readable, error stream with a TypeError.\n        connection.destroy(new TypeError('terminated'));\n      } // 5. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      // 6. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n\n\n      connection.destroy();\n    } // 19. Return response.\n    // NOTE: See onHeaders\n    // Implementation\n\n\n    const url = requestCurrentURL(request);\n    context.dispatcher.dispatch({\n      path: url.pathname + url.search,\n      origin: url.origin,\n      method: request.method,\n      body,\n      headers: request.headersList,\n      maxRedirections: 0\n    }, {\n      decoder: null,\n\n      onConnect(abort) {\n        if (connection.destroyed) {\n          abort(new AbortError());\n        } else {\n          connection.abort = abort;\n        }\n      },\n\n      onHeaders(status, headersList, resume, statusText) {\n        if (status < 200) {\n          return;\n        }\n\n        const headers = new Headers();\n\n        for (let n = 0; n < headersList.length; n += 2) {\n          headers.append(headersList[n + 0].toString(), headersList[n + 1].toString());\n        }\n\n        const hasPulled = pullAlgorithm !== undefined;\n        const body = {\n          stream\n        };\n        registry.register(body, connection.abort);\n        response = makeResponse({\n          status,\n          statusText,\n          headersList: headers[kHeadersList],\n          body\n        });\n        context.on('terminated', onResponseAborted);\n        const codings = headers.get('content-encoding')?.toLowerCase().split(',').map(x => x.trim()) ?? [];\n        const decoders = []; // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n\n        for (const coding of codings) {\n          if (/(x-)?gzip/.test(coding)) {\n            decoders.push(zlib.createGunzip());\n          } else if (/(x-)?deflate/.test(coding)) {\n            decoders.push(zlib.createInflate());\n          } else if (coding === 'br') {\n            decoders.push(zlib.createBrotliDecompress());\n          } else {\n            decoders.length = 0;\n            break;\n          }\n        }\n\n        let iterator;\n\n        if (decoders.length > 1) {\n          if (compose) {\n            this.decoder = compose(...decoders);\n            iterator = this.decoder[Symbol.asyncIterator]();\n          } else {\n            this.decoder = new PassThrough();\n            iterator = pipeline(this.decoder, ...decoders, () => {})[Symbol.asyncIterator]();\n          }\n        } else if (decoders.length === 1) {\n          this.decoder = decoders[0];\n          iterator = this.decoder[Symbol.asyncIterator]();\n        } else {\n          this.decoder = new PassThrough();\n          iterator = this.decoder[Symbol.asyncIterator]();\n        }\n\n        if (this.decoder) {\n          this.decoder.on('drain', resume);\n        }\n\n        pullAlgorithm = async () => {\n          // 4. Set bytes to the result of handling content codings given\n          // codings and bytes.\n          let bytes;\n\n          try {\n            const {\n              done,\n              value\n            } = await iterator.next();\n            bytes = done ? undefined : value;\n          } catch (err) {\n            if (this.decoder.writableEnded && !timingInfo.encodedBodySize) {\n              // zlib doesn't like empty streams.\n              bytes = undefined;\n            } else {\n              bytes = err;\n            }\n          }\n\n          if (!connection.controller) {\n            return;\n          }\n\n          if (bytes === undefined) {\n            // 2. Otherwise, if the bytes transmission for response’s message\n            // body is done normally and stream is readable, then close\n            // stream, finalize response for fetchParams and response, and\n            // abort these in-parallel steps.\n            finalizeResponse(fetchParams, response);\n            context.off('terminated', onResponseAborted);\n            context.off('terminated', onRequestAborted);\n            connection.controller.close();\n            connection.controller = null;\n            connection.destroy();\n            return;\n          } // 5. Increase timingInfo’s decoded body size by bytes’s length.\n\n\n          timingInfo.decodedBodySize += bytes?.byteLength ?? 0; // 6. If bytes is failure, then terminate the ongoing fetch.\n\n          if (bytes instanceof Error) {\n            context.terminate({\n              reason: bytes\n            });\n            return;\n          } // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n          //  into stream.\n\n\n          connection.controller.enqueue(new Uint8Array(bytes)); // 8. If stream is errored, then terminate the ongoing fetch.\n\n          if (connection.errored) {\n            context.terminate({\n              reason: connection.errored\n            });\n            return;\n          } // 9. If stream doesn’t need more data ask the user agent to suspend\n          //  the ongoing fetch.\n\n\n          return connection.controller.desiredSize > 0;\n        };\n\n        if (hasPulled) {\n          pullAlgorithm();\n        }\n\n        resolve(response);\n        return true;\n      },\n\n      onData(chunk) {\n        if (connection.dump) {\n          return;\n        } //  1. If one or more bytes have been transmitted from response’s\n        //  message body, then:\n        // 1. Let bytes be the transmitted bytes.\n\n\n        const bytes = chunk; // 2. Let codings be the result of extracting header list values\n        // given `Content-Encoding` and response’s header list.\n        // See pullAlgorithm.\n        // 3. Increase timingInfo’s encoded body size by bytes’s length.\n\n        timingInfo.encodedBodySize += bytes.byteLength; // 4. See pullAlgorithm...\n\n        return this.decoder.write(bytes);\n      },\n\n      async onComplete() {\n        this.decoder.end();\n      },\n\n      onError(error) {\n        context.off('terminated', onResponseAborted);\n        context.off('terminated', onRequestAborted);\n        connection.destroy(error);\n        context.terminate({\n          reason: error\n        });\n\n        if (!response) {\n          resolve(makeNetworkError(error));\n        }\n      }\n\n    });\n  });\n}\n\nfunction createDeferredPromise() {\n  let res;\n  let rej;\n  const promise = new Promise((resolve, reject) => {\n    res = resolve;\n    rej = reject;\n  });\n  return {\n    promise,\n    resolve: res,\n    reject: rej\n  };\n}\n\nmodule.exports = fetch;","map":{"version":3,"sources":["/home/cameron/Dev/whoisWrapper/ui/node_modules/undici/lib/fetch/index.js"],"names":["Response","makeNetworkError","filterResponse","makeResponse","require","Headers","Request","makeRequest","zlib","ServiceWorkerGlobalScope","Window","matchRequestIntegrity","makePolicyContainer","clonePolicyContainer","requestBadPort","TAOCheck","appendRequestOriginHeader","responseLocationURL","requestCurrentURL","setRequestReferrerPolicyOnRedirect","tryUpgradeRequestToAPotentiallyTrustworthyURL","makeTimingInfo","appendFetchMetadata","corsCheck","crossOriginResourcePolicyCheck","determineRequestsReferrer","coarsenedSharedCurrentTime","kState","kHeaders","kGuard","kRealm","AbortError","assert","safelyExtractBody","cancelBody","redirectStatus","nullBodyStatus","safeMethods","requestBodyHeader","subresource","kHeadersList","EE","PassThrough","pipeline","compose","ReadableStream","registry","FinalizationRegistry","abort","fetch","length","TypeError","undefined","resource","init","context","Object","assign","dispatcher","terminated","connection","dump","terminate","reason","aborted","destroy","emit","p","createDeferredPromise","requestObject","request","signal","abortFetch","call","promise","globalObject","client","serviceWorkers","responseObject","relevantRealm","locallyAborted","addEventListener","once","handleFetchDone","response","finalizeAndReportTiming","processResponse","type","reject","cause","error","headersList","resolve","fetching","processResponseDone","catch","err","initiatorType","urlList","originalURL","timingInfo","cacheState","timingAllowPassed","startTime","postRedirectStartTime","endTime","markResourceTiming","global","body","taskDestination","crossOriginIsolatedCapability","currenTime","fetchParams","processRequestBody","processRequestEndOfBody","processResponseEndOfBody","stream","window","origin","policyContainer","has","value","append","priority","includes","destination","mainFetch","recursive","localURLsOnly","test","protocol","referrerPolicy","referrer","mode","redirect","responseTainting","httpFetch","status","internalResponse","push","timingAllowFailed","rangeRequested","headers","method","integrity","processBodyError","fetchFinale","processBody","bytes","arrayBuffer","finalizeResponse","done","actualResponse","httpNetworkOrCacheFetch","httpRedirectFetch","locationURL","hash","redirectCount","username","password","source","taintedOrigin","headerName","delete","redirectEndTime","redirectStartTime","isAuthenticationFetch","isNewConnectionFetch","httpFetchParams","httpRequest","httpCache","revalidatingFlag","includeCredentials","credentials","contentLength","contentLengthHeaderValue","String","keepalive","URL","href","cache","preventNoCacheCacheControlHeaderModification","forwardResponse","httpNetworkFetch","Error","forceNewConnection","Promise","destroyed","controller","errored","name","on","onRequestAborted","processEndOfBody","byteLength","e","pullAlgorithm","cancelAlgorithm","highWaterMark","start","pull","cancel","onResponseAborted","url","dispatch","path","pathname","search","maxRedirections","decoder","onConnect","onHeaders","resume","statusText","n","toString","hasPulled","register","codings","get","toLowerCase","split","map","x","trim","decoders","coding","createGunzip","createInflate","createBrotliDecompress","iterator","Symbol","asyncIterator","next","writableEnded","encodedBodySize","off","close","decodedBodySize","enqueue","Uint8Array","desiredSize","onData","chunk","write","onComplete","end","onError","res","rej","module","exports"],"mappings":"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","sourcesContent":["// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst {\n  Response,\n  makeNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response')\nconst { Headers } = require('./headers')\nconst { Request, makeRequest } = require('./request')\nconst zlib = require('zlib')\nconst {\n  ServiceWorkerGlobalScope,\n  Window,\n  matchRequestIntegrity,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  makeTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime\n} = require('./util')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst { AbortError } = require('../core/errors')\nconst assert = require('assert')\nconst { safelyExtractBody, cancelBody } = require('./body')\nconst {\n  redirectStatus,\n  nullBodyStatus,\n  safeMethods,\n  requestBodyHeader,\n  subresource\n} = require('./constants')\nconst { kHeadersList } = require('../core/symbols')\nconst EE = require('events')\nconst { PassThrough, pipeline, compose } = require('stream')\n\nlet ReadableStream\n\n// https://fetch.spec.whatwg.org/#garbage-collection\nconst registry = new FinalizationRegistry((abort) => {\n  abort()\n})\n\n// https://fetch.spec.whatwg.org/#fetch-method\nasync function fetch (...args) {\n  if (args.length < 1) {\n    throw new TypeError(\n      `Failed to execute 'fetch' on 'Window': 1 argument required, but only ${args.length} present.`\n    )\n  }\n  if (\n    args.length >= 1 &&\n    typeof args[1] !== 'object' &&\n    args[1] !== undefined\n  ) {\n    throw new TypeError(\n      \"Failed to execute 'fetch' on 'Window': cannot convert to dictionary.\"\n    )\n  }\n\n  const resource = args[0]\n  const init = args.length >= 1 ? args[1] ?? {} : {}\n\n  const context = Object.assign(new EE(), {\n    dispatcher: this,\n    terminated: false,\n    connection: null,\n    dump: false,\n    terminate ({ reason, aborted } = {}) {\n      if (this.terminated) {\n        return\n      }\n\n      if (this.connection) {\n        this.connection.destroy()\n        this.connection = null\n      }\n\n      this.terminated = { aborted }\n\n      this.emit('terminated', reason)\n    }\n  })\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise()\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  const requestObject = new Request(resource, init)\n\n  // 3. Let request be requestObject’s request.\n  const request = requestObject[kState]\n\n  // 4. If requestObject’s signal’s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort fetch with p, request, and null.\n    abortFetch.call(context, p, request, null)\n\n    // 2. Return p.\n    return p.promise\n  }\n\n  // 5. Let globalObject be request’s client’s global object.\n  // TODO: What if request.client is null?\n  const globalObject = request.client?.globalObject\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n  if (globalObject instanceof ServiceWorkerGlobalScope) {\n    request.serviceWorkers = 'none'\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null\n\n  // 8. Let relevantRealm be this’s relevant Realm.\n  const relevantRealm = null\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false\n\n  // 10. Add the following abort steps to requestObject’s signal:\n  requestObject.signal.addEventListener(\n    'abort',\n    () => {\n      // 1. Set locallyAborted to true.\n      locallyAborted = true\n\n      // 2. Abort fetch with p, request, and responseObject.\n      abortFetch.call(context, p, request, responseObject)\n\n      // 3. Terminate the ongoing fetch with the aborted flag set.\n      context.terminate({ aborted: true })\n    },\n    { once: true }\n  )\n\n  // 11. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = (response) =>\n    finalizeAndReportTiming(response, 'fetch')\n\n  // 12. Fetch request with processResponseDone set to handleFetchDone,\n  // and processResponse given response being these substeps:\n  const processResponse = (response) => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return\n    }\n\n    // 2. If response’s aborted flag is set, then abort fetch with p,\n    // request, and responseObject, and terminate these substeps.\n    if (response.aborted) {\n      abortFetch.call(context, p, request, responseObject)\n      return\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(\n        Object.assign(new TypeError('fetch failed'), { cause: response.error })\n      )\n      return\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response()\n    responseObject[kState] = response\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = response.headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject)\n  }\n\n  fetching\n    .call(context, {\n      request,\n      processResponseDone: handleFetchDone,\n      processResponse\n    })\n    .catch((err) => {\n      p.reject(err)\n    })\n\n  // 13. Return p.\n  return p.promise\n}\n\nfunction finalizeAndReportTiming (response, initiatorType = 'other') {\n  // 1. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return\n  }\n\n  // 2. Let originalURL be response’s URL list[0].\n  const originalURL = response.urlList[0]\n\n  // 3. Let timingInfo be response’s timing info.\n  let timingInfo = response.timingInfo\n\n  // 4. Let cacheState be response’s cache state.\n  let cacheState = response.cacheState\n\n  // 5. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return\n  }\n\n  // 6. If response’s timing allow passed flag is not set, then:\n  if (!timingInfo.timingAllowPassed) {\n    //  1. Set timingInfo to a new fetch timing info whose start time and\n    //  post-redirect start time are timingInfo’s start time.\n    timingInfo = makeTimingInfo({\n      startTime: timingInfo.startTime,\n      postRedirectStartTime: timingInfo.postRedirectStartTime\n    })\n\n    //  2. Set cacheState to the empty string.\n    cacheState = ''\n  }\n\n  // 7. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n  response.timingInfo.endTime = coarsenedSharedCurrentTime()\n\n  // 8. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 9. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(\n    timingInfo,\n    originalURL,\n    initiatorType,\n    global,\n    cacheState\n  )\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming () {\n  // TODO\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch (p, request, responseObject) {\n  const context = this\n\n  // 1. Let error be an \"AbortError\" DOMException.\n  const error = new AbortError()\n\n  // 2. Reject promise with error.\n  p.reject(error)\n\n  // 3. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n  if (request.body !== null) {\n    cancelBody(request.body, error)\n  }\n\n  // 4. If responseObject is null, then return.\n  if (responseObject == null) {\n    return\n  }\n\n  // 5. Let response be responseObject’s response.\n  const response = responseObject[kState]\n\n  // 6. If response’s body is not null and is readable, then error response’s\n  // body with error.\n  if (response.body != null) {\n    context.connection.destroy(error)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching ({ request, processResponse, processResponseDone }) {\n  // 1. Let taskDestination be null.\n  let taskDestination = null\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false\n\n  // 3. If request’s client is non-null, then:\n  if (request.client !== null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject\n\n    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability =\n      request.client.crossOriginIsolatedCapability\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)\n  const timingInfo = makeTimingInfo({\n    startTime: currenTime,\n    postRedirectStartTime: currenTime\n  })\n\n  // 6. Let fetchParams be a new fetch params whose request is request, timing\n  // info is timingInfo, process request body is processRequestBody,\n  // process request end-of-body is processRequestEndOfBody, process response\n  // is processResponse, process response end-of-body is\n  // processResponseEndOfBody, process response done is processResponseDone,\n  // task destination is taskDestination, and cross-origin isolated capability\n  // is crossOriginIsolatedCapability.\n  const fetchParams = {\n    request,\n    timingInfo,\n    processRequestBody: null,\n    processRequestEndOfBody: null,\n    processResponse,\n    processResponseEndOfBody: null,\n    processResponseDone,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }\n\n  // 7. If request’s body is a byte sequence, then set request’s body to the\n  // first return value of safely extracting request’s body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream)\n\n  // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window =\n      request.client?.globalObject instanceof Window\n        ? request.client\n        : 'no-window'\n  }\n\n  // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin\n  }\n\n  // 10. If request’s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client !== null) {\n      request.policyContainer = clonePolicyContainer(\n        request.client.policyContainer\n      )\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer()\n    }\n  }\n\n  // 11. If request’s header list does not contain `Accept`, then:\n  if (!request.headersList.has('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request’s header list.\n    request.headersList.append('accept', value)\n\n    // 12. If request’s header list does not contain `Accept-Language`, then\n    // user agents should append `Accept-Language`/an appropriate value to\n    // request’s header list.\n    if (!request.headersList.has('accept-language')) {\n      request.headersList.append('accept-language', '*')\n    }\n  }\n\n  // 13. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 14. If request is a subresource request, then:\n  if (subresource.includes(request.destination)) {\n    // 1. Let record be a new fetch record consisting of request and this\n    // instance of the fetch algorithm.\n    // TODO\n    // 2. Append record to request’s client’s fetch group list of fetch\n    // records.\n    // TODO\n  }\n\n  // 15. Run main fetch given fetchParams.\n  return mainFetch.call(this, fetchParams)\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch (fetchParams, recursive = false) {\n  const context = this\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n  if (\n    request.localURLsOnly &&\n    !/^(about|blob|data):/.test(requestCurrentURL(request).protocol)\n  ) {\n    return makeNetworkError('local URLs only')\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    return makeNetworkError('bad port')\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy\n  }\n\n  // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request)\n  }\n\n  // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      // - request’s current URL’s origin is same origin with request’s origin,\n      // and request’s response tainting is \"basic\"\n      // - request’s current URL’s scheme is \"data\"\n      // - request’s mode is \"navigate\" or \"websocket\"\n      //    1. Set request’s response tainting to \"basic\".\n      //    2. Return the result of running scheme fetch given fetchParams.\n      // TODO\n\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"')\n      }\n\n      // request’s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError(\n            'redirect cmode cannot be \"follow\" for \"no-cors\" request'\n          )\n        }\n\n        // 2. Set request’s response tainting to \"opaque\".\n        request.responseTainting = 'opaque'\n\n        // 3. Let noCorsResponse be the result of running scheme fetch given\n        // fetchParams.\n        // TODO\n\n        // 4. If noCorsResponse is a filtered response or the CORB check with\n        // request and noCorsResponse returns allowed, then return noCorsResponse.\n        // TODO\n\n        // 5. Return a new response whose status is noCorsResponse’s status.\n        // TODO\n      }\n\n      // request’s current URL’s scheme is not an HTTP(S) scheme\n      if (!/^https?:/.test(requestCurrentURL(request).protocol)) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n      }\n\n      // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n      request.responseTainting = 'cors'\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch\n        .call(this, fetchParams)\n        .catch((err) => makeNetworkError(err))\n    })()\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic')\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors')\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque')\n    } else {\n      assert(false)\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n  let internalResponse =\n    response.status === 0 ? response : response.internalResponse\n\n  // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList)\n  }\n\n  // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (\n    response.type === 'opaque' &&\n    internalResponse.status === 206 &&\n    internalResponse.rangeRequested &&\n    !request.headers.has('range')\n  ) {\n    response = internalResponse = makeNetworkError()\n  }\n\n  // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (\n    response.status !== 0 &&\n    (request.method === 'HEAD' ||\n      request.method === 'CONNECT' ||\n      nullBodyStatus.includes(internalResponse.status))\n  ) {\n    internalResponse.body = null\n    context.connection.dump = true\n  }\n\n  // 20. If request’s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = (reason) =>\n      fetchFinale(fetchParams, makeNetworkError(reason))\n\n    // 2. If request’s response tainting is \"opaque\", response is a network\n    // error, or response’s body is null, then run processBodyError and abort\n    // these steps.\n    if (request.responseTainting === 'opaque' && response.status === 0) {\n      processBodyError(response.error)\n      return\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = (bytes) => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!matchRequestIntegrity(request, bytes)) {\n        processBodyError('integrity mismatch')\n        return\n      }\n\n      // 2. Set response’s body to the first return value of safely\n      // extracting bytes.\n      response.body = safelyExtractBody(bytes)[0]\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response)\n    }\n\n    // 4. Fully read response’s body given processBody and processBodyError.\n    try {\n      processBody(await response.arrayBuffer())\n    } catch (err) {\n      processBodyError(err)\n    }\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse (fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true\n\n  // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n  if (fetchParams.processResponseDone !== null) {\n    fetchParams.processResponseDone(response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale (fetchParams, response) {\n  const context = this\n\n  // 1. If fetchParams’s process response is non-null,\n  // then queue a fetch task to run fetchParams’s process response\n  // given response, with fetchParams’s task destination.\n  if (fetchParams.processResponse !== null) {\n    fetchParams.processResponse(response)\n  }\n\n  // 2. If fetchParams’s process response end-of-body is non-null, then:.\n  //    TODO\n  //    1. Let processBody given nullOrBytes be this step: run fetchParams’s\n  //    process response end-of-body given response and nullOrBytes.on.\n  //    TODO\n  //    2. Let processBodyError be this step: run fetchParams’s process\n  //    response end-of-body given response and failure.on.\n  //    TODO\n  //    3. If response’s body is null, then queue a fetch task to run\n  //    processBody given null, with fetchParams’s task destination.on.\n  //    TODO\n  //    4. Otherwise, fully read response’s body given processBody,\n  //    processBodyError, and fetchParams’s task destination.on.\n  //    TODO\n\n  // TODO (spec): The spec doesn't specify this but we need to\n  // terminate fetch if we have an error response.\n  if (response.type === 'error') {\n    context.terminate({ reason: response.error })\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch (fetchParams) {\n  const context = this\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null\n\n  // 4. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 5. If request’s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none'\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch.call(\n      this,\n      fetchParams\n    )\n\n    // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (\n      request.responseTainting === 'cors' &&\n      corsCheck(request, response) === 'failure'\n    ) {\n      return makeNetworkError('cors failure')\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true\n    }\n  }\n\n  // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if (\n    (request.responseTainting === 'opaque' || response.type === 'opaque') &&\n    crossOriginResourcePolicyCheck(\n      request.origin,\n      request.client,\n      request.destination,\n      actualResponse\n    ) === 'blocked'\n  ) {\n    return makeNetworkError('blocked')\n  }\n\n  // 8. If actualResponse’s status is a redirect status, then:\n  if (redirectStatus.includes(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    context.connection.destroy()\n\n    // 2. Switch on request’s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError()\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      response = filterResponse(actualResponse, 'opaqueredirect')\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch.call(this, fetchParams, response)\n    } else {\n      assert(false)\n    }\n  }\n\n  // 9. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 10. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nasync function httpRedirectFetch (fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n  const actualResponse = response.internalResponse\n    ? response.internalResponse\n    : response\n\n  // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n  let locationURL\n\n  try {\n    locationURL = responseLocationURL(\n      actualResponse,\n      requestCurrentURL(request).hash\n    )\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return makeNetworkError(err)\n  }\n\n  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!/^https?:/.test(locationURL.protocol)) {\n    return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n  }\n\n  // 7. If request’s redirect count is twenty, return a network error.\n  if (request.redirectCount === 20) {\n    return makeNetworkError('redirect count exceeded')\n  }\n\n  // 8. Increase request’s redirect count by one.\n  request.redirectCount += 1\n\n  // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n  if (\n    request.mode === 'cors' &&\n    (locationURL.username || locationURL.password) &&\n    request.origin !== locationURL.origin\n  ) {\n    return makeNetworkError('cross origin not allowed for request mode \"cors\"')\n  }\n\n  // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (\n    request.responseTainting === 'cors' &&\n    (locationURL.username || locationURL.password)\n  ) {\n    return makeNetworkError(\n      'URL cannot contain credentials for request mode \"cors\"'\n    )\n  }\n\n  // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n  if (\n    actualResponse.status !== 303 &&\n    request.body !== null &&\n    request.body.source == null\n  ) {\n    return makeNetworkError()\n  }\n\n  // 12. If locationURL’s origin is not same origin with request’s current URL’s\n  // origin and request’s origin is not same origin with request’s current\n  // URL’s origin, then set request’s tainted origin flag.\n  if (\n    locationURL.origin !== requestCurrentURL(request).origin &&\n    request.origin !== locationURL.origin\n  ) {\n    request.taintedOrigin = true\n  }\n\n  // 13. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n  if (\n    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||\n    (actualResponse.status === 303 &&\n      !['GET', 'HEADER'].includes(request.method))\n  ) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET'\n    request.body = null\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName)\n    }\n  }\n\n  // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n  if (request.body !== null) {\n    assert(request.body.source)\n    request.body = safelyExtractBody(request.body.source)[0]\n  }\n\n  // 15. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =\n    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)\n\n  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime\n  }\n\n  // 18. Append locationURL to request’s URL list.\n  request.urlList.push(locationURL)\n\n  // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse)\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch.call(this, fetchParams, true)\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch (\n  fetchParams,\n  isAuthenticationFetch = false,\n  isNewConnectionFetch = false\n) {\n  const context = this\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null\n\n  // 4. Let response be null.\n  let response = null\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams\n    httpRequest = request\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request)\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = { ...fetchParams }\n\n    // 3. Set httpFetchParams’s request to httpRequest.\n    httpFetchParams.request = httpRequest\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials =\n    request.credentials === 'include' ||\n    (request.credentials === 'same-origin' &&\n      request.responseTainting === 'basic')\n\n  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null\n\n  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (\n    httpRequest.body == null &&\n    ['POST', 'PUT'].includes(httpRequest.method)\n  ) {\n    contentLengthHeaderValue = '0'\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength !== null) {\n    // TODO: isomorphic encoded\n    contentLengthHeaderValue = String(contentLength)\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n  if (contentLengthHeaderValue !== null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue)\n  }\n\n  //    9. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n  if (contentLength !== null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    10 .If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n  if (httpRequest.referrer instanceof URL) {\n    // TODO: isomorphic encoded\n    httpRequest.headersList.append('referer', httpRequest.referrer.href)\n  }\n\n  //    11. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest)\n\n  //    12. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest)\n\n  //    13. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n  if (!httpRequest.headersList.has('user-agent')) {\n    httpRequest.headersList.append('user-agent', 'undici')\n  }\n\n  //    14. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n  if (\n    httpRequest.cache === 'default' &&\n    (httpRequest.headersList.has('if-modified-since') ||\n      httpRequest.headersList.has('if-none-match') ||\n      httpRequest.headersList.has('if-unmodified-since') ||\n      httpRequest.headersList.has('if-match') ||\n      httpRequest.headersList.has('if-range'))\n  ) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    15. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n  if (\n    httpRequest.cache === 'no-cache' &&\n    !httpRequest.preventNoCacheCacheControlHeaderModification &&\n    !httpRequest.headersList.has('cache-control')\n  ) {\n    httpRequest.headersList.append('cache-control', 'max-age=0')\n  }\n\n  //    16. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.has('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache')\n    }\n\n    // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.has('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache')\n    }\n  }\n\n  //    17. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n  if (httpRequest.headersList.has('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity')\n  }\n\n  //    18. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.has('accept-encoding')) {\n    if (/^https:/.test(requestCurrentURL(httpRequest).protocol)) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')\n    }\n  }\n\n  //    19. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    20. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    21. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    22. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    23. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then:\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached')\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch.call(\n      this,\n      httpFetchParams,\n      includeCredentials,\n      isNewConnectionFetch\n    )\n\n    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (\n      !safeMethods.includes(httpRequest.method) &&\n      forwardResponse.status >= 200 &&\n      forwardResponse.status <= 399\n    ) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n  response.urlList = [...httpRequest.urlList]\n\n  // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n  if (httpRequest.headersList.has('range')) {\n    response.rangeRequested = true\n  }\n\n  // 13. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 14. If response’s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError()\n    }\n\n    // 2. ???\n\n    // 3. If the ongoing fetch is terminated, then:\n    if (context.terminated) {\n      // 1. Let aborted be the termination’s aborted flag.\n      // 2. If aborted is set, then return an aborted network error.\n      // 3. Return a network error.\n      return makeNetworkError(\n        context.terminated.aborted ? new AbortError() : null\n      )\n    }\n\n    // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required')\n  }\n\n  // 15. If all of the following are true\n  if (\n    // response’s status is 421\n    response.status === 421 &&\n    // isNewConnectionFetch is false\n    !isNewConnectionFetch &&\n    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n    (request.body == null || request.body.source !== null)\n  ) {\n    // then:\n\n    // 1. If the ongoing fetch is terminated, then:\n    if (context.terminated) {\n      // 1. Let aborted be the termination’s aborted flag.\n      const aborted = context.terminated.aborted\n\n      // 2. If aborted is set, then return an aborted network error.\n      const reason = aborted ? new AbortError() : new Error('terminated')\n\n      // 3. Return a network error.\n      return makeNetworkError(reason)\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    context.connection.destroy()\n\n    response = await httpNetworkOrCacheFetch.call(\n      this,\n      fetchParams,\n      isAuthenticationFetch,\n      true\n    )\n  }\n\n  // 16. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 17. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nfunction httpNetworkFetch (\n  fetchParams,\n  includeCredentials = false,\n  forceNewConnection = false\n) {\n  const context = this\n\n  return new Promise((resolve) => {\n    assert(!context.connection || context.connection.destroyed)\n\n    const connection = (context.connection = {\n      abort: null,\n      controller: null,\n      destroyed: false,\n      errored: false,\n      dump: false,\n      destroy (err) {\n        if (this.destroyed) {\n          return\n        }\n\n        this.destroyed = true\n\n        if (this.abort) {\n          this.abort()\n          this.abort = null\n        }\n\n        if (err) {\n          this.errored = err\n        }\n\n        if (this.controller) {\n          try {\n            this.controller.error(err ?? new AbortError())\n            this.controller = null\n          } catch (err) {\n            // Will throw TypeError if body is not readable.\n            if (err.name !== 'TypeError') {\n              throw err\n            }\n          }\n        }\n      }\n    })\n\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request\n\n    // 2. Let response be null.\n    let response = null\n\n    // 3. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo\n\n    // 4. Let httpCache be the result of determining the HTTP cache partition,\n    // given request.\n    // TODO: cache\n    const httpCache = null\n\n    // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n    if (httpCache == null) {\n      request.cache = 'no-store'\n    }\n\n    // 6. Let networkPartitionKey be the result of determining the network\n    // partition key given request.\n    // TODO\n\n    // 7. Switch on request’s mode:\n    if (request.mode === 'websocket') {\n      // Let connection be the result of obtaining a WebSocket connection,\n      // given request’s current URL.\n      // TODO\n    } else {\n      // Let connection be the result of obtaining a connection, given\n      // networkPartitionKey, request’s current URL’s origin,\n      // includeCredentials, and forceNewConnection.\n      // TODO\n    }\n\n    // 8. Run these steps, but abort when the ongoing fetch is terminated:\n    // TODO: When do we cleanup this listener?\n    context.on('terminated', onRequestAborted)\n\n    //    5. Set response to the result of making an HTTP request over connection\n    //    using request with the following caveats:\n\n    //    Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n    //    [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n    //    If request’s body is non-null, and request’s body’s source is null,\n    //    then the user agent may have a buffer of up to 64 kibibytes and store\n    //    a part of request’s body in that buffer. If the user agent reads from\n    //    request’s body beyond that buffer’s size and the user agent needs to\n    //    resend request, then instead return a network error.\n    //    TODO\n\n    //    Set timingInfo’s final network-response start time to the coarsened\n    //    shared current time given fetchParams’s cross-origin isolated capability,\n    //    immediately after the user agent’s HTTP parser receives the first byte\n    //    of the response (e.g., frame header bytes for HTTP/2 or response status\n    //    line for HTTP/1.x).\n    //    TODO\n\n    //    Wait until all the headers are transmitted.\n\n    //    Any responses whose status is in the range 100 to 199, inclusive,\n    //    and is not 101, are to be ignored, except for the purposes of setting\n    //    timingInfo’s final network-response start time above.\n\n    //    If request’s header list contains `Transfer-Encoding`/`chunked` and\n    //    response is transferred via HTTP/1.0 or older, then return a network\n    //    error.\n\n    //    If the HTTP request results in a TLS client certificate dialog, then:\n\n    //        1. If request’s window is an environment settings object, make the\n    //        dialog available in request’s window.\n\n    //        2. Otherwise, return a network error.\n\n    // To transmit request’s body body, run these steps:\n    const body = (async function * () {\n      try {\n        // 1. If body is null and fetchParams’s process request end-of-body is\n        // non-null, then queue a fetch task given fetchParams’s process request\n        // end-of-body and fetchParams’s task destination.\n        if (request.body === null) {\n          fetchParams.processEndOfBody?.()\n          return\n        }\n\n        // 2. Otherwise, if body is non-null:\n\n        //    1. Let processBodyChunk given bytes be these steps:\n        for await (const bytes of request.body.stream) {\n          // 1. If the ongoing fetch is terminated, then abort these steps.\n          if (context.terminated) {\n            return\n          }\n\n          // 2. Run this step in parallel: transmit bytes.\n          yield bytes\n\n          // 3. If fetchParams’s process request body is non-null, then run\n          // fetchParams’s process request body given bytes’s length.\n          fetchParams.processRequestBody?.(bytes.byteLength)\n        }\n\n        // 2. Let processEndOfBody be these steps:\n\n        //    1. If the ongoing fetch is terminated, then abort these steps.\n        if (context.terminated) {\n          return\n        }\n\n        //    2. If fetchParams’s process request end-of-body is non-null,\n        //    then run fetchParams’s process request end-of-body.\n        fetchParams.processRequestEndOfBody?.()\n      } catch (e) {\n        // 3. Let processBodyError given e be these steps:\n\n        //    1. If the ongoing fetch is terminated, then abort these steps.\n        if (context.terminated) {\n          return\n        }\n\n        //    2. If e is an \"AbortError\" DOMException, then terminate the ongoing fetch with the aborted flag set.\n        //    3. Otherwise, terminate the ongoing fetch.\n        context.terminate({\n          aborted: e.name === 'AbortError',\n          reason: e\n        })\n      }\n    })()\n\n    // 9. If aborted, then:\n    function onRequestAborted () {\n      // 1. Let aborted be the termination’s aborted flag.\n      const aborted = context.terminated.aborted\n\n      // 2. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      connection.destroy()\n\n      // 3. If aborted is set, then return an aborted network error.\n      const reason = aborted ? new AbortError() : new Error('terminated')\n\n      // 4. Return a network error.\n      resolve(makeNetworkError(reason))\n    }\n\n    // 10. Let pullAlgorithm be an action that resumes the ongoing fetch\n    // if it is suspended.\n    let pullAlgorithm\n\n    // 11. Let cancelAlgorithm be an action that terminates the ongoing\n    // fetch with the aborted flag set.\n    const cancelAlgorithm = () => {\n      context.terminate({ aborted: true })\n    }\n\n    // 12. Let highWaterMark be a non-negative, non-NaN number, chosen by\n    // the user agent.\n    const highWaterMark = 65536\n\n    // 13. Let sizeAlgorithm be an algorithm that accepts a chunk object\n    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n    // TODO\n\n    // 14. Let stream be a new ReadableStream.\n    // 15. Set up stream with pullAlgorithm set to pullAlgorithm,\n    // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n    // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n    if (!ReadableStream) {\n      ReadableStream = require('stream/web').ReadableStream\n    }\n\n    const stream = new ReadableStream(\n      {\n        async start (controller) {\n          connection.controller = controller\n        },\n        async pull () {\n          if (pullAlgorithm) {\n            pullAlgorithm()\n          } else {\n            pullAlgorithm = null\n          }\n        },\n        async cancel (reason) {\n          cancelAlgorithm()\n        }\n      },\n      { highWaterMark }\n    )\n\n    // 16. Run these steps, but abort when the ongoing fetch is terminated:\n    // TODO\n\n    // 17. If aborted, then:\n    // TODO: How can this happen? The steps above are not async?\n\n    // 18. Run these steps in parallel:\n    //    1. Run these steps, but abort when the ongoing fetch is terminated:\n    //        1. While true:\n    //            1. If one or more bytes have been transmitted from response’s\n    //            message body, then:\n    //            NOTE: See onHeaders\n    //            2. Otherwise, if the bytes transmission for response’s message\n    //            body is done normally and stream is readable, then close stream,\n    //            finalize response for fetchParams and response, and abort these\n    //            in-parallel steps.\n    //            NOTE: See onHeaders\n\n    //    2. If aborted, then:\n    function onResponseAborted () {\n      // 1. Finalize response for fetchParams and response.\n      finalizeResponse(fetchParams, response)\n\n      // 2. Let aborted be the termination’s aborted flag.\n      const aborted = context.terminated.aborted\n\n      // 3. If aborted is set, then:\n      if (aborted) {\n        // 1. Set response’s aborted flag.\n        response.aborted = true\n\n        // 2. If stream is readable, error stream with an \"AbortError\" DOMException.\n        connection.destroy(new AbortError())\n      } else {\n        // 4. Otherwise, if stream is readable, error stream with a TypeError.\n        connection.destroy(new TypeError('terminated'))\n      }\n\n      // 5. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      // 6. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n      connection.destroy()\n    }\n\n    // 19. Return response.\n    // NOTE: See onHeaders\n\n    // Implementation\n    const url = requestCurrentURL(request)\n    context.dispatcher.dispatch(\n      {\n        path: url.pathname + url.search,\n        origin: url.origin,\n        method: request.method,\n        body,\n        headers: request.headersList,\n        maxRedirections: 0\n      },\n      {\n        decoder: null,\n\n        onConnect (abort) {\n          if (connection.destroyed) {\n            abort(new AbortError())\n          } else {\n            connection.abort = abort\n          }\n        },\n\n        onHeaders (status, headersList, resume, statusText) {\n          if (status < 200) {\n            return\n          }\n\n          const headers = new Headers()\n          for (let n = 0; n < headersList.length; n += 2) {\n            headers.append(\n              headersList[n + 0].toString(),\n              headersList[n + 1].toString()\n            )\n          }\n\n          const hasPulled = pullAlgorithm !== undefined\n\n          const body = { stream }\n          registry.register(body, connection.abort)\n\n          response = makeResponse({\n            status,\n            statusText,\n            headersList: headers[kHeadersList],\n            body\n          })\n\n          context.on('terminated', onResponseAborted)\n\n          const codings =\n            headers\n              .get('content-encoding')\n              ?.toLowerCase()\n              .split(',')\n              .map((x) => x.trim()) ?? []\n\n          const decoders = []\n\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n          for (const coding of codings) {\n            if (/(x-)?gzip/.test(coding)) {\n              decoders.push(zlib.createGunzip())\n            } else if (/(x-)?deflate/.test(coding)) {\n              decoders.push(zlib.createInflate())\n            } else if (coding === 'br') {\n              decoders.push(zlib.createBrotliDecompress())\n            } else {\n              decoders.length = 0\n              break\n            }\n          }\n\n          let iterator\n\n          if (decoders.length > 1) {\n            if (compose) {\n              this.decoder = compose(...decoders)\n              iterator = this.decoder[Symbol.asyncIterator]()\n            } else {\n              this.decoder = new PassThrough()\n              iterator = pipeline(this.decoder, ...decoders, () => {})[\n                Symbol.asyncIterator\n              ]()\n            }\n          } else if (decoders.length === 1) {\n            this.decoder = decoders[0]\n            iterator = this.decoder[Symbol.asyncIterator]()\n          } else {\n            this.decoder = new PassThrough()\n            iterator = this.decoder[Symbol.asyncIterator]()\n          }\n\n          if (this.decoder) {\n            this.decoder.on('drain', resume)\n          }\n\n          pullAlgorithm = async () => {\n            // 4. Set bytes to the result of handling content codings given\n            // codings and bytes.\n            let bytes\n            try {\n              const { done, value } = await iterator.next()\n              bytes = done ? undefined : value\n            } catch (err) {\n              if (this.decoder.writableEnded && !timingInfo.encodedBodySize) {\n                // zlib doesn't like empty streams.\n                bytes = undefined\n              } else {\n                bytes = err\n              }\n            }\n\n            if (!connection.controller) {\n              return\n            }\n\n            if (bytes === undefined) {\n              // 2. Otherwise, if the bytes transmission for response’s message\n              // body is done normally and stream is readable, then close\n              // stream, finalize response for fetchParams and response, and\n              // abort these in-parallel steps.\n              finalizeResponse(fetchParams, response)\n\n              context.off('terminated', onResponseAborted)\n              context.off('terminated', onRequestAborted)\n\n              connection.controller.close()\n              connection.controller = null\n\n              connection.destroy()\n\n              return\n            }\n\n            // 5. Increase timingInfo’s decoded body size by bytes’s length.\n            timingInfo.decodedBodySize += bytes?.byteLength ?? 0\n\n            // 6. If bytes is failure, then terminate the ongoing fetch.\n            if (bytes instanceof Error) {\n              context.terminate({ reason: bytes })\n              return\n            }\n\n            // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n            //  into stream.\n            connection.controller.enqueue(new Uint8Array(bytes))\n\n            // 8. If stream is errored, then terminate the ongoing fetch.\n            if (connection.errored) {\n              context.terminate({ reason: connection.errored })\n              return\n            }\n\n            // 9. If stream doesn’t need more data ask the user agent to suspend\n            //  the ongoing fetch.\n            return connection.controller.desiredSize > 0\n          }\n\n          if (hasPulled) {\n            pullAlgorithm()\n          }\n\n          resolve(response)\n\n          return true\n        },\n\n        onData (chunk) {\n          if (connection.dump) {\n            return\n          }\n\n          //  1. If one or more bytes have been transmitted from response’s\n          //  message body, then:\n\n          // 1. Let bytes be the transmitted bytes.\n          const bytes = chunk\n\n          // 2. Let codings be the result of extracting header list values\n          // given `Content-Encoding` and response’s header list.\n          // See pullAlgorithm.\n\n          // 3. Increase timingInfo’s encoded body size by bytes’s length.\n          timingInfo.encodedBodySize += bytes.byteLength\n\n          // 4. See pullAlgorithm...\n\n          return this.decoder.write(bytes)\n        },\n\n        async onComplete () {\n          this.decoder.end()\n        },\n\n        onError (error) {\n          context.off('terminated', onResponseAborted)\n          context.off('terminated', onRequestAborted)\n\n          connection.destroy(error)\n\n          context.terminate({ reason: error })\n\n          if (!response) {\n            resolve(makeNetworkError(error))\n          }\n        }\n      }\n    )\n  })\n}\n\nfunction createDeferredPromise () {\n  let res\n  let rej\n  const promise = new Promise((resolve, reject) => {\n    res = resolve\n    rej = reject\n  })\n\n  return { promise, resolve: res, reject: rej }\n}\n\nmodule.exports = fetch\n"]},"metadata":{},"sourceType":"script"}