{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTTPDataSource = exports.RequestError = void 0;\n\nconst apollo_datasource_1 = require(\"apollo-datasource\");\n\nconst undici_1 = require(\"undici\");\n\nconst http_1 = require(\"http\");\n\nconst quick_lru_1 = __importDefault(require(\"@alloc/quick-lru\"));\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst url_1 = require(\"url\");\n\nclass RequestError extends Error {\n  constructor(message, code, request, response) {\n    super(message);\n    this.message = message;\n    this.code = code;\n    this.request = request;\n    this.response = response;\n    this.name = 'RequestError';\n  }\n\n}\n\nexports.RequestError = RequestError;\nconst statusCodeCacheableByDefault = new Set([200, 203]);\n\nclass HTTPDataSource extends apollo_datasource_1.DataSource {\n  constructor(baseURL, options) {\n    var _a, _b, _c;\n\n    super();\n    this.baseURL = baseURL;\n    this.options = options;\n    this.memoizedResults = new quick_lru_1.default({\n      maxSize: ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.lru) === null || _b === void 0 ? void 0 : _b.maxSize) ? this.options.lru.maxSize : 100\n    });\n    this.pool = (_c = options === null || options === void 0 ? void 0 : options.pool) !== null && _c !== void 0 ? _c : new undici_1.Pool(this.baseURL, options === null || options === void 0 ? void 0 : options.clientOptions);\n    this.globalRequestOptions = options === null || options === void 0 ? void 0 : options.requestOptions;\n    this.logger = options === null || options === void 0 ? void 0 : options.logger;\n  }\n\n  buildQueryString(query) {\n    const params = new url_1.URLSearchParams();\n\n    for (const key in query) {\n      if (Object.prototype.hasOwnProperty.call(query, key)) {\n        const value = query[key];\n\n        if (value !== undefined) {\n          params.append(key, value.toString());\n        }\n      }\n    }\n\n    params.sort();\n    return params.toString();\n  }\n\n  initialize(config) {\n    this.context = config.context;\n    this.cache = config.cache;\n  }\n\n  isResponseOk(statusCode) {\n    return statusCode >= 200 && statusCode <= 399 || statusCode === 304;\n  }\n\n  isResponseCacheable(request, response) {\n    return statusCodeCacheableByDefault.has(response.statusCode) && request.method === 'GET';\n  }\n\n  onCacheKeyCalculation(request) {\n    return request.origin + request.path;\n  }\n\n  onResponse(request, response) {\n    if (this.isResponseOk(response.statusCode)) {\n      return response;\n    }\n\n    throw new RequestError(`Response code ${response.statusCode} (${http_1.STATUS_CODES[response.statusCode.toString()]})`, response.statusCode, request, response);\n  }\n\n  async get(path, requestOptions) {\n    return this.request({\n      headers: {},\n      query: {},\n      body: null,\n      context: {},\n      ...requestOptions,\n      method: 'GET',\n      path,\n      origin: this.baseURL\n    });\n  }\n\n  async post(path, requestOptions) {\n    return this.request({\n      headers: {},\n      query: {},\n      body: null,\n      context: {},\n      ...requestOptions,\n      method: 'POST',\n      path,\n      origin: this.baseURL\n    });\n  }\n\n  async delete(path, requestOptions) {\n    return this.request({\n      headers: {},\n      query: {},\n      body: null,\n      context: {},\n      ...requestOptions,\n      method: 'DELETE',\n      path,\n      origin: this.baseURL\n    });\n  }\n\n  async put(path, requestOptions) {\n    return this.request({\n      headers: {},\n      query: {},\n      body: null,\n      context: {},\n      ...requestOptions,\n      method: 'PUT',\n      path,\n      origin: this.baseURL\n    });\n  }\n\n  async patch(path, requestOptions) {\n    return this.request({\n      headers: {},\n      query: {},\n      body: null,\n      context: {},\n      ...requestOptions,\n      method: 'PATCH',\n      path,\n      origin: this.baseURL\n    });\n  }\n\n  async performRequest(request, cacheKey) {\n    var _a, _b, _c;\n\n    try {\n      if (request.body !== null && typeof request.body === 'object') {\n        if (request.headers['content-type'] === undefined) {\n          request.headers['content-type'] = 'application/json; charset=utf-8';\n        }\n\n        request.body = JSON.stringify(request.body);\n      }\n\n      await ((_a = this.onRequest) === null || _a === void 0 ? void 0 : _a.call(this, request));\n      const requestOptions = {\n        method: request.method,\n        origin: request.origin,\n        path: request.path,\n        headers: request.headers,\n        signal: request.signal,\n        body: request.body\n      };\n      const responseData = await this.pool.request(requestOptions);\n      let body = await responseData.body.text();\n\n      if (((_b = responseData.headers['content-type']) === null || _b === void 0 ? void 0 : _b.includes('application/json')) && body.length && typeof body === 'string') {\n        body = JSON.parse(body);\n      }\n\n      const response = {\n        isFromCache: false,\n        memoized: false,\n        ...responseData,\n        body: body\n      };\n      this.onResponse(request, response);\n\n      if (request.requestCache && this.isResponseCacheable(request, response)) {\n        response.maxTtl = request.requestCache.maxTtl;\n        const cachedResponse = JSON.stringify(response);\n        this.cache.set(cacheKey, cachedResponse, {\n          ttl: request.requestCache.maxTtl\n        }).catch(err => {\n          var _a;\n\n          return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err);\n        });\n        this.cache.set(`staleIfError:${cacheKey}`, cachedResponse, {\n          ttl: request.requestCache.maxTtl + request.requestCache.maxTtlIfError\n        }).catch(err => {\n          var _a;\n\n          return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err);\n        });\n      }\n\n      return response;\n    } catch (error) {\n      (_c = this.onError) === null || _c === void 0 ? void 0 : _c.call(this, error, request);\n\n      if (request.requestCache) {\n        const cacheItem = await this.cache.get(`staleIfError:${cacheKey}`);\n\n        if (cacheItem) {\n          const response = JSON.parse(cacheItem);\n          response.isFromCache = true;\n          return response;\n        }\n      }\n\n      throw apollo_server_errors_1.toApolloError(error);\n    }\n  }\n\n  async request(request) {\n    var _a;\n\n    if (Object.keys(request.query).length > 0) {\n      request.path = request.path + '?' + this.buildQueryString(request.query);\n    }\n\n    const cacheKey = this.onCacheKeyCalculation(request);\n\n    if (request.method === 'GET') {\n      if (this.memoizedResults.has(cacheKey)) {\n        const response = await this.memoizedResults.get(cacheKey);\n        response.memoized = true;\n        response.isFromCache = false;\n        return response;\n      }\n    }\n\n    const options = { ...request,\n      ...this.globalRequestOptions\n    };\n\n    if (options.method === 'GET') {\n      if (request.requestCache) {\n        try {\n          const cacheItem = await this.cache.get(cacheKey);\n\n          if (cacheItem) {\n            const cachedResponse = JSON.parse(cacheItem);\n            cachedResponse.memoized = false;\n            cachedResponse.isFromCache = true;\n            return cachedResponse;\n          }\n\n          const response = this.performRequest(options, cacheKey);\n          this.memoizedResults.set(cacheKey, response);\n          return response;\n        } catch (error) {\n          (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Cache item '${cacheKey}' could not be loaded: ${error.message}`);\n        }\n      }\n\n      const response = this.performRequest(options, cacheKey);\n      this.memoizedResults.set(cacheKey, response);\n      return response;\n    }\n\n    return this.performRequest(options, cacheKey);\n  }\n\n}\n\nexports.HTTPDataSource = HTTPDataSource;","map":{"version":3,"sources":["../../src/http-data-source.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTTPDataSource = exports.RequestError = void 0;\nconst apollo_datasource_1 = require(\"apollo-datasource\");\nconst undici_1 = require(\"undici\");\nconst http_1 = require(\"http\");\nconst quick_lru_1 = __importDefault(require(\"@alloc/quick-lru\"));\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst url_1 = require(\"url\");\nclass RequestError extends Error {\n    constructor(message, code, request, response) {\n        super(message);\n        this.message = message;\n        this.code = code;\n        this.request = request;\n        this.response = response;\n        this.name = 'RequestError';\n    }\n}\nexports.RequestError = RequestError;\nconst statusCodeCacheableByDefault = new Set([200, 203]);\nclass HTTPDataSource extends apollo_datasource_1.DataSource {\n    constructor(baseURL, options) {\n        var _a, _b, _c;\n        super();\n        this.baseURL = baseURL;\n        this.options = options;\n        this.memoizedResults = new quick_lru_1.default({\n            maxSize: ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.lru) === null || _b === void 0 ? void 0 : _b.maxSize) ? this.options.lru.maxSize : 100,\n        });\n        this.pool = (_c = options === null || options === void 0 ? void 0 : options.pool) !== null && _c !== void 0 ? _c : new undici_1.Pool(this.baseURL, options === null || options === void 0 ? void 0 : options.clientOptions);\n        this.globalRequestOptions = options === null || options === void 0 ? void 0 : options.requestOptions;\n        this.logger = options === null || options === void 0 ? void 0 : options.logger;\n    }\n    buildQueryString(query) {\n        const params = new url_1.URLSearchParams();\n        for (const key in query) {\n            if (Object.prototype.hasOwnProperty.call(query, key)) {\n                const value = query[key];\n                if (value !== undefined) {\n                    params.append(key, value.toString());\n                }\n            }\n        }\n        params.sort();\n        return params.toString();\n    }\n    initialize(config) {\n        this.context = config.context;\n        this.cache = config.cache;\n    }\n    isResponseOk(statusCode) {\n        return (statusCode >= 200 && statusCode <= 399) || statusCode === 304;\n    }\n    isResponseCacheable(request, response) {\n        return statusCodeCacheableByDefault.has(response.statusCode) && request.method === 'GET';\n    }\n    onCacheKeyCalculation(request) {\n        return request.origin + request.path;\n    }\n    onResponse(request, response) {\n        if (this.isResponseOk(response.statusCode)) {\n            return response;\n        }\n        throw new RequestError(`Response code ${response.statusCode} (${http_1.STATUS_CODES[response.statusCode.toString()]})`, response.statusCode, request, response);\n    }\n    async get(path, requestOptions) {\n        return this.request({\n            headers: {},\n            query: {},\n            body: null,\n            context: {},\n            ...requestOptions,\n            method: 'GET',\n            path,\n            origin: this.baseURL,\n        });\n    }\n    async post(path, requestOptions) {\n        return this.request({\n            headers: {},\n            query: {},\n            body: null,\n            context: {},\n            ...requestOptions,\n            method: 'POST',\n            path,\n            origin: this.baseURL,\n        });\n    }\n    async delete(path, requestOptions) {\n        return this.request({\n            headers: {},\n            query: {},\n            body: null,\n            context: {},\n            ...requestOptions,\n            method: 'DELETE',\n            path,\n            origin: this.baseURL,\n        });\n    }\n    async put(path, requestOptions) {\n        return this.request({\n            headers: {},\n            query: {},\n            body: null,\n            context: {},\n            ...requestOptions,\n            method: 'PUT',\n            path,\n            origin: this.baseURL,\n        });\n    }\n    async patch(path, requestOptions) {\n        return this.request({\n            headers: {},\n            query: {},\n            body: null,\n            context: {},\n            ...requestOptions,\n            method: 'PATCH',\n            path,\n            origin: this.baseURL,\n        });\n    }\n    async performRequest(request, cacheKey) {\n        var _a, _b, _c;\n        try {\n            if (request.body !== null && typeof request.body === 'object') {\n                if (request.headers['content-type'] === undefined) {\n                    request.headers['content-type'] = 'application/json; charset=utf-8';\n                }\n                request.body = JSON.stringify(request.body);\n            }\n            await ((_a = this.onRequest) === null || _a === void 0 ? void 0 : _a.call(this, request));\n            const requestOptions = {\n                method: request.method,\n                origin: request.origin,\n                path: request.path,\n                headers: request.headers,\n                signal: request.signal,\n                body: request.body,\n            };\n            const responseData = await this.pool.request(requestOptions);\n            let body = await responseData.body.text();\n            if (((_b = responseData.headers['content-type']) === null || _b === void 0 ? void 0 : _b.includes('application/json')) &&\n                body.length &&\n                typeof body === 'string') {\n                body = JSON.parse(body);\n            }\n            const response = {\n                isFromCache: false,\n                memoized: false,\n                ...responseData,\n                body: body,\n            };\n            this.onResponse(request, response);\n            if (request.requestCache && this.isResponseCacheable(request, response)) {\n                response.maxTtl = request.requestCache.maxTtl;\n                const cachedResponse = JSON.stringify(response);\n                this.cache\n                    .set(cacheKey, cachedResponse, {\n                    ttl: request.requestCache.maxTtl,\n                })\n                    .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err); });\n                this.cache\n                    .set(`staleIfError:${cacheKey}`, cachedResponse, {\n                    ttl: request.requestCache.maxTtl + request.requestCache.maxTtlIfError,\n                })\n                    .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err); });\n            }\n            return response;\n        }\n        catch (error) {\n            (_c = this.onError) === null || _c === void 0 ? void 0 : _c.call(this, error, request);\n            if (request.requestCache) {\n                const cacheItem = await this.cache.get(`staleIfError:${cacheKey}`);\n                if (cacheItem) {\n                    const response = JSON.parse(cacheItem);\n                    response.isFromCache = true;\n                    return response;\n                }\n            }\n            throw apollo_server_errors_1.toApolloError(error);\n        }\n    }\n    async request(request) {\n        var _a;\n        if (Object.keys(request.query).length > 0) {\n            request.path = request.path + '?' + this.buildQueryString(request.query);\n        }\n        const cacheKey = this.onCacheKeyCalculation(request);\n        if (request.method === 'GET') {\n            if (this.memoizedResults.has(cacheKey)) {\n                const response = await this.memoizedResults.get(cacheKey);\n                response.memoized = true;\n                response.isFromCache = false;\n                return response;\n            }\n        }\n        const options = {\n            ...request,\n            ...this.globalRequestOptions,\n        };\n        if (options.method === 'GET') {\n            if (request.requestCache) {\n                try {\n                    const cacheItem = await this.cache.get(cacheKey);\n                    if (cacheItem) {\n                        const cachedResponse = JSON.parse(cacheItem);\n                        cachedResponse.memoized = false;\n                        cachedResponse.isFromCache = true;\n                        return cachedResponse;\n                    }\n                    const response = this.performRequest(options, cacheKey);\n                    this.memoizedResults.set(cacheKey, response);\n                    return response;\n                }\n                catch (error) {\n                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Cache item '${cacheKey}' could not be loaded: ${error.message}`);\n                }\n            }\n            const response = this.performRequest(options, cacheKey);\n            this.memoizedResults.set(cacheKey, response);\n            return response;\n        }\n        return this.performRequest(options, cacheKey);\n    }\n}\nexports.HTTPDataSource = HTTPDataSource;\n//# sourceMappingURL=http-data-source.js.map"]},"metadata":{},"sourceType":"script"}