{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst uuid_1 = require(\"uuid\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst schemaReporter_1 = require(\"./schemaReporter\");\n\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\n\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\n\nfunction ApolloServerPluginSchemaReporting() {\n  let {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  const bootId = (0, uuid_1.v4)();\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n\n    async serverWillStart(_ref) {\n      let {\n        apollo,\n        schema,\n        logger\n      } = _ref;\n      const {\n        key,\n        graphRef\n      } = apollo;\n\n      if (!key) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' + 'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n      }\n\n      if (!graphRef) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' + \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" + 'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n      }\n\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, {\n            noLocation: true\n          }));\n\n          if (validationErrors.length) {\n            throw new Error(validationErrors.map(error => error.message).join('\\n'));\n          }\n        } catch (err) {\n          throw new Error('The schema provided to overrideReportedSchema failed to parse or ' + `validate: ${err.message}`);\n        }\n      }\n\n      if ((0, schemaIsFederated_1.schemaIsFederated)(schema)) {\n        throw Error(['Schema reporting is not yet compatible with federated services.', \"If you're interested in using schema reporting with federated\", 'services, please contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n      }\n\n      if (endpointUrl !== undefined) {\n        logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n      }\n\n      const baseSchemaReport = {\n        bootId,\n        graphRef,\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n        libraryVersion: `apollo-server-core@${require('../../../package.json').version}`\n      };\n      let currentSchemaReporter;\n      return {\n        schemaDidLoadOrUpdate(_ref2) {\n          let {\n            apiSchema,\n            coreSupergraphSdl\n          } = _ref2;\n\n          var _a;\n\n          if (overrideReportedSchema !== undefined) {\n            if (currentSchemaReporter) {\n              return;\n            } else {\n              logger.info('Apollo schema reporting: schema to report has been overridden');\n            }\n          }\n\n          const coreSchema = (_a = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : coreSupergraphSdl) !== null && _a !== void 0 ? _a : (0, graphql_1.printSchema)(apiSchema);\n          const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n          const schemaReport = { ...baseSchemaReport,\n            coreSchemaHash\n          };\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n          currentSchemaReporter = new schemaReporter_1.SchemaReporter({\n            schemaReport,\n            coreSchema,\n            apiKey: key,\n            endpointUrl,\n            logger,\n            initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n            fallbackReportingDelayInMs: 20000,\n            fetcher\n          });\n          currentSchemaReporter.start();\n          logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n        },\n\n        async serverWillStop() {\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n        }\n\n      };\n    }\n\n  };\n}\n\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\n\nfunction computeCoreSchemaHash(schema) {\n  return (0, createSHA_1.default)('sha256').update(schema).digest('hex');\n}\n\nexports.computeCoreSchemaHash = computeCoreSchemaHash;","map":{"version":3,"sources":["../../../src/plugin/schemaReporting/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporter_1 = require(\"./schemaReporter\");\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher, } = Object.create(null)) {\n    const bootId = (0, uuid_1.v4)();\n    return {\n        __internal_plugin_id__() {\n            return 'SchemaReporting';\n        },\n        async serverWillStart({ apollo, schema, logger }) {\n            const { key, graphRef } = apollo;\n            if (!key) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n                    'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n            }\n            if (!graphRef) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n                    \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n                    'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n            }\n            if (overrideReportedSchema) {\n                try {\n                    const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, { noLocation: true }));\n                    if (validationErrors.length) {\n                        throw new Error(validationErrors.map((error) => error.message).join('\\n'));\n                    }\n                }\n                catch (err) {\n                    throw new Error('The schema provided to overrideReportedSchema failed to parse or ' +\n                        `validate: ${err.message}`);\n                }\n            }\n            if ((0, schemaIsFederated_1.schemaIsFederated)(schema)) {\n                throw Error([\n                    'Schema reporting is not yet compatible with federated services.',\n                    \"If you're interested in using schema reporting with federated\",\n                    'services, please contact Apollo support. To set up managed federation, see',\n                    'https://go.apollo.dev/s/managed-federation',\n                ].join(' '));\n            }\n            if (endpointUrl !== undefined) {\n                logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n            }\n            const baseSchemaReport = {\n                bootId,\n                graphRef,\n                platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n                runtimeVersion: `node ${process.version}`,\n                userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n                serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n                libraryVersion: `apollo-server-core@${require('../../../package.json').version}`,\n            };\n            let currentSchemaReporter;\n            return {\n                schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {\n                    var _a;\n                    if (overrideReportedSchema !== undefined) {\n                        if (currentSchemaReporter) {\n                            return;\n                        }\n                        else {\n                            logger.info('Apollo schema reporting: schema to report has been overridden');\n                        }\n                    }\n                    const coreSchema = (_a = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : coreSupergraphSdl) !== null && _a !== void 0 ? _a : (0, graphql_1.printSchema)(apiSchema);\n                    const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n                    const schemaReport = {\n                        ...baseSchemaReport,\n                        coreSchemaHash,\n                    };\n                    currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n                    currentSchemaReporter = new schemaReporter_1.SchemaReporter({\n                        schemaReport,\n                        coreSchema,\n                        apiKey: key,\n                        endpointUrl,\n                        logger,\n                        initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n                        fallbackReportingDelayInMs: 20000,\n                        fetcher,\n                    });\n                    currentSchemaReporter.start();\n                    logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n                        `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n                },\n                async serverWillStop() {\n                    currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n                },\n            };\n        },\n    };\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\nfunction computeCoreSchemaHash(schema) {\n    return (0, createSHA_1.default)('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}