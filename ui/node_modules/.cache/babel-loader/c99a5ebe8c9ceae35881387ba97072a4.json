{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServer = void 0;\n\nconst express_1 = __importDefault(require(\"express\"));\n\nconst cors_1 = __importDefault(require(\"cors\"));\n\nconst body_parser_1 = require(\"body-parser\");\n\nconst apollo_server_core_1 = require(\"apollo-server-core\");\n\nconst accepts_1 = __importDefault(require(\"accepts\"));\n\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n  async createGraphQLServerOptions(req, res) {\n    const contextParams = {\n      req,\n      res\n    };\n    return super.graphQLServerOptions(contextParams);\n  }\n\n  applyMiddleware(_ref) {\n    let {\n      app,\n      ...rest\n    } = _ref;\n    this.assertStarted('applyMiddleware');\n    app.use(this.getMiddleware(rest));\n  }\n\n  getMiddleware() {\n    let {\n      path,\n      cors,\n      bodyParserConfig,\n      disableHealthCheck,\n      onHealthCheck,\n      __internal_healthCheckPath\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!path) path = '/graphql';\n    this.assertStarted('getMiddleware');\n    const router = express_1.default.Router();\n\n    if (!disableHealthCheck && __internal_healthCheckPath !== null) {\n      router.use(__internal_healthCheckPath !== null && __internal_healthCheckPath !== void 0 ? __internal_healthCheckPath : '/.well-known/apollo/server-health', (req, res) => {\n        res.type('application/health+json');\n\n        if (onHealthCheck) {\n          onHealthCheck(req).then(() => {\n            res.json({\n              status: 'pass'\n            });\n          }).catch(() => {\n            res.status(503).json({\n              status: 'fail'\n            });\n          });\n        } else {\n          res.json({\n            status: 'pass'\n          });\n        }\n      });\n    }\n\n    this.graphqlPath = path;\n\n    if (cors === true) {\n      router.use(path, (0, cors_1.default)());\n    } else if (cors !== false) {\n      router.use(path, (0, cors_1.default)(cors));\n    }\n\n    if (bodyParserConfig === true) {\n      router.use(path, (0, body_parser_1.json)());\n    } else if (bodyParserConfig !== false) {\n      router.use(path, (0, body_parser_1.json)(bodyParserConfig));\n    }\n\n    const landingPage = this.getLandingPage();\n    router.use(path, (req, res, next) => {\n      if (landingPage && prefersHtml(req)) {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(landingPage.html);\n        res.end();\n        return;\n      }\n\n      if (!req.body) {\n        res.status(500);\n\n        if (bodyParserConfig === false) {\n          res.send('`res.body` is not set; you passed `bodyParserConfig: false`, ' + 'but you still need to use `body-parser` middleware yourself.');\n        } else {\n          res.send('`res.body` is not set even though Apollo Server installed ' + \"`body-parser` middleware; this shouldn't happen!\");\n        }\n\n        return;\n      }\n\n      (0, apollo_server_core_1.runHttpQuery)([], {\n        method: req.method,\n        options: () => this.createGraphQLServerOptions(req, res),\n        query: req.method === 'POST' ? req.body : req.query,\n        request: (0, apollo_server_core_1.convertNodeHttpToRequest)(req)\n      }).then(_ref2 => {\n        let {\n          graphqlResponse,\n          responseInit\n        } = _ref2;\n\n        if (responseInit.headers) {\n          for (const [name, value] of Object.entries(responseInit.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n\n        res.statusCode = responseInit.status || 200;\n\n        if (typeof res.send === 'function') {\n          res.send(graphqlResponse);\n        } else {\n          res.end(graphqlResponse);\n        }\n      }, error => {\n        if (!(0, apollo_server_core_1.isHttpQueryError)(error)) {\n          return next(error);\n        }\n\n        if (error.headers) {\n          for (const [name, value] of Object.entries(error.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n\n        res.statusCode = error.statusCode;\n\n        if (typeof res.send === 'function') {\n          res.send(error.message);\n        } else {\n          res.end(error.message);\n        }\n      });\n    });\n    return router;\n  }\n\n}\n\nexports.ApolloServer = ApolloServer;\n\nfunction prefersHtml(req) {\n  if (req.method !== 'GET') {\n    return false;\n  }\n\n  const accept = (0, accepts_1.default)(req);\n  const types = accept.types();\n  return types.find(x => x === 'text/html' || x === 'application/json') === 'text/html';\n}","map":{"version":3,"sources":["../src/ApolloServer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst body_parser_1 = require(\"body-parser\");\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nconst accepts_1 = __importDefault(require(\"accepts\"));\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n    async createGraphQLServerOptions(req, res) {\n        const contextParams = { req, res };\n        return super.graphQLServerOptions(contextParams);\n    }\n    applyMiddleware({ app, ...rest }) {\n        this.assertStarted('applyMiddleware');\n        app.use(this.getMiddleware(rest));\n    }\n    getMiddleware({ path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, __internal_healthCheckPath, } = {}) {\n        if (!path)\n            path = '/graphql';\n        this.assertStarted('getMiddleware');\n        const router = express_1.default.Router();\n        if (!disableHealthCheck && __internal_healthCheckPath !== null) {\n            router.use(__internal_healthCheckPath !== null && __internal_healthCheckPath !== void 0 ? __internal_healthCheckPath : '/.well-known/apollo/server-health', (req, res) => {\n                res.type('application/health+json');\n                if (onHealthCheck) {\n                    onHealthCheck(req)\n                        .then(() => {\n                        res.json({ status: 'pass' });\n                    })\n                        .catch(() => {\n                        res.status(503).json({ status: 'fail' });\n                    });\n                }\n                else {\n                    res.json({ status: 'pass' });\n                }\n            });\n        }\n        this.graphqlPath = path;\n        if (cors === true) {\n            router.use(path, (0, cors_1.default)());\n        }\n        else if (cors !== false) {\n            router.use(path, (0, cors_1.default)(cors));\n        }\n        if (bodyParserConfig === true) {\n            router.use(path, (0, body_parser_1.json)());\n        }\n        else if (bodyParserConfig !== false) {\n            router.use(path, (0, body_parser_1.json)(bodyParserConfig));\n        }\n        const landingPage = this.getLandingPage();\n        router.use(path, (req, res, next) => {\n            if (landingPage && prefersHtml(req)) {\n                res.setHeader('Content-Type', 'text/html');\n                res.write(landingPage.html);\n                res.end();\n                return;\n            }\n            if (!req.body) {\n                res.status(500);\n                if (bodyParserConfig === false) {\n                    res.send('`res.body` is not set; you passed `bodyParserConfig: false`, ' +\n                        'but you still need to use `body-parser` middleware yourself.');\n                }\n                else {\n                    res.send('`res.body` is not set even though Apollo Server installed ' +\n                        \"`body-parser` middleware; this shouldn't happen!\");\n                }\n                return;\n            }\n            (0, apollo_server_core_1.runHttpQuery)([], {\n                method: req.method,\n                options: () => this.createGraphQLServerOptions(req, res),\n                query: req.method === 'POST' ? req.body : req.query,\n                request: (0, apollo_server_core_1.convertNodeHttpToRequest)(req),\n            }).then(({ graphqlResponse, responseInit }) => {\n                if (responseInit.headers) {\n                    for (const [name, value] of Object.entries(responseInit.headers)) {\n                        res.setHeader(name, value);\n                    }\n                }\n                res.statusCode = responseInit.status || 200;\n                if (typeof res.send === 'function') {\n                    res.send(graphqlResponse);\n                }\n                else {\n                    res.end(graphqlResponse);\n                }\n            }, (error) => {\n                if (!(0, apollo_server_core_1.isHttpQueryError)(error)) {\n                    return next(error);\n                }\n                if (error.headers) {\n                    for (const [name, value] of Object.entries(error.headers)) {\n                        res.setHeader(name, value);\n                    }\n                }\n                res.statusCode = error.statusCode;\n                if (typeof res.send === 'function') {\n                    res.send(error.message);\n                }\n                else {\n                    res.end(error.message);\n                }\n            });\n        });\n        return router;\n    }\n}\nexports.ApolloServer = ApolloServer;\nfunction prefersHtml(req) {\n    if (req.method !== 'GET') {\n        return false;\n    }\n    const accept = (0, accepts_1.default)(req);\n    const types = accept.types();\n    return (types.find((x) => x === 'text/html' || x === 'application/json') ===\n        'text/html');\n}\n//# sourceMappingURL=ApolloServer.js.map"]},"metadata":{},"sourceType":"script"}